/*
 * This file was automatically generated by EvoSuite
 * Fri May 05 15:12:26 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_6266;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_6266_ESTest extends task_6266_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      task_6266 task_6266_0 = new task_6266();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth(zonedDateTime0, (-1));
      } catch(DateTimeException e) {
         //
         // Invalid day of month: -1
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      ZonedDateTime zonedDateTime1 = task_6266.withDayOfMonth(zonedDateTime0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      Clock clock0 = MockClock.system(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(instant0, (ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth(zonedDateTime0, 2123);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 2123
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 0);
      // Undeclared exception!
      try { 
        task_6266.of(0, 1, 0, 0, (-1), 0, 1, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 0
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      // Undeclared exception!
      try { 
        task_6266.of(2486, 1, 2486, 0, 69, (-3248), (-1), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 2486
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      // Undeclared exception!
      try { 
        task_6266.of((-4054), 1, 1, (-4054), 1074, (-4054), 1074, zoneId0);
      } catch(DateTimeException e) {
         //
         // Invalid hour: -4054
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 192, 1, 521, 1, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid hour: 192
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, (-938), (-938), 1, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid minute: -938
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 3067, 987, 987, (ZoneId) null);
      } catch(DateTimeException e) {
         //
         // Invalid minute: 3067
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 1, (-2594), (-2594), (ZoneId) null);
      } catch(DateTimeException e) {
         //
         // Invalid second: -2594
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 1, 987, 987, (ZoneId) null);
      } catch(DateTimeException e) {
         //
         // Invalid second: 987
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 0, 0, 0, (-21), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid nanoOfSecond: -21
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      // Undeclared exception!
      try { 
        task_6266.of(11, 11, 11, 11, 11, 11, 1000000018, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid nanoOfSecond: 1000000018
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(4, 4, 4, 4, 4, 4, 1463, (ZoneId) null);
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth((ZonedDateTime) null, (-1));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }
}
