/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 10:24:51 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_6266;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_6266_ESTest extends task_6266_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      task_6266 task_6266_0 = new task_6266();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth(zonedDateTime0, 0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 0
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      ZonedDateTime zonedDateTime1 = task_6266.withDayOfMonth(zonedDateTime0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth(zonedDateTime0, 3831);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 3831
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        task_6266.of(1586, 1, 0, 2139, 0, 1586, 2139, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 0
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1003, 1003, 1003, 1, 1003, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 1003
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      // Undeclared exception!
      try { 
        task_6266.of(0, 1, 1, (-1814), 0, 1, 0, zoneId0);
      } catch(DateTimeException e) {
         //
         // Invalid hour: -1814
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 23, 917, (-1579), 0, 23, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid hour: 917
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, (-241), 1, (-241), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid minute: -241
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 3852, 1, 1, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid minute: 3852
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      // Undeclared exception!
      try { 
        task_6266.of(0, 1, 1, 1, 1, (-2001), (-1704), zoneId1);
      } catch(DateTimeException e) {
         //
         // Invalid second: -2001
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      // Undeclared exception!
      try { 
        task_6266.of(0, 8, 8, 1, 1, 1039, (-1704), zoneId1);
      } catch(DateTimeException e) {
         //
         // Invalid second: 1039
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      // Undeclared exception!
      try { 
        task_6266.of(0, 1, 1, 1, 1, 1, (-1704), zoneId1);
      } catch(DateTimeException e) {
         //
         // Invalid nanoOfSecond: -1704
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        task_6266.of(4, 4, 4, 4, 4, 4, 1000000020, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid nanoOfSecond: 1000000020
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 0, 1, 0, (ZoneId) null);
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth((ZonedDateTime) null, 23);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }
}
