/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 09:29:34 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_32125;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.MemoryCacheImageInputStream;
import javax.imageio.stream.MemoryCacheImageOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_32125_ESTest extends task_32125_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      task_32125 task_32125_0 = new task_32125();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)79;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(byteArrayInputStream0);
      BufferedImage bufferedImage0 = task_32125.decodeImage(memoryCacheImageInputStream0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Supplied index is out of bounds");
      MemoryCacheImageOutputStream memoryCacheImageOutputStream0 = new MemoryCacheImageOutputStream(mockPrintStream0);
      try { 
        task_32125.decodeImage(memoryCacheImageOutputStream0);
      } catch(IOException e) {
         //
         // No suitable ImageReader found
         //
         verifyException("com.example.task_evaluated.task_32125", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(byteArrayInputStream0);
      try { 
        task_32125.decodeImage(memoryCacheImageInputStream0);
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.stream.ImageInputStreamImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3384);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        task_32125.decodeImage(memoryCacheImageInputStream0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_32125.decodeImage((ImageInputStream) null);
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, (InputStream) null);
      MemoryCacheImageInputStream memoryCacheImageInputStream0 = new MemoryCacheImageInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        task_32125.decodeImage(memoryCacheImageInputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }
}
