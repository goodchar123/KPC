/*
 * This file was automatically generated by EvoSuite
 * Fri May 05 11:26:57 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_6266;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_6266_ESTest extends task_6266_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      task_6266 task_6266_0 = new task_6266();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth(zonedDateTime0, (-122));
      } catch(DateTimeException e) {
         //
         // Invalid day of month: -122
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofStrict(localDateTime0, zoneOffset0, zoneOffset0);
      ZonedDateTime zonedDateTime1 = task_6266.withDayOfMonth(zonedDateTime0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZonedDateTime zonedDateTime0 = task_6266.of(1, 1, 1, 1, 0, 0, 1, zoneOffset0);
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth(zonedDateTime0, 698);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 698
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        task_6266.of((-144), 1, (-2814), 1, 0, (-2814), (-144), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: -2814
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      // Undeclared exception!
      try { 
        task_6266.of((-1), 1, 1465, (-2814), (-826), (-22), (-2814), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid day of month: 1465
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3880));
      // Undeclared exception!
      try { 
        task_6266.of((-4265), 1, 1, (-1348), (-1), (-1), (-1), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid hour: -1348
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of((-1351), 1, 3, 2058, 1, 0, 3, (ZoneId) null);
      } catch(DateTimeException e) {
         //
         // Invalid hour: 2058
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, (-18), (-18), (-1), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid minute: -18
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 3378, 3378, 3378, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid minute: 3378
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 0, 1, (-1), 1854, (ZoneId) null);
      } catch(DateTimeException e) {
         //
         // Invalid second: -1
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 1, 252, 1, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid second: 252
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 0, 0, (-1), zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid nanoOfSecond: -1
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 1, 1, 1000000013, zoneOffset0);
      } catch(DateTimeException e) {
         //
         // Invalid nanoOfSecond: 1000000013
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.of(1, 1, 1, 1, 1, 0, 0, (ZoneId) null);
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        task_6266.withDayOfMonth((ZonedDateTime) null, (-748));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.task_evaluated.task_6266", e);
      }
  }
}
