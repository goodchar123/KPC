/*
 * This file was automatically generated by EvoSuite
 * Fri May 05 09:38:23 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_6705;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_6705_ESTest extends task_6705_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      task_6705 task_6705_0 = new task_6705();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Period period0 = Period.of((-1170), (-1170), 0);
      // Undeclared exception!
      try { 
        task_6705.subtractFromDateTime((LocalDateTime) null, period0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.task_evaluated.task_6705", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        task_6705.subtractFromDateTime(localDateTime0, duration0);
      } catch(DateTimeException e) {
         //
         // Subtraction cannot be made
         //
         verifyException("com.example.task_evaluated.task_6705", e);
      }
  }
}
