/*
 * This file was automatically generated by EvoSuite
 * Fri May 05 02:15:19 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_17382;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.sql.SQLXML;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_17382_ESTest extends task_17382_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      pipedOutputStream0.write(byteArray0);
      SQLXML sQLXML1 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(sQLXML1).getBinaryStream();
      // Undeclared exception!
      try { 
        task_17382_0.writeSQLXMLValue(sQLXML1, (OutputStream) null);
      } catch(NullPointerException e) {
         //
         // Output stream is null
         //
         verifyException("com.example.task_evaluated.task_17382", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      MockPrintStream mockPrintStream0 = new MockPrintStream("s`z3n#9BTyqsK?");
      try { 
        task_17382_0.writeSQLXMLValue((SQLXML) null, mockPrintStream0);
      } catch(SQLException e) {
         //
         // SQLXML value is null
         //
         verifyException("com.example.task_evaluated.task_17382", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      SQLXML sQLXML1 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(sQLXML1).getBinaryStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        task_17382_0.writeSQLXMLValue(sQLXML1, pipedOutputStream0);
      } catch(SQLException e) {
         //
         // SQLXML value is not readable
         //
         verifyException("com.example.task_evaluated.task_17382", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      try { 
        MockURI.URI("e'>u^ / I$%:nq", "]vd", (String) null, "]vd");
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 2: e'>u^ / I$%:nq://]vd#]vd
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("s`z3n#9BTyqsK?");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(sQLXML0).getBinaryStream();
      try { 
        task_17382_0.writeSQLXMLValue(sQLXML0, (OutputStream) null);
      } catch(SQLException e) {
         //
         // SQLXML value is not readable
         //
         verifyException("com.example.task_evaluated.task_17382", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(sQLXML0).getBinaryStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) task_17382_0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) task_17382_0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      try { 
        task_17382_0.writeSQLXMLValue(sQLXML0, objectOutputStream0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(sQLXML0).getBinaryStream();
      MockFile mockFile0 = new MockFile((File) null, "usa-.4+BmW,K");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      try { 
        task_17382_0.writeSQLXMLValue(sQLXML0, mockFileOutputStream0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      task_17382 task_17382_0 = new task_17382();
      SQLXML sQLXML0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SQLXML sQLXML1 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1024);
      SQLXML sQLXML2 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(sQLXML2).getBinaryStream();
      pipedOutputStream0.close();
      OutputStream outputStream0 = null;
      task_17382_0.writeSQLXMLValue(sQLXML2, (OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C~$3mG:`]%", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      try { 
        mockFileOutputStream0.write(byteArray0, (int) (byte) (-58), (-1));
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
}
