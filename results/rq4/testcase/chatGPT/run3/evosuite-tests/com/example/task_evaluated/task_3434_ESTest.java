/*
 * This file was automatically generated by EvoSuite
 * Thu May 04 06:44:55 GMT 2023
 */

package com.example.task_evaluated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.task_evaluated.task_3434;
import java.util.Iterator;
import javax.xml.namespace.NamespaceContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class task_3434_ESTest extends task_3434_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      task_3434 task_3434_0 = new task_3434();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(task_3434_0).when(iterator0).next();
      NamespaceContext namespaceContext0 = mock(NamespaceContext.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(namespaceContext0).getPrefixes(anyString());
      // Undeclared exception!
      try { 
        task_3434.getPrefixBoundToNamespaceURI(namespaceContext0, "");
      } catch(ClassCastException e) {
         //
         // com.example.task_evaluated.task_3434 cannot be cast to java.lang.String
         //
         verifyException("com.example.task_evaluated.task_3434", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn("By)~7vqw=<lOoP6BK~").when(iterator0).next();
      NamespaceContext namespaceContext0 = mock(NamespaceContext.class, new ViolatedAssumptionAnswer());
      doReturn("").when(namespaceContext0).getNamespaceURI(anyString());
      doReturn(iterator0).when(namespaceContext0).getPrefixes(anyString());
      String string0 = task_3434.getPrefixBoundToNamespaceURI(namespaceContext0, "");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      task_3434 task_3434_0 = new task_3434();
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      NamespaceContext namespaceContext0 = mock(NamespaceContext.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator1).hasNext();
      doReturn("").when(iterator1).next();
      NamespaceContext namespaceContext1 = mock(NamespaceContext.class, new ViolatedAssumptionAnswer());
      doReturn("B6*`fh9[#J({g55").when(namespaceContext1).getNamespaceURI(anyString());
      doReturn(iterator1).when(namespaceContext1).getPrefixes(anyString());
      String string0 = task_3434.getPrefixBoundToNamespaceURI(namespaceContext1, "");
      NamespaceContext namespaceContext2 = mock(NamespaceContext.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(namespaceContext2).getPrefixes(anyString());
      // Undeclared exception!
      try { 
        task_3434.getPrefixBoundToNamespaceURI(namespaceContext2, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.task_evaluated.task_3434", e);
      }
  }
}
