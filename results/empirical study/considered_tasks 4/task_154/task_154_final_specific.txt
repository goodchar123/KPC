Please pay attention to SQLTimeoutException, SQLException.
You're right, it's important to handle exceptions properly in Java code that interacts with databases. Here's an updated version of the `TableHelper` class that includes exception handling:

```java
import java.sql.*;

public class TableHelper {
    private Connection conn;

    public TableHelper(Connection conn) {
        this.conn = conn;
    }

    public int getRowCount(String tableName) throws SQLException {
        int rowCount = 0;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = conn.createStatement();
            stmt.setQueryTimeout(10); // set a timeout of 10 seconds
            rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
            if (rs.next()) {
                rowCount = rs.getInt(1);
            }
        } catch (SQLTimeoutException e) {
            System.err.println("Query timed out: " + e.getMessage());
        } finally {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
        }
        return rowCount;
    }

    public void updateTable(String tableName, String columnName, String columnValue, String whereClause) throws SQLException {
        PreparedStatement pstmt = null;
        try {
            String sql = "UPDATE " + tableName + " SET " + columnName + " = ? WHERE " + whereClause;
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, columnValue);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error updating table: " + e.getMessage());
        } finally {
            if (pstmt != null) pstmt.close();
        }
    }
}
```

In the `getRowCount` method, we've added a call to `setQueryTimeout` to set a timeout of 10 seconds for the query. If the query takes longer than 10 seconds to execute, a `SQLTimeoutException` will be thrown. We catch this exception and print an error message to the console.

In the `updateTable` method, we catch `SQLException` and print an error message to the console if an error occurs while updating the table.

Note that in both methods, we're closing the `Statement` or `PreparedStatement` object in a `finally` block to ensure that it's always closed, even if an exception is thrown.
------------------------------------------------------
Please pay attention to SQLException, SQLTimeoutException.
You are correct, it is important to handle both `SQLException` and `SQLTimeoutException` in Java when working with databases. Here is an updated version of the `TableHelper` class that includes exception handling for both types of exceptions:

```java
import java.sql.*;

public class TableHelper {
    private Connection conn;

    public TableHelper(Connection conn) {
        this.conn = conn;
    }

    public int getRowCount(String tableName) throws SQLException, SQLTimeoutException {
        int rowCount = 0;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT COUNT(*) FROM " + tableName);
            if (rs.next()) {
                rowCount = rs.getInt(1);
            }
        } catch (SQLException e) {
            throw e;
        } catch (Exception e) {
            throw new SQLException("Error executing query", e);
        } finally {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
        }
        return rowCount;
    }

    public void updateTable(String tableName, String columnName, String columnValue, String whereClause) throws SQLException, SQLTimeoutException {
        PreparedStatement pstmt = null;
        try {
            String sql = "UPDATE " + tableName + " SET " + columnName + " = ? WHERE " + whereClause;
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, columnValue);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            throw e;
        } catch (Exception e) {
            throw new SQLException("Error executing query", e);
        } finally {
            if (pstmt != null) pstmt.close();
        }
    }
}
```

In this updated version, both methods now throw both `SQLException` and `SQLTimeoutException`. The `getRowCount` method catches both types of exceptions and re-throws them, while the `updateTable` method does the same. Additionally, both methods catch any other exceptions that may occur and wrap them in a new `SQLException` with a more informative error message. This helps to ensure that any errors that occur during database operations are properly handled and reported.
------------------------------------------------------
