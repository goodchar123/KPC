Please pay attention to potential exceptions.
You're right, it's important to handle potential exceptions in Java code. Here's an updated version of the code that includes exception handling:

```java
import javax.swing.*;
import java.awt.*;

public class ShapesGUI extends JFrame {
    
    public ShapesGUI() {
        setTitle("Shapes GUI");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    public void paint(Graphics g) {
        super.paint(g);
        
        try {
            // Draw a rectangle
            g.setColor(Color.RED);
            g.fillRect(50, 50, 100, 50);
            
            // Draw an oval
            g.setColor(Color.BLUE);
            g.fillOval(200, 50, 100, 50);
            
            // Draw a triangle
            g.setColor(Color.GREEN);
            int[] xPoints = {300, 350, 250};
            int[] yPoints = {150, 200, 200};
            g.fillPolygon(xPoints, yPoints, 3);
            
            // Draw a line
            g.setColor(Color.BLACK);
            g.drawLine(50, 250, 450, 250);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
    
    public static void main(String[] args) {
        try {
            new ShapesGUI();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
```

In this version of the code, we've added a try-catch block around the drawing code in the `paint` method. This will catch any exceptions that might occur while drawing the shapes and print an error message to the console.

We've also added a try-catch block around the creation of the `ShapesGUI` object in the `main` method. This will catch any exceptions that might occur while creating the GUI and print an error message to the console.

------------------------------------------------------
Please pay attention to potential exceptions.
You're right, it's important to handle potential exceptions in Java code. Here's an updated version of the code that includes exception handling:

```java
import javax.swing.*;
import java.awt.*;

public class ShapesGUI extends JFrame {
    
    public ShapesGUI() {
        setTitle("Shapes GUI");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    public void paint(Graphics g) {
        super.paint(g);
        
        try {
            // Draw a rectangle
            g.setColor(Color.RED);
            g.fillRect(50, 50, 100, 50);
            
            // Draw an oval
            g.setColor(Color.BLUE);
            g.fillOval(200, 50, 100, 50);
            
            // Draw a triangle
            g.setColor(Color.GREEN);
            int[] xPoints = {300, 350, 250};
            int[] yPoints = {150, 200, 200};
            g.fillPolygon(xPoints, yPoints, 3);
            
            // Draw a line
            g.setColor(Color.BLACK);
            g.drawLine(50, 250, 450, 250);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
    
    public static void main(String[] args) {
        try {
            new ShapesGUI();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
```

In this version of the code, we've added a try-catch block around the drawing code in the `paint` method. This will catch any exceptions that might occur while drawing the shapes and print an error message to the console.

We've also added a try-catch block around the creation of the `ShapesGUI` object in the `main` method. This will catch any exceptions that might occur while creating the GUI and print an error message to the console.

------------------------------------------------------
