
Here's an updated version of the Java method that includes the requested error checking:

```java
public static void findDuplicateWords(String input) throws IllegalArgumentException, PatternSyntaxException, IllegalStateException {
    Pattern pattern = null;
    try {
        pattern = Pattern.compile("\\b(\\w+)\\b\\s+\\b\\1\\b", Pattern.CASE_INSENSITIVE);
    } catch (IllegalArgumentException | PatternSyntaxException e) {
        throw e;
    }
    Matcher matcher = pattern.matcher(input);
    if (!matcher.matches()) {
        throw new IllegalStateException("No match has been attempted yet.");
    }
    while (matcher.find()) {
        try {
            System.out.println("Duplicate word found: " + matcher.group());
        } catch (IllegalStateException e) {
            throw e;
        }
    }
}
```

This updated method includes the following error checking:

- If bit values other than those corresponding to the defined match flags are set in the `flags` parameter of `Pattern.compile()`, an `IllegalArgumentException` is thrown.
- If the regular expression syntax is invalid, a `PatternSyntaxException` is thrown.
- If no match has been attempted yet, or if the previous match operation failed, an `IllegalStateException` is thrown.

The `try-catch` blocks are used to catch any exceptions thrown by the `Pattern.compile()` and `Matcher.group()` methods, and re-throw them with the appropriate error message.
------------------------------------------------------
