Please write a java method that extend an array after initialisation in Java
Here's an example Java method that extends an array after initialization:

```java
public static int[] extendArray(int[] arr, int size) {
    int[] newArr = new int[arr.length + size];
    System.arraycopy(arr, 0, newArr, 0, arr.length);
    return newArr;
}
```

This method takes in an integer array `arr` and an integer `size` as parameters. It creates a new integer array `newArr` with a length equal to the length of `arr` plus `size`. It then uses the `System.arraycopy()` method to copy the elements of `arr` into `newArr`. Finally, it returns the new array `newArr`.

To use this method, you can call it like this:

```java
int[] arr = {1, 2, 3};
int[] extendedArr = extendArray(arr, 2);
```

This will create a new array `extendedArr` with a length of 5, containing the elements `{1, 2, 3, 0, 0}`.
------------------------------------------------------
Please check if copying would cause             access of data outside array bounds. for java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
Please check if an element in the src             array could not be stored into the dest array             because of a type mismatch. for java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int) in the code snippet you provided, otherwise throw ArrayStoreException.
Please check if either src or             dest is null. for java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int) in the code snippet you provided, otherwise throw NullPointerException.
Here's an updated version of the Java method that includes the requested error checking:

```java
public static int[] extendArray(int[] arr, int size) throws IndexOutOfBoundsException, ArrayStoreException, NullPointerException {
    if (arr == null) {
        throw new NullPointerException("Source array is null");
    }
    int[] newArr = new int[arr.length + size];
    try {
        System.arraycopy(arr, 0, newArr, 0, arr.length);
    } catch (IndexOutOfBoundsException e) {
        throw new IndexOutOfBoundsException("Copying would cause access of data outside array bounds");
    } catch (ArrayStoreException e) {
        throw new ArrayStoreException("An element in the src array could not be stored into the dest array because of a type mismatch");
    }
    return newArr;
}
```

This updated method includes three checks:

1. If the source array `arr` is null, it throws a `NullPointerException` with a message indicating that the source array is null.
2. If copying the elements from `arr` to `newArr` would cause access of data outside array bounds, it throws an `IndexOutOfBoundsException` with a message indicating that copying would cause access of data outside array bounds.
3. If an element in `arr` could not be stored into `newArr` because of a type mismatch, it throws an `ArrayStoreException` with a message indicating that an element in the src array could not be stored into the dest array because of a type mismatch.

Note that the `try-catch` block is used to catch the `IndexOutOfBoundsException` and `ArrayStoreException` that may be thrown by the `System.arraycopy()` method. If either of these exceptions is caught, the method throws a new exception with a more specific message.
------------------------------------------------------
