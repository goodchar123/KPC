
Here's an updated version of the Java method that includes the requested error checking:

```java
public static int[] extendArray(int[] arr, int size) throws IndexOutOfBoundsException, ArrayStoreException, NullPointerException {
    if (arr == null) {
        throw new NullPointerException("Source array is null");
    }
    int[] newArr = new int[arr.length + size];
    try {
        System.arraycopy(arr, 0, newArr, 0, arr.length);
    } catch (IndexOutOfBoundsException e) {
        throw new IndexOutOfBoundsException("Copying would cause access of data outside array bounds");
    } catch (ArrayStoreException e) {
        throw new ArrayStoreException("An element in the src array could not be stored into the dest array because of a type mismatch");
    }
    return newArr;
}
```

This updated method includes three checks:

1. If the source array `arr` is null, it throws a `NullPointerException` with a message indicating that the source array is null.
2. If copying the elements from `arr` to `newArr` would cause access of data outside array bounds, it throws an `IndexOutOfBoundsException` with a message indicating that copying would cause access of data outside array bounds.
3. If an element in `arr` could not be stored into `newArr` because of a type mismatch, it throws an `ArrayStoreException` with a message indicating that an element in the src array could not be stored into the dest array because of a type mismatch.

Note that the `try-catch` block is used to catch the `IndexOutOfBoundsException` and `ArrayStoreException` that may be thrown by the `System.arraycopy()` method. If either of these exceptions is caught, the method throws a new exception with a more specific message.
------------------------------------------------------
