Please pay attention to potential exceptions.
You're right, it's important to handle potential exceptions in the code. Here's an updated version of the code that includes exception handling:

```
public void solveDeadlock() {
    Object resource1 = new Object();
    Object resource2 = new Object();

    Thread thread1 = new Thread(() -> {
        synchronized (resource1) {
            System.out.println("Thread 1 acquired resource 1");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            synchronized (resource2) {
                System.out.println("Thread 1 acquired resource 2");
            }
        }
    });

    Thread thread2 = new Thread(() -> {
        synchronized (resource1) {
            System.out.println("Thread 2 acquired resource 1");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            synchronized (resource2) {
                System.out.println("Thread 2 acquired resource 2");
            }
        }
    });

    try {
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
```

In this updated version, we've added a try-catch block around the thread start and join methods to handle any potential InterruptedExceptions that may occur. This ensures that the threads are properly started and joined, and any exceptions that occur are properly handled.

------------------------------------------------------
Please pay attention to potential exceptions.
You're right, it's important to handle potential exceptions in the code. Here's an updated version of the code that includes exception handling:

```
public void solveDeadlock() {
    Object resource1 = new Object();
    Object resource2 = new Object();

    Thread thread1 = new Thread(() -> {
        synchronized (resource1) {
            System.out.println("Thread 1 acquired resource 1");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            synchronized (resource2) {
                System.out.println("Thread 1 acquired resource 2");
            }
        }
    });

    Thread thread2 = new Thread(() -> {
        synchronized (resource1) {
            System.out.println("Thread 2 acquired resource 1");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            synchronized (resource2) {
                System.out.println("Thread 2 acquired resource 2");
            }
        }
    });

    try {
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
```

In this updated version, we've added a try-catch block around the thread start and join methods to handle any potential InterruptedExceptions that may occur. This ensures that the threads are properly started and joined, and any exceptions that occur are handled gracefully.

------------------------------------------------------
