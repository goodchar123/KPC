Please pay attention to potential exceptions.
You're right, it's important to handle potential exceptions in the code. Here's an updated version of the `rotateList` method that includes exception handling:

```java
public static <T> void rotateList(List<T> list, int distance) throws IllegalArgumentException {
    int size = list.size();
    if (size == 0) {
        return;
    }
    distance = distance % size;
    if (distance < 0) {
        distance += size;
    }
    if (distance == 0) {
        return;
    }
    try {
        List<T> sublist1 = list.subList(0, size - distance);
        List<T> sublist2 = list.subList(size - distance, size);
        List<T> newList = new ArrayList<T>(size);
        newList.addAll(sublist2);
        newList.addAll(sublist1);
        for (int i = 0; i < size; i++) {
            list.set(i, newList.get(i));
        }
    } catch (IndexOutOfBoundsException e) {
        throw new IllegalArgumentException("Invalid distance: " + distance);
    }
}
```

In this version, we've added a `throws` clause to the method signature to indicate that it may throw an `IllegalArgumentException`. We've also added a `try-catch` block to catch any `IndexOutOfBoundsException` that may occur when accessing the sublists.

If an `IndexOutOfBoundsException` is caught, we throw a new `IllegalArgumentException` with a message indicating that the distance is invalid. This ensures that the method fails gracefully and provides useful feedback to the caller.

------------------------------------------------------
