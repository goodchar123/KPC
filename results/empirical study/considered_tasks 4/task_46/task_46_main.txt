Please write a java method that display date in different formats using Java
Sure, here's an example Java method that displays the current date in different formats:

```java
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class DateFormats {
    public static void main(String[] args) {
        LocalDate currentDate = LocalDate.now();
        System.out.println("Current date: " + currentDate);

        // Format 1: dd/MM/yyyy
        DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String formattedDate1 = currentDate.format(formatter1);
        System.out.println("Formatted date 1: " + formattedDate1);

        // Format 2: yyyy-MM-dd
        DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String formattedDate2 = currentDate.format(formatter2);
        System.out.println("Formatted date 2: " + formattedDate2);

        // Format 3: E, MMM dd yyyy
        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern("E, MMM dd yyyy");
        String formattedDate3 = currentDate.format(formatter3);
        System.out.println("Formatted date 3: " + formattedDate3);
    }
}
```

This method uses the `LocalDate` class from the `java.time` package to get the current date, and then uses `DateTimeFormatter` to format the date in three different ways. The output of this method would be something like:

```
Current date: 2021-10-14
Formatted date 1: 14/10/2021
Formatted date 2: 2021-10-14
Formatted date 3: Thu, Oct 14 2021
```
------------------------------------------------------
Please check if an error occurs during printing for java.time.LocalDate.format(java.time.format.DateTimeFormatter) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's the updated code snippet that checks for errors during formatting and throws a `DateTimeException` if an error occurs:

```java
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class DateFormats {
    public static void main(String[] args) {
        LocalDate currentDate = LocalDate.now();
        System.out.println("Current date: " + currentDate);

        // Format 1: dd/MM/yyyy
        DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        try {
            String formattedDate1 = currentDate.format(formatter1);
            System.out.println("Formatted date 1: " + formattedDate1);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date in format 1", e);
        }

        // Format 2: yyyy-MM-dd
        DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        try {
            String formattedDate2 = currentDate.format(formatter2);
            System.out.println("Formatted date 2: " + formattedDate2);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date in format 2", e);
        }

        // Format 3: E, MMM dd yyyy
        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern("E, MMM dd yyyy");
        try {
            String formattedDate3 = currentDate.format(formatter3);
            System.out.println("Formatted date 3: " + formattedDate3);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date in format 3", e);
        }
    }
}
```

This updated code uses a try-catch block to catch any `DateTimeParseException` that might occur during formatting. If an error occurs, it throws a `DateTimeException` with a message indicating which format caused the error and the original exception as the cause. This way, the caller of the method can handle the exception appropriately.
------------------------------------------------------
Please check if the pattern is invalid for java.time.format.DateTimeFormatter.ofPattern(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.
Please check if an error occurs during printing for java.time.LocalDate.format(java.time.format.DateTimeFormatter) in the code snippet you provided, otherwise throw DateTimeException.
Please check If a format string contains an illegal syntax, a format          specifier that is incompatible with the given arguments,          insufficient arguments given the format string, or other          illegal conditions.  For specification of all possible          formatting errors, see the Details section of the          formatter class specification. for java.lang.String.format(java.lang.String,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalFormatException.
Sure, here's the updated code snippet that checks for errors during formatting and throws the appropriate exceptions:

```java
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.IllegalFormatException;

public class DateFormats {
    public static void main(String[] args) {
        LocalDate currentDate = LocalDate.now();
        System.out.println("Current date: " + currentDate);

        // Format 1: dd/MM/yyyy
        DateTimeFormatter formatter1;
        try {
            formatter1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern for format 1", e);
        }
        try {
            String formattedDate1 = currentDate.format(formatter1);
            System.out.println("Formatted date 1: " + formattedDate1);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date in format 1", e);
        }

        // Format 2: yyyy-MM-dd
        DateTimeFormatter formatter2;
        try {
            formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern for format 2", e);
        }
        try {
            String formattedDate2 = currentDate.format(formatter2);
            System.out.println("Formatted date 2: " + formattedDate2);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date in format 2", e);
        }

        // Format 3: E, MMM dd yyyy
        DateTimeFormatter formatter3;
        try {
            formatter3 = DateTimeFormatter.ofPattern("E, MMM dd yyyy");
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern for format 3", e);
        }
        try {
            String formattedDate3 = currentDate.format(formatter3);
            System.out.println("Formatted date 3: " + formattedDate3);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date in format 3", e);
        }

        // Format 4: %d-%m-%Y
        try {
            String formattedDate4 = String.format("%d-%m-%Y", currentDate.getDayOfMonth(), currentDate.getMonthValue(), currentDate.getYear());
            System.out.println("Formatted date 4: " + formattedDate4);
        } catch (IllegalFormatException e) {
            throw new IllegalFormatException("Error formatting date in format 4", e);
        }
    }
}
```

This updated code checks for errors during formatting and throws the appropriate exceptions. For `DateTimeFormatter.ofPattern()`, it checks for an `IllegalArgumentException` if the pattern is invalid. For `LocalDate.format()`, it checks for a `DateTimeParseException` if an error occurs during formatting. For `String.format()`, it checks for an `IllegalFormatException` if the format string contains an illegal syntax or is incompatible with the given arguments. In each case, it throws an exception with a message indicating which format caused the error and the original exception as the cause. This way, the caller of the method can handle the exception appropriately.
------------------------------------------------------
