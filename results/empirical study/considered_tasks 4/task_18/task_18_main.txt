Please write a java method that determine the upper bound of a two dimensional array in Java
Here's a Java method that determines the upper bound of a two-dimensional array:

```java
public static int[] getUpperBound(int[][] arr) {
    int[] upperBound = new int[2];
    upperBound[0] = arr.length - 1;
    upperBound[1] = arr[0].length - 1;
    return upperBound;
}
```

This method takes a two-dimensional array as input and returns an array of integers representing the upper bound of the array. The upper bound is calculated by subtracting 1 from the length of the array in each dimension. The upper bound is returned as an array of two integers, where the first element represents the upper bound in the first dimension and the second element represents the upper bound in the second dimension.
------------------------------------------------------
Please check if copying would cause             access of data outside array bounds. for java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
Please check if an element in the src             array could not be stored into the dest array             because of a type mismatch. for java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int) in the code snippet you provided, otherwise throw ArrayStoreException.
Please check if either src or             dest is null. for java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int) in the code snippet you provided, otherwise throw NullPointerException.
The code snippet I provided does not use the `System.arraycopy` method, so there is no need to check for those exceptions. However, if you are using `System.arraycopy` in your code, here are the checks you should perform:

1. To check if copying would cause access of data outside array bounds, you should ensure that the source and destination arrays have enough space to accommodate the number of elements being copied. You can do this by checking the length of the arrays and the starting and ending indices of the copy operation. If the copy operation would cause access of data outside array bounds, you should throw an `IndexOutOfBoundsException`.

2. To check if an element in the source array could not be stored into the destination array because of a type mismatch, you should ensure that the source and destination arrays have the same element type. You can do this by checking the class of the arrays using the `getClass()` method. If the arrays have different element types, you should throw an `ArrayStoreException`.

3. To check if either the source or destination array is null, you should check if either of them is null before calling `System.arraycopy()`. If either array is null, you should throw a `NullPointerException`.
------------------------------------------------------
