Please pay attention to potential exceptions.
You're right, handling exceptions is important. Here's an updated version of the `commitQuery` method that includes exception handling:

```java
public void commitQuery(String query) {
    try {
        Statement statement = connection.createStatement();
        statement.executeUpdate(query);
        connection.commit();
        statement.close();
    } catch (SQLException e) {
        System.err.println("Error executing query: " + e.getMessage());
        try {
            connection.rollback();
        } catch (SQLException ex) {
            System.err.println("Error rolling back transaction: " + ex.getMessage());
        }
    }
}
```

In this version, we've added a `try-catch` block to catch any `SQLException` that may be thrown when executing the query. If an exception is caught, we print an error message and attempt to roll back the transaction using `connection.rollback()`. If rolling back the transaction also fails, we print another error message.

It's important to handle exceptions properly to ensure that your application doesn't crash unexpectedly and to provide useful error messages to the user.

------------------------------------------------------
Please pay attention to potential exceptions.
You're right, handling exceptions is important. Here's an updated version of the `commitQuery` method that includes exception handling:

```java
public void commitQuery(String query) {
    try {
        Statement statement = connection.createStatement();
        statement.executeUpdate(query);
        connection.commit();
        statement.close();
    } catch (SQLException e) {
        System.err.println("Error executing query: " + e.getMessage());
        try {
            connection.rollback();
        } catch (SQLException ex) {
            System.err.println("Error rolling back transaction: " + ex.getMessage());
        }
    }
}
```

In this version, we've added a `try-catch` block to catch any `SQLException` that may be thrown when executing the query. If an exception is caught, we print an error message and attempt to roll back the transaction using `connection.rollback()`. If rolling back the transaction also fails, we print another error message.

It's important to handle exceptions properly to ensure that your application doesn't crash unexpectedly and to provide useful error messages to the user.

------------------------------------------------------
