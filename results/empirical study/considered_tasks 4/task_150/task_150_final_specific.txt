Please pay attention to SQLException.
You are correct. SQLException is an important exception that can be thrown when working with databases. It is a checked exception, which means that it must be handled or declared in the method signature.

Here is an updated version of the `commitQuery` method that handles SQLException:

```java
public void commitQuery(String query) {
    try {
        Statement statement = connection.createStatement();
        statement.executeUpdate(query);
        connection.commit();
        statement.close();
    } catch (SQLException e) {
        System.err.println("Error executing query: " + e.getMessage());
        try {
            connection.rollback();
        } catch (SQLException ex) {
            System.err.println("Error rolling back transaction: " + ex.getMessage());
        }
    }
}
```

In this version, the method is wrapped in a try-catch block that catches SQLException. If an exception is caught, the method prints an error message and rolls back the transaction using `connection.rollback()`. This ensures that any changes made by the query are undone and the database is left in a consistent state.

Again, this is just an example and you should modify it to fit your specific needs.
------------------------------------------------------
Please pay attention to SQLException.
You are correct. SQLException is an important exception that can be thrown when working with databases. It is a checked exception, which means that it must be handled or declared in the method signature.

Here is an updated version of the `commitQuery` method that handles SQLException:

```java
public void commitQuery(String query) {
    try {
        Statement statement = connection.createStatement();
        statement.executeUpdate(query);
        connection.commit();
        statement.close();
    } catch (SQLException e) {
        System.err.println("Error executing query: " + e.getMessage());
        try {
            connection.rollback();
        } catch (SQLException ex) {
            System.err.println("Error rolling back transaction: " + ex.getMessage());
        }
    }
}
```

In this version, the method is wrapped in a try-catch block that catches SQLException. If an exception is caught, the method prints an error message and rolls back the transaction using `connection.rollback()`. This ensures that any changes made by the query are undone and the database is left in a consistent state.

Again, this is just an example and you should modify it to fit your specific needs.
------------------------------------------------------
