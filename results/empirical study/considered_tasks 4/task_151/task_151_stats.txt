{"loop_id": 0, "unhandled_api_list": ["java.sql.PreparedStatement.executeUpdate()"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeUpdate() in the code snippet you provided, otherwise throw SQLTimeoutException."], "num_of_unhandled_exception": 1}
{"loop_id": 1, "unhandled_api_list": ["java.sql.PreparedStatement.setDouble(int,double)", "java.sql.PreparedStatement.setInt(int,int)", "java.sql.Statement.cancel()", "java.sql.Statement.cancel()"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.setDouble(int,double) in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.setInt(int,int) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is called on a closed Statement for java.sql.Statement.cancel() in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Statement.cancel() in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException."], "num_of_unhandled_exception": 4}
{"loop_id": 2, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
