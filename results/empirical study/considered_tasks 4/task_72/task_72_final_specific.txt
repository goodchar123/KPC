Please pay attention to SecurityException.
You're right, thank you for bringing that up. The `listRoots()` method can throw a `SecurityException` if the security manager denies access to the file system. To handle this exception, we can add a try-catch block to our code:

```java
import java.io.File;

public class RootDirectories {
    public static void main(String[] args) {
        try {
            File[] roots = File.listRoots();
            for (File root : roots) {
                System.out.println(root.getAbsolutePath());
            }
        } catch (SecurityException e) {
            System.err.println("Access denied: " + e.getMessage());
        }
    }
}
```

In this updated code, we wrap the `File.listRoots()` method call in a try-catch block that catches the `SecurityException`. If the exception is thrown, we print an error message to the standard error stream using `System.err.println()`.
------------------------------------------------------
Please pay attention to SecurityException.
You're right, thank you for bringing that up. The `listRoots()` method can throw a `SecurityException` if the security manager denies access to the file system. To handle this exception, we can add a try-catch block to our code:

```java
import java.io.File;

public class RootDirectories {
    public static void main(String[] args) {
        try {
            File[] roots = File.listRoots();
            for (File root : roots) {
                System.out.println(root.getAbsolutePath());
            }
        } catch (SecurityException e) {
            System.err.println("Access denied: " + e.getMessage());
        }
    }
}
```

In this updated code, we wrap the `File.listRoots()` method call in a try-catch block that catches the `SecurityException`. If the exception is thrown, we print an error message to the standard error stream using `System.err.println()`.
------------------------------------------------------
