Please pay attention to IOException.
You are correct. The `ServerSocket` constructor can throw an `IOException`, which should be caught and handled appropriately. Here is an updated version of the method that takes care of this:

```java
import java.net.*;

public class PortChecker {
    public static boolean isPortInUse(int port) {
        try {
            ServerSocket serverSocket = new ServerSocket();
            serverSocket.setReuseAddress(true);
            serverSocket.bind(new InetSocketAddress(port));
            serverSocket.close();
            return false;
        } catch (IOException e) {
            return true;
        }
    }
}
```

In this version, we create a `ServerSocket` object without specifying a port number, then set the `reuseAddress` property to `true` to allow the port to be reused immediately after it is closed. We then bind the socket to the specified port using an `InetSocketAddress` object, and close the socket. If an `IOException` is thrown during any of these steps, it means the port is already in use and the method returns `true`. Otherwise, it returns `false`.
------------------------------------------------------
Please pay attention to IOException.
You are correct. The `ServerSocket` constructor can throw an `IOException`, which is a checked exception. Here is an updated version of the method that handles the `IOException`:

```java
import java.net.*;

public class PortChecker {
    public static boolean isPortInUse(int port) {
        try {
            ServerSocket serverSocket = new ServerSocket(port);
            serverSocket.close();
            return false;
        } catch (IOException e) {
            return true;
        }
    }
}
```

In this version, the `IOException` is caught and the method returns `true` to indicate that the port is being used.
------------------------------------------------------
