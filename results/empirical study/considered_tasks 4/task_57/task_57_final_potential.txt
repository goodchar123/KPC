Please pay attention to potential exceptions.
You're right, it's important to handle potential exceptions when working with files. Here's an updated version of the method that includes exception handling:

```java
import java.io.FileWriter;
import java.io.IOException;

public class FileAppender {
    public static void appendToFile(String fileName, String content) {
        FileWriter writer = null;
        try {
            writer = new FileWriter(fileName, true);
            writer.write(content);
        } catch (IOException e) {
            System.err.println("Error appending to file: " + e.getMessage());
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    System.err.println("Error closing file: " + e.getMessage());
                }
            }
        }
    }
}
```

In this version, we declare the `FileWriter` object outside of the try block so that we can access it in the finally block. If an exception occurs while creating the writer or writing to the file, we print an error message to the console. In the finally block, we check if the writer is not null (in case an exception occurred before it was created), and then close the writer. If an exception occurs while closing the writer, we print another error message to the console.

This way, we ensure that the file is always closed properly, even if an exception occurs.

------------------------------------------------------
