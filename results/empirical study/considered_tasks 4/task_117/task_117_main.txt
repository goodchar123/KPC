Please write a java method that display all running Thread in Java
Sure, here's a Java method that displays all running threads:

```
public static void displayRunningThreads() {
    Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
    for (Thread thread : threadSet) {
        System.out.println("Thread name: " + thread.getName() + ", Thread ID: " + thread.getId());
    }
}
```

This method uses the `Thread.getAllStackTraces()` method to get a set of all running threads. It then iterates through the set and prints out the name and ID of each thread.
------------------------------------------------------
Please check if a security manager exists and its        checkPermission method doesn't allow        getting the stack trace of thread. for java.lang.Thread.getAllStackTraces() in the code snippet you provided, otherwise throw SecurityException.
Sure, here's an updated version of the method that checks for a security manager and its `checkPermission` method before calling `Thread.getAllStackTraces()`:

```
public static void displayRunningThreads() throws SecurityException {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null) {
        securityManager.checkPermission(new RuntimePermission("getStackTrace"));
    }
    Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
    for (Thread thread : threadSet) {
        System.out.println("Thread name: " + thread.getName() + ", Thread ID: " + thread.getId());
    }
}
```

This updated method first checks if a security manager exists. If it does, it calls the `checkPermission` method on the security manager with a `RuntimePermission` object that represents the permission to get the stack trace. If the security manager doesn't allow this permission, a `SecurityException` is thrown. If the permission is allowed, the method proceeds to call `Thread.getAllStackTraces()` and display the running threads as before.
------------------------------------------------------
