
Sure, here's the updated code snippet that checks if the current thread has permission to interrupt the specified thread:

```
public static void interruptThread(Thread thread) throws SecurityException {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null) {
        securityManager.checkAccess(thread);
    }
    if (thread != null && thread.isAlive()) {
        thread.interrupt();
    } else {
        throw new IllegalArgumentException("Thread is not alive");
    }
}
```

This updated method first checks if a `SecurityManager` is installed. If it is, it calls the `checkAccess()` method on the `SecurityManager` to check if the current thread has permission to modify the specified thread. If the current thread does not have permission, a `SecurityException` is thrown.

If the current thread has permission, the method then checks if the specified thread is not null and is currently running. If it is, it calls the `interrupt()` method on the thread to interrupt it. If the specified thread is not alive, an `IllegalArgumentException` is thrown.
------------------------------------------------------
