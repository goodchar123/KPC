
You're right, it's important to check if the values passed to `LocalDateTime.of()` are valid. Here's an updated version of the `getLocalDateTime()` method that checks for invalid values and throws a `DateTimeException` if any of the values are out of range:

```java
import java.time.DateTimeException;
import java.time.LocalDateTime;

public class DateTimeUtils {
    public static LocalDateTime getLocalDateTime(int year, int month, int day, int hour, int minute, int second, int nanosecond) {
        try {
            return LocalDateTime.of(year, month, day, hour, minute, second, nanosecond);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date/time values: " + e.getMessage());
        }
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` thrown by `LocalDateTime.of()`. If an exception is caught, it throws a new `DateTimeException` with a more informative error message.

You can call this method in the same way as before, and it will throw an exception if any of the values are invalid:

```java
LocalDateTime dateTime = DateTimeUtils.getLocalDateTime(2021, 2, 29, 23, 59, 59, 999999999); // throws DateTimeException: Invalid date/time values: Invalid date 'February 29' as '2021' is not a leap year
```
------------------------------------------------------
