
You're right, it's important to handle any potential `IOException` that may occur when calling `available()` on the `InputStream`. Here's the updated code snippet that checks for an `IOException` and throws it if one occurs:

```java
public int availableWithoutBlocking(InputStream inputStream) throws IOException {
    // Get the number of bytes that can be read without blocking
    int available;
    try {
        available = inputStream.available();
    } catch (IOException e) {
        // An I/O error occurred, so throw the exception
        throw e;
    }

    // If the available bytes is greater than 0, return it
    if (available > 0) {
        return available;
    }

    // If the available bytes is 0, try to read a single byte without blocking
    // If the read returns -1, the end of the stream has been reached
    // Otherwise, return 1 (since we were able to read a byte without blocking)
    try {
        int read = inputStream.read();
        if (read == -1) {
            return 0;
        } else {
            return 1;
        }
    } catch (IOException e) {
        // An I/O error occurred, so throw the exception
        throw e;
    }
}
```

Now, if an `IOException` occurs when calling `available()`, it will be caught and re-thrown.
------------------------------------------------------
