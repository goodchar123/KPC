List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.rmi.RemoteException`
2. `java.rmi.registry.LocateRegistry.createRegistry(int)`
3. `java.rmi.registry.Registry.rebind(String, Remote)`
4. `java.rmi.server.UnicastRemoteObject.UnicastRemoteObject()`
5. `java.rmi.server.UnicastRemoteObject.exportObject(Remote, int)`

 + From response, we get: ['java.rmi.RemoteException', 'java.rmi.registry.LocateRegistry.createRegistry(int)', 'java.rmi.registry.Registry.rebind(String,Remote)', 'java.rmi.server.UnicastRemoteObject.UnicastRemoteObject()', 'java.rmi.server.UnicastRemoteObject.exportObject(Remote,int)']
------------------------------------------------------
Is the RemoteException handled or caught for java.rmi.registry.LocateRegistry.createRegistry(int) in the code snippet? Answer in Yes or No only.
No. The `RemoteException` is not handled or caught for `java.rmi.registry.LocateRegistry.createRegistry(int)` in the code snippet. It is only caught and printed in the `main` method for the `ServerImpl` class.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.rmi.registry.LocateRegistry.createRegistry(int port)`
2. `java.rmi.registry.Registry.rebind(String name, Remote obj)`
3. `java.rmi.RemoteException`
4. `java.rmi.server.ExportException`
5. `java.lang.System.err.println(String x)`
6. `java.lang.Exception.printStackTrace()`

 + From response, we get: ['java.rmi.registry.LocateRegistry.createRegistry(intport)', 'java.rmi.registry.Registry.rebind(Stringname,Remoteobj)', 'java.rmi.RemoteException', 'java.rmi.server.ExportException', 'java.lang.System.err.println(Stringx)', 'java.lang.Exception.printStackTrace()']
------------------------------------------------------
