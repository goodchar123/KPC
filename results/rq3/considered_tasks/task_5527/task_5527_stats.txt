{"loop_id": 0, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 1, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 2, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 3, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 4, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 5, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 6, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 7, "unhandled_api_list": ["java.util.logging.Logger.removeHandler(java.util.logging.Handler)", "java.util.logging.Logger.addHandler(java.util.logging.Handler)", "java.util.logging.Logger.setLevel(java.util.logging.Level)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.removeHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.addHandler(java.util.logging.Handler) in the code snippet you provided, otherwise throw SecurityException.", "Please check if a security manager exists,          this logger is not anonymous, and the caller          does not have LoggingPermission(\"control\"). for java.util.logging.Logger.setLevel(java.util.logging.Level) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 3}
{"loop_id": 8, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
