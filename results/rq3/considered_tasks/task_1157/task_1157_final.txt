
Sure, here's the updated code that checks for invalid regular expression syntax and throws a `PatternSyntaxException` if necessary:

```java
import java.util.regex.PatternSyntaxException;

public static String removeFieldFromDescriptor(String descriptor, String fieldName) throws PatternSyntaxException {
    // Check for invalid regular expression syntax
    try {
        fieldName = Pattern.quote(fieldName);
    } catch (IllegalArgumentException e) {
        throw new PatternSyntaxException("Invalid regular expression syntax", fieldName, -1);
    }

    // Split the descriptor into its component parts
    String[] parts = descriptor.split(";");

    // Loop through the parts and remove the one that matches the field name
    for (int i = 0; i < parts.length; i++) {
        if (parts[i].startsWith(fieldName)) {
            parts[i] = "";
            break;
        }
    }

    // Rebuild the descriptor without the removed field
    StringBuilder builder = new StringBuilder();
    for (String part : parts) {
        if (!part.isEmpty()) {
            builder.append(part).append(";");
        }
    }
    return builder.toString();
}
```

This updated code uses the `Pattern.quote()` method to escape any special characters in the `fieldName` parameter, which prevents them from being interpreted as regular expression syntax. If the `Pattern.quote()` method throws an `IllegalArgumentException`, it means that the `fieldName` parameter contains invalid regular expression syntax, so the method throws a `PatternSyntaxException` with an appropriate error message.
------------------------------------------------------
