
Sure, here's an updated version of the code snippet that includes the requested error handling:

```java
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DateTimeFormatterExample {
    public static void main(String[] args) {
        try {
            LocalDateTime dateTime = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("invalid pattern");

            String formattedDateTime = dateTime.format(formatter);
            System.out.println("Formatted date-time: " + formattedDateTime);
        } catch (IllegalArgumentException e) {
            System.out.println("Invalid pattern: " + e.getMessage());
        } catch (DateTimeException e) {
            System.out.println("Error formatting date-time: " + e.getMessage());
        }
    }
}
```

In this updated example, we first create a `LocalDateTime` object representing the current date and time. We then create a `DateTimeFormatter` object with an invalid format pattern, which will throw an `IllegalArgumentException`. We catch this exception and print an error message indicating that the pattern is invalid.

We also catch a `DateTimeException` that may occur if there is an error during the formatting process. We print an error message indicating that there was an error formatting the date-time.

Note that in this example, we intentionally use an invalid pattern to demonstrate the error handling. In practice, you would want to use a valid pattern for your specific use case.
------------------------------------------------------
