
Sure, here's an updated version of the method that checks if the scale overflows and throws an ArithmeticException if it does:

```
public static BigDecimal moveDecimalRight(BigDecimal num, int n) {
    int newScale = num.scale() - n;
    if (newScale < 0) {
        throw new ArithmeticException("Scale overflow");
    }
    return num.movePointRight(n);
}
```

This updated method first calculates the new scale of the BigDecimal after moving the decimal point n places to the right. If the new scale is negative, it means that the scale has overflowed and an ArithmeticException is thrown. Otherwise, the method returns the new BigDecimal with the decimal point moved to the right.
------------------------------------------------------
