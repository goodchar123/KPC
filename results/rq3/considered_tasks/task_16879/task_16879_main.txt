Please write a java method that Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right.
Here's a Java method that takes a BigDecimal and an integer n as input and returns a new BigDecimal with the decimal point moved n places to the right:

```
public static BigDecimal moveDecimalRight(BigDecimal num, int n) {
    return num.movePointRight(n);
}
```

This method uses the `movePointRight` method of the BigDecimal class to move the decimal point n places to the right. The method returns a new BigDecimal object with the decimal point moved to the right.
------------------------------------------------------
Please check if scale overflows. for java.math.BigDecimal.movePointRight(int) in the code snippet you provided, otherwise throw ArithmeticException.
Sure, here's an updated version of the method that checks if the scale overflows and throws an ArithmeticException if it does:

```
public static BigDecimal moveDecimalRight(BigDecimal num, int n) {
    int newScale = num.scale() - n;
    if (newScale < 0) {
        throw new ArithmeticException("Scale overflow");
    }
    return num.movePointRight(n);
}
```

This updated method first calculates the new scale of the BigDecimal after moving the decimal point n places to the right. If the new scale is negative, it means that the scale has overflowed and an ArithmeticException is thrown. Otherwise, the method returns the new BigDecimal with the decimal point moved to the right.
------------------------------------------------------
