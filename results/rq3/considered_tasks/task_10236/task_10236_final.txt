
Sure, here's an updated version of the `readInt` method that checks if the input stream reaches the end before reading four bytes and throws an `EOFException` if it does:

```java
import java.io.*;

public class ReadIntFromFile {
    public static int readInt(String filename) throws IOException {
        try (DataInputStream dis = new DataInputStream(new FileInputStream(filename))) {
            if (dis.available() < 4) {
                throw new EOFException();
            }
            return dis.readInt();
        }
    }
}
```

This updated method first checks if the input stream has at least four bytes available to read using the `available()` method of the `DataInputStream`. If there are less than four bytes available, it throws an `EOFException`. Otherwise, it reads the signed 32-bit integer using the `readInt()` method and returns it. The `try-with-resources` statement ensures that the `DataInputStream` is closed after the integer is read. If an `IOException` occurs while reading the file, it is thrown to the calling method.
------------------------------------------------------
