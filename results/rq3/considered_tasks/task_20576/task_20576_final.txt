
You're right, it's important to handle potential exceptions when calling `wasNull()` on a `ResultSet`. Here's an updated version of the method that includes error handling:

```java
public boolean wasNull() throws SQLException {
    if (resultSet == null) {
        throw new SQLException("Result set is closed");
    }
    try {
        return resultSet.wasNull();
    } catch (SQLException e) {
        throw new SQLException("Database access error", e);
    }
}
```

This updated method first checks if the `ResultSet` object is null or closed, and throws a `SQLException` if it is. Then, it calls `wasNull()` on the `ResultSet` and catches any `SQLException` that may occur, rethrowing it with a more informative error message.
------------------------------------------------------
