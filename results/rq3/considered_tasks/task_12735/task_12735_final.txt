
Sure, here's an updated version of the `addTime` method that includes the requested error checking:

```java
public static Temporal addTime(Temporal temporal, long amount, ChronoUnit unit) {
    try {
        return temporal.plus(amount, unit);
    } catch (DateTimeException e) {
        System.err.println("Error: Unit cannot be added for this temporal object.");
        throw e;
    } catch (UnsupportedTemporalTypeException e) {
        System.err.println("Error: Unit is not supported for this temporal object.");
        throw e;
    } catch (ArithmeticException e) {
        System.err.println("Error: Numeric overflow occurred while adding time.");
        throw e;
    }
}
```

This updated method includes a try-catch block that catches any `DateTimeException`, `UnsupportedTemporalTypeException`, or `ArithmeticException` that may be thrown by the `plus` method. If any of these exceptions are caught, an error message is printed to the console and the exception is re-thrown.

Here's an example usage of the updated method:

```java
LocalDateTime dateTime = LocalDateTime.now();
LocalDateTime newDateTime = (LocalDateTime) addTime(dateTime, Long.MAX_VALUE, ChronoUnit.SECONDS);
System.out.println("Original date/time: " + dateTime);
System.out.println("New date/time: " + newDateTime);
```

In this example, we're trying to add the maximum possible number of seconds to the current date/time. This will result in a `DateTimeException` being thrown due to numeric overflow, and the error message "Error: Numeric overflow occurred while adding time." will be printed to the console.
------------------------------------------------------
