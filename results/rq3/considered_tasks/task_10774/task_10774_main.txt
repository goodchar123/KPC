Please write a java method that Adds an attribute to a subrange of the string.
Here's a Java method that adds an attribute to a subrange of a string:

```java
public static String addAttributeToString(String originalString, int startIndex, int endIndex, String attribute) {
    String start = originalString.substring(0, startIndex);
    String middle = "<" + attribute + ">" + originalString.substring(startIndex, endIndex) + "</" + attribute + ">";
    String end = originalString.substring(endIndex);
    return start + middle + end;
}
```

This method takes in the original string, the start and end indices of the subrange, and the attribute to add. It then creates three substrings: the part of the original string before the subrange, the subrange with the attribute added, and the part of the original string after the subrange. It concatenates these three substrings together and returns the resulting string with the attribute added to the subrange.
------------------------------------------------------
Please check if the             beginIndex is negative, or             endIndex is larger than the length of             this String object, or             beginIndex is larger than             endIndex. for java.lang.String.substring(int,int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
Sure, here's the updated code snippet that checks for the conditions you mentioned and throws an `IndexOutOfBoundsException` if any of them are true:

```java
public static String addAttributeToString(String originalString, int startIndex, int endIndex, String attribute) {
    if (startIndex < 0 || endIndex > originalString.length() || startIndex > endIndex) {
        throw new IndexOutOfBoundsException();
    }
    String start = originalString.substring(0, startIndex);
    String middle = "<" + attribute + ">" + originalString.substring(startIndex, endIndex) + "</" + attribute + ">";
    String end = originalString.substring(endIndex);
    return start + middle + end;
}
```

Now, before performing any substring operations, the method checks if `startIndex` is negative, or `endIndex` is larger than the length of `originalString`, or `startIndex` is larger than `endIndex`. If any of these conditions are true, it throws an `IndexOutOfBoundsException`.
------------------------------------------------------
