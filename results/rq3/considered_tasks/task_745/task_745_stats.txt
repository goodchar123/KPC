{"loop_id": 0, "unhandled_api_list": ["java.lang.ClassLoader.getSystemClassLoader()", "java.lang.ClassLoader.getSystemClassLoader()", "java.lang.ClassLoader.getSystemClassLoader()", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check If a security manager is present, and the caller's class loader          is not null and is not the same as or an ancestor of the          system class loader, and the caller does not have the          RuntimePermission(\"getClassLoader\") for java.lang.ClassLoader.getSystemClassLoader() in the code snippet you provided, otherwise throw SecurityException.", "Please check If invoked recursively during the construction of the class          loader specified by the \"java.system.class.loader\"          property. for java.lang.ClassLoader.getSystemClassLoader() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check If the system property \"java.system.class.loader\"          is defined but the named class could not be loaded, the          provider class does not define the required constructor, or an          exception is thrown by that constructor when it is invoked. The          underlying cause of the error can be retrieved via the          Throwable.getCause() method. for java.lang.ClassLoader.getSystemClassLoader() in the code snippet you provided, otherwise throw Error.", "Please check if the method is an              instance method and the specified object argument              is not an instance of the class or interface              declaring the underlying method (or of a subclass              or implementor thereof); if the number of actual              and formal parameters differ; if an unwrapping              conversion for primitive arguments fails; or if,              after possible unwrapping, a parameter value              cannot be converted to the corresponding formal              parameter type by a method invocation conversion. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if the specified object is null              and the method is an instance method. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the initialization provoked by this method fails. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw ExceptionInInitializerError."], "num_of_unhandled_exception": 6}
{"loop_id": 1, "unhandled_api_list": ["java.lang.Thread.getContextClassLoader()", "java.lang.ClassLoader.getSystemClassLoader()", "java.lang.ClassLoader.getSystemClassLoader()", "java.lang.ClassLoader.getSystemClassLoader()", "java.lang.ClassLoader.getParent()", "java.lang.Class.forName(java.lang.String)", "java.lang.Class.forName(java.lang.String)", "java.lang.reflect.Method.setAccessible(boolean)", "java.lang.reflect.Method.setAccessible(boolean)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)"], "num_of_unhandled_api": 11, "unhandled_exception_list": ["Please check if a security manager is present, and the caller's class loader          is not null and is not the same as or an ancestor of the          context class loader, and the caller does not have the          RuntimePermission(\"getClassLoader\") for java.lang.Thread.getContextClassLoader() in the code snippet you provided, otherwise throw SecurityException.", "Please check If a security manager is present, and the caller's class loader          is not null and is not the same as or an ancestor of the          system class loader, and the caller does not have the          RuntimePermission(\"getClassLoader\") for java.lang.ClassLoader.getSystemClassLoader() in the code snippet you provided, otherwise throw SecurityException.", "Please check If invoked recursively during the construction of the class          loader specified by the \"java.system.class.loader\"          property. for java.lang.ClassLoader.getSystemClassLoader() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check If the system property \"java.system.class.loader\"          is defined but the named class could not be loaded, the          provider class does not define the required constructor, or an          exception is thrown by that constructor when it is invoked. The          underlying cause of the error can be retrieved via the          Throwable.getCause() method. for java.lang.ClassLoader.getSystemClassLoader() in the code snippet you provided, otherwise throw Error.", "Please check If a security manager is present, and the caller's class loader          is not null and is not an ancestor of this class loader,          and the caller does not have the          RuntimePermission(\"getClassLoader\") for java.lang.ClassLoader.getParent() in the code snippet you provided, otherwise throw SecurityException.", "Please check if the linkage fails for java.lang.Class.forName(java.lang.String) in the code snippet you provided, otherwise throw LinkageError.", "Please check if the initialization provoked            by this method fails for java.lang.Class.forName(java.lang.String) in the code snippet you provided, otherwise throw ExceptionInInitializerError.", "Please check if access cannot be enabled for java.lang.reflect.Method.setAccessible(boolean) in the code snippet you provided, otherwise throw InaccessibleObjectException.", "Please check if the request is denied by the security manager for java.lang.reflect.Method.setAccessible(boolean) in the code snippet you provided, otherwise throw SecurityException.", "Please check if the specified object is null              and the method is an instance method. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the initialization provoked by this method fails. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw ExceptionInInitializerError."], "num_of_unhandled_exception": 11}
{"loop_id": 2, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
