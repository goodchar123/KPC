
Sure, here's the updated Java method that checks for `InstanceNotFoundException` and `ListenerNotFoundException`:

```java
import javax.management.*;

public void disableNotifications(ObjectName objectName, NotificationListener listener, NotificationFilter filter, Object handback, MBeanServer mbeanServer) throws InstanceNotFoundException, ListenerNotFoundException {
    boolean isListenerRegistered = mbeanServer.isRegistered(objectName) && mbeanServer.getNotificationListeners(objectName, filter).contains(listener);
    if (!isListenerRegistered) {
        throw new ListenerNotFoundException("The listener is not registered in the MBean, or it is not registered with the given filter and handback.");
    }
    mbeanServer.removeNotificationListener(objectName, listener, filter, handback);
    boolean isMBeanRegistered = mbeanServer.isRegistered(objectName);
    if (!isMBeanRegistered) {
        throw new InstanceNotFoundException("The MBean name provided does not match any of the registered MBeans.");
    }
}
```

This method takes in an ObjectName, NotificationListener, NotificationFilter, Object, and MBeanServer as parameters. It first checks if the listener is registered with the given filter and handback for the given ObjectName using the `isRegistered()` and `getNotificationListeners()` methods of the MBeanServer. If the listener is not registered, it throws a `ListenerNotFoundException`. If the listener is registered, it removes the notification listener for the given ObjectName using the `removeNotificationListener()` method of the MBeanServer. It then checks if the MBean is still registered using the `isRegistered()` method of the MBeanServer. If the MBean is not registered, it throws an `InstanceNotFoundException`.
------------------------------------------------------
