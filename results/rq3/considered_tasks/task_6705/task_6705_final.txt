
Here's an updated version of the Java method that checks for exceptions when subtracting a `TemporalAmount` from a `LocalDateTime`:

```java
import java.time.LocalDateTime;
import java.time.temporal.TemporalAmount;
import java.time.DateTimeException;

public class DateTimeSubtraction {
    public static LocalDateTime subtractFromDateTime(LocalDateTime dateTime, TemporalAmount amount) {
        try {
            return dateTime.minus(amount);
        } catch (DateTimeException e) {
            throw new DateTimeException("Subtraction cannot be made", e);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow occurred during subtraction");
        }
    }
}
```

This updated method uses a try-catch block to catch any `DateTimeException` or `ArithmeticException` that may occur when subtracting the specified amount from the given date-time. If a `DateTimeException` is caught, a new `DateTimeException` is thrown with a custom error message and the original exception as the cause. If an `ArithmeticException` is caught, a new `ArithmeticException` is thrown with a custom error message.
------------------------------------------------------
