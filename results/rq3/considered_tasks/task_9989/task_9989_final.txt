
Here is the updated Java method that checks if any objects have been serialized before calling `useProtocolVersion` and also checks if an invalid version is passed in:

```java
public void setStreamProtocolVersion(OutputStream outputStream, int version) throws IOException {
    if (outputStream instanceof ObjectOutputStream) {
        ObjectOutputStream objectOutputStream = (ObjectOutputStream) outputStream;
        if (objectOutputStream.size() > 0) {
            throw new IllegalStateException("Cannot set protocol version after objects have been serialized");
        }
        if (version != ObjectStreamConstants.PROTOCOL_VERSION_1 && version != ObjectStreamConstants.PROTOCOL_VERSION_2) {
            throw new IllegalArgumentException("Invalid protocol version: " + version);
        }
        objectOutputStream.useProtocolVersion(version);
    } else {
        throw new IllegalArgumentException("Output stream is not an instance of ObjectOutputStream");
    }
}
```

This updated method first checks if any objects have been serialized by calling the `size` method on the `ObjectOutputStream` object. If the size is greater than 0, it throws an `IllegalStateException` indicating that the protocol version cannot be set after objects have been serialized.

Next, it checks if the version passed in is valid. The `ObjectOutputStream` class defines two protocol versions: `PROTOCOL_VERSION_1` and `PROTOCOL_VERSION_2`. If the version passed in is not one of these two values, it throws an `IllegalArgumentException`.

Finally, if the `OutputStream` is an instance of `ObjectOutputStream`, it calls the `useProtocolVersion` method on it, passing in the `version` parameter.

You can call this updated method with an `OutputStream` object and the desired protocol version to use when writing the stream.
------------------------------------------------------
