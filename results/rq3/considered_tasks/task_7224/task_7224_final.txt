
Sure, here's the updated Java method that checks for the presence of a security manager and the caller's class loader for all three cases:

```java
public ClassLoader getClassLoader(Class<?> clazz) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new RuntimePermission("getClassLoader"));
    }
    ClassLoader callerClassLoader = getClass().getClassLoader();
    ClassLoader requestedClassLoader = clazz.getClassLoader();
    if (callerClassLoader != null && !callerClassLoader.equals(requestedClassLoader) && !isAncestor(callerClassLoader, requestedClassLoader)) {
        throw new SecurityException("Caller's class loader is not the same as or an ancestor of the requested class loader");
    }
    return requestedClassLoader;
}

public ClassLoader getContextClassLoader() throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new RuntimePermission("getClassLoader"));
    }
    ClassLoader callerClassLoader = getClass().getClassLoader();
    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
    if (callerClassLoader != null && !caller
------------------------------------------------------
