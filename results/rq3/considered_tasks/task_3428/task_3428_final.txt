
Here's an updated implementation that checks for the various `DOMException` conditions you mentioned:

```java
public void reparentRange(Node newNode, Range range) throws DOMException {
    Node startNode = range.getStartContainer();
    Node parent = startNode.getParentNode();
    int startIndex = getNodeIndex(startNode);
    if (newNode.getNodeType() == Node.DOCUMENT_NODE) {
        throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Cannot append a Document node");
    }
    if (newNode == parent || isAncestor(newNode, parent)) {
        throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Cannot append an ancestor node");
    }
    if (newNode.getOwnerDocument() != parent.getOwnerDocument()) {
        throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, "Cannot append a node from a different document");
    }
    if (!parent.isSameNode(range.getEndContainer().getParentNode())) {
        throw new DOMException(DOMException.NOT_FOUND_ERR, "End container is not a child of the same parent node");
    }
    if (parent.isReadOnly() || newNode.isReadOnly()) {
        throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, "Cannot modify a read-only node");
    }
    parent.insertBefore(newNode, startNode);
    while (startIndex <= getNodeIndex(range.getEndContainer())) {
        Node node = parent.getChildNodes().item(startIndex);
        if (newNode == node || isAncestor(newNode, node)) {
            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Cannot append an ancestor node");
        }
        if (newNode.getOwnerDocument() != node.getOwnerDocument()) {
            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, "Cannot append a node from a different document");
        }
        if (newNode.getNodeType() == Node.DOCUMENT_TYPE_NODE && parent instanceof Document) {
            Document doc = (Document) parent;
            if (doc.getDoctype() != null) {
                throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Cannot append a second DocumentType node");
            }
        }
        if (node.isSameNode(range.getEndContainer())) {
            range.setEnd(newNode, newNode.getChildNodes().getLength());
        }
        newNode.appendChild(node);
    }
    range.setStart(newNode, 0);
}

private int getNodeIndex(Node node) {
    NodeList siblings = node.getParentNode().getChildNodes();
    for (int i = 0; i < siblings.getLength(); i++) {
        if (siblings.item(i) == node) {
            return i;
        }
    }
    return -1;
}

private boolean isAncestor(Node ancestor, Node node) {
    while (node != null) {
        if (node.isSameNode(ancestor)) {
            return true;
        }
        node = node.getParentNode();
    }
    return false;
}
```

This implementation adds several checks to ensure that the reparenting operation is valid according to the `DOMException` conditions you mentioned. Specifically:

- If the `newNode` is a `DOCUMENT_NODE`, a `HIERARCHY_REQUEST_ERR` is thrown.
- If the `newNode` is the same as the `parent` or an ancestor of the `parent`, a `HIERARCHY_REQUEST_ERR` is thrown.
- If the `newNode` was created by a different document than the `parent`, a `WRONG_DOCUMENT_ERR` is thrown.
- If the end container of the `range` is not a child of the same parent node as the `startNode`, a `NOT_FOUND_ERR` is thrown.
- If either the `parent` or the `newNode` is read-only, a `NO_MODIFICATION_ALLOWED_ERR` is thrown.
- If any of the child nodes being appended is the same as the `newNode` or an ancestor of the `newNode`, a `HIERARCHY_REQUEST_ERR` is thrown.
- If any of the child nodes being appended was created by a different document than the `newNode`, a `WRONG_DOCUMENT_ERR` is thrown.
- If the `newNode` is a `DOCUMENT_TYPE_NODE` and the `parent` is a `Document` that already has a `DOCTYPE` node, a `HIERARCHY_REQUEST_ERR` is thrown.

Note that this implementation assumes that the `Range` object is valid and that the start and end nodes are within the same parent node. It also assumes that the `newNode` is not already a descendant of the start node or any of its descendants.
------------------------------------------------------
