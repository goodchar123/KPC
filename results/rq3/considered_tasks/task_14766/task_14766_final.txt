
Here's the updated code snippet that includes all the necessary checks:

```java
public static void copyVectorToArray(Vector<Integer> vector, int[] array) {
    if (vector == null || array == null) {
        throw new NullPointerException("Vector or array is null");
    }
    if (vector.size() != array.length) {
        throw new IndexOutOfBoundsException("Vector and array have different lengths");
    }
    for (int i = 0; i < vector.size(); i++) {
        if (i < 0 || i >= vector.size()) {
            throw new ArrayIndexOutOfBoundsException("Index out of range: " + i);
        }
        try {
            array[i] = vector.get(i);
        } catch (ArrayStoreException e) {
            throw new ArrayStoreException("Type mismatch between vector and array");
        }
    }
}
```

This updated method includes the following checks:

- `NullPointerException`: checks if either the vector or array is null.
- `IndexOutOfBoundsException`: checks if the vector and array have different lengths.
- `ArrayIndexOutOfBoundsException`: checks if the index `i` is out of range before calling `vector.get(i)`.
- `ArrayStoreException`: checks if an element in the vector cannot be stored into the corresponding index of the array due to a type mismatch.

If any of these checks fail, the method throws the corresponding exception with a message indicating the cause of the exception.
------------------------------------------------------
