
You're right, I missed that part in my previous answer. Here's an updated version of the Java method that checks if any of the listeners veto the property update and throws a `PropertyVetoException` if necessary:

```java
public void fireVetoableChange(String propertyName, Object oldValue, Object newValue) throws PropertyVetoException {
    VetoableChangeSupport support = getVetoableChangeSupport();
    if (support != null) {
        PropertyChangeEvent event = new PropertyChangeEvent(this, propertyName, oldValue, newValue);
        try {
            support.fireVetoableChange(event);
        } catch (PropertyVetoException e) {
            // If any listener vetoes the property change, re-throw the exception
            throw e;
        }
    }
}
```

This updated method creates a new `PropertyChangeEvent` object with the same parameters as before, and then calls the `fireVetoableChange` method of the `VetoableChangeSupport` object with this event object.

If any of the registered listeners veto the property update, a `PropertyVetoException` will be thrown by the `fireVetoableChange` method. In this case, the updated method catches the exception and re-throws it to the caller of the method.
------------------------------------------------------
