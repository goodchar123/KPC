List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.sql.DriverManager.getConnection(String url, String user, String password)`
2. `java.sql.SerialArray.getArray()`
3. `java.sql.Connection.prepareStatement(String sql)`
4. `java.sql.PreparedStatement.setArray(int parameterIndex, java.sql.Array x)`
5. `java.sql.PreparedStatement.executeQuery()`

 + From response, we get: ['java.sql.DriverManager.getConnection(Stringurl,Stringuser,Stringpassword)', 'java.sql.SerialArray.getArray()', 'java.sql.Connection.prepareStatement(Stringsql)', 'java.sql.PreparedStatement.setArray(intparameterIndex,java.sql.Arrayx)', 'java.sql.PreparedStatement.executeQuery()']
------------------------------------------------------
Is the SQLException handled or caught for java.sql.PreparedStatement.executeQuery() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the SQLTimeoutException handled or caught for java.sql.PreparedStatement.executeQuery() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.sql.DriverManager.getConnection(String url, String user, String password)
2. java.sql.Array.getArray()
3. java.sql.PreparedStatement.setArray(int parameterIndex, java.sql.Array x)
4. java.sql.PreparedStatement.executeQuery()
5. java.sql.ResultSet.close()
6. java.sql.PreparedStatement.close()
7. java.sql.Connection.close()
8. java.sql.SQLException (constructor)
9. java.sql.SQLTimeoutException (constructor)

 + From response, we get: []
------------------------------------------------------
