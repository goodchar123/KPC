
Sure, here's an updated version of the `checkCertificate` method that checks if the certificate has expired or is not yet valid, and throws the appropriate exception:

```java
import java.security.cert.CertificateExpiredException;
import java.security.cert.CertificateNotYetValidException;
import java.security.cert.X509Certificate;

public class CertificateChecker {
    
    public static void checkCertificate(X509Certificate cert) throws CertificateExpiredException, CertificateNotYetValidException {
        try {
            cert.checkValidity(); // check if the certificate is currently valid
        } catch (CertificateExpiredException e) {
            throw new CertificateExpiredException("Certificate has expired");
        } catch (CertificateNotYetValidException e) {
            throw new CertificateNotYetValidException("Certificate is not yet valid");
        }
        cert.verify(cert.getPublicKey()); // verify the certificate's signature using its public key
    }
}
```

This updated method first calls `cert.checkValidity()` to check if the certificate is currently valid. If this check fails due to the certificate being expired or not yet valid, it throws the appropriate exception (`CertificateExpiredException` or `CertificateNotYetValidException`). Otherwise, it proceeds to verify the certificate's signature using its public key.
------------------------------------------------------
