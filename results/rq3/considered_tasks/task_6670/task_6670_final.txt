
You're right, it's important to check if the result of `Instant.atOffset(ZoneOffset)` exceeds the supported range for `Instant` and throw a `DateTimeException` if it does. Here's the updated Java method that includes this check:

```java
public static OffsetDateTime withSameInstant(OffsetDateTime offsetDateTime, ZoneOffset offset) {
    Instant instant = offsetDateTime.toInstant(); // Get the instant of the given OffsetDateTime
    OffsetDateTime newOffsetDateTime = instant.atOffset(offset); // Get a new OffsetDateTime with the specified offset and the same instant
    Instant newInstant = newOffsetDateTime.toInstant(); // Get the instant of the new OffsetDateTime
    if (!newInstant.equals(instant)) { // Check if the new instant is different from the original instant
        throw new DateTimeException("Result exceeds the supported range for Instant.atOffset(ZoneOffset)");
    }
    return newOffsetDateTime; // Return the new OffsetDateTime
}
```

This updated method first gets a new `OffsetDateTime` with the specified offset and the same instant as the original `OffsetDateTime`. It then gets the instant of the new `OffsetDateTime` and checks if it's different from the original instant. If it is, it throws a `DateTimeException` with an appropriate message. If the new instant is the same as the original instant, it returns the new `OffsetDateTime`.
------------------------------------------------------
