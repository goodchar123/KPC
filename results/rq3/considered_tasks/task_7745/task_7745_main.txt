Please write a java method that Returns the number of Unicode code points in the specified text range of this sequence.
Here's the Java method that returns the number of Unicode code points in the specified text range of a given sequence:

```java
public static int countCodePoints(CharSequence seq, int start, int end) {
    int count = 0;
    for (int i = start; i < end; ) {
        int codePoint = Character.codePointAt(seq, i);
        count++;
        i += Character.charCount(codePoint);
    }
    return count;
}
```

This method takes three parameters: the `CharSequence` to count the code points in, the starting index of the text range, and the ending index of the text range. It uses a `for` loop to iterate over the text range, calling `Character.codePointAt()` to get the code point at each index and incrementing the count. It also uses `Character.charCount()` to determine the number of `char` values needed to represent the code point, so that it can increment the index by the correct amount. Finally, it returns the count of code points.
------------------------------------------------------
Please check if seq is null. for java.lang.Character.codePointAt(java.lang.CharSequence,int) in the code snippet you provided, otherwise throw NullPointerException.
Please check if the value index is negative or not less than seq.length(). for java.lang.Character.codePointAt(java.lang.CharSequence,int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
You're right, it's important to add null and index bounds checks to the code. Here's the updated Java method that includes these checks:

```java
public static int countCodePoints(CharSequence seq, int start, int end) {
    if (seq == null) {
        throw new NullPointerException("CharSequence cannot be null");
    }
    if (start < 0 || end > seq.length() || start > end) {
        throw new IndexOutOfBoundsException("Invalid text range");
    }
    int count = 0;
    for (int i = start; i < end; ) {
        int codePoint = Character.codePointAt(seq, i);
        count++;
        i += Character.charCount(codePoint);
    }
    return count;
}
```

This updated method first checks if the `CharSequence` is null, and throws a `NullPointerException` if it is. It also checks if the start and end indices are within the bounds of the `CharSequence`, and throws an `IndexOutOfBoundsException` if they are not. 

If the checks pass, the method proceeds to count the number of Unicode code points in the specified text range using the same logic as before.
------------------------------------------------------
