
Sure, here's the updated code snippet that checks for both `NoSuchElementException` and `PatternSyntaxException`:

```java
public List<Event> restrictEventsByClassName(List<Event> events, String regex) throws PatternSyntaxException, NoSuchElementException {
    List<Event> filteredEvents = new ArrayList<>();
    Pattern pattern = null;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw e;
    }

    Iterator<Event> iterator = events.iterator();
    while (iterator.hasNext()) {
        Event event = null;
        try {
            event = iterator.next();
        } catch (NoSuchElementException e) {
            throw e;
        }
        String className = event.getMethod().getDeclaringClass().getName();
        if (pattern.matcher(className).matches()) {
            filteredEvents.add(event);
        }
    }

    return filteredEvents;
}
```

In this updated code, we have added a `try-catch` block to handle `PatternSyntaxException` that may occur while compiling the regular expression. If the regular expression is invalid, it will throw a `PatternSyntaxException`.

We have also added a `try-catch` block to handle `NoSuchElementException` that may occur while iterating through the list of events. If there are no more elements in the iterator, it will throw a `NoSuchElementException`.
------------------------------------------------------
