
Here's an updated version of the code snippet that includes the requested checks and exceptions:

```java
public void addElementToList(List<Element> list, Element element, int index) {
    if (!list.add(element)) {
        throw new UnsupportedOperationException("Add operation not supported by this list");
    }
    if (element == null && !list.contains(null)) {
        throw new NullPointerException("This list does not permit null elements");
    }
    if (somePropertyPreventsAdding(element)) {
        throw new IllegalArgumentException("Some property of this element prevents it from being added to this list");
    }
    if (index < 0 || index >= list.size()) {
        throw new IndexOutOfBoundsException("Index is out of range");
    }
    list.add(index, element);
}
```

This method takes a list of `Element` objects, an `Element` to add to the list, and an index at which to add the element. The method first attempts to add the element to the list using the `add()` method. If the add operation is not supported by the list, it throws an `UnsupportedOperationException`. 

Next, the method checks if the element is null and if the list does not permit null elements. If this is the case, it throws a `NullPointerException`. 

Then, the method checks if some property of the element prevents it from being added to the list. If this is the case, it throws an `IllegalArgumentException`.

Finally, the method checks if the index is out of range (less than 0 or greater than or equal to the size of the list). If this is the case, it throws an `IndexOutOfBoundsException`. 

If all checks pass, the method adds the element to the list at the specified index using the `add(int index, E element)` method.
------------------------------------------------------
