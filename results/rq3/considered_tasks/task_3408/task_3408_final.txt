
Sure, here's an updated version of the code snippet that includes the requested error checking:

```
public static int parseInteger(String str) throws NumberFormatException {
    if (str == null || str.isEmpty()) {
        throw new NumberFormatException("String is null or empty");
    }
    try {
        return Integer.parseInt(str);
    } catch (NumberFormatException e) {
        throw new NumberFormatException("String does not contain a parsable integer");
    }
}

public static int parseInteger(String str, int radix) throws NumberFormatException {
    if (str == null || str.isEmpty()) {
        throw new NumberFormatException("String is null or empty");
    }
    try {
        return Integer.parseInt(str, radix);
    } catch (NumberFormatException e) {
        throw new NumberFormatException("String does not contain a parsable int");
    }
}

public static int valueOf(String str) throws NumberFormatException {
    if (str == null || str.isEmpty()) {
        throw new NumberFormatException("String is null or empty");
    }
    try {
        return Integer.valueOf(str);
    } catch (NumberFormatException e) {
        throw new NumberFormatException("String cannot be parsed as an integer");
    }
}
```

For each method, we first check if the input string is null or empty, and throw a NumberFormatException if it is. Then, we attempt to parse the string using the corresponding method. If a NumberFormatException is thrown during parsing, we catch it and re-throw a new NumberFormatException with a more specific error message.
------------------------------------------------------
