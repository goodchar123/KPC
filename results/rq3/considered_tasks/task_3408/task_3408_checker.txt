List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.lang.Node`
2. `java.lang.Integer.intValue()`
3. `java.lang.Integer.compareTo(java.lang.Integer)`
4. `java.lang.Integer.valueOf(int)`
5. `java.lang.Integer.valueOf(java.lang.String)`
6. `java.lang.Integer.parseInt(java.lang.String)`
7. `java.lang.Integer.parseInt(java.lang.String, int)`

 + From response, we get: ['java.lang.Node', 'java.lang.Integer.intValue()', 'java.lang.Integer.compareTo(java.lang.Integer)', 'java.lang.Integer.valueOf(int)', 'java.lang.Integer.valueOf(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String,int)']
------------------------------------------------------
Is the NumberFormatException handled or caught for java.lang.Integer.valueOf(java.lang.String) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NumberFormatException handled or caught for java.lang.Integer.parseInt(java.lang.String) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NumberFormatException handled or caught for java.lang.Integer.parseInt(java.lang.String,int) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.lang.Integer.parseInt(String)`
2. `java.lang.Integer.parseInt(String, int)`
3. `java.lang.Integer.valueOf(String)`

 + From response, we get: ['java.lang.Integer.parseInt(String)', 'java.lang.Integer.parseInt(String,int)', 'java.lang.Integer.valueOf(String)']
------------------------------------------------------
