Please write a java method that Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields.
Here's a Java method that obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields:

```java
import java.time.LocalDate;
import java.time.chrono.JapaneseChronology;
import java.time.chrono.JapaneseDate;

public class JapaneseDateConverter {
    public static JapaneseDate getJapaneseDate(int year, int dayOfYear) {
        LocalDate localDate = LocalDate.ofYearDay(year, dayOfYear);
        JapaneseDate japaneseDate = JapaneseDate.from(localDate);
        return japaneseDate;
    }
}
```

This method takes two parameters: `year` and `dayOfYear`, which represent the proleptic-year and day-of-year fields, respectively. It uses the `LocalDate.ofYearDay()` method to create a `LocalDate` object from these fields, and then converts it to a `JapaneseDate` object using the `JapaneseDate.from()` method. Finally, it returns the `JapaneseDate` object.
------------------------------------------------------
Please check if the value of any field is out of range,  or if the day of year is invalid for the year for java.time.LocalDate.ofYearDay(int,int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's the updated code snippet that checks if the value of any field is out of range or if the day of year is invalid for the year, and throws a `DateTimeException` if necessary:

```java
import java.time.LocalDate;
import java.time.chrono.JapaneseChronology;
import java.time.chrono.JapaneseDate;
import java.time.DateTimeException;

public class JapaneseDateConverter {
    public static JapaneseDate getJapaneseDate(int year, int dayOfYear) {
        try {
            LocalDate localDate = LocalDate.ofYearDay(year, dayOfYear);
            JapaneseDate japaneseDate = JapaneseDate.from(localDate);
            return japaneseDate;
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date: " + e.getMessage());
        }
    }
}
```

This updated method uses a try-catch block to catch any `DateTimeException` that may be thrown by the `LocalDate.ofYearDay()` method. If such an exception is caught, it throws a new `DateTimeException` with a custom error message that includes the original exception's message. This way, the caller of the method can be informed of any invalid input values.
------------------------------------------------------
