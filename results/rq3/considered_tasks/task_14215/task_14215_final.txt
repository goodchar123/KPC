
Here's the updated Java method that includes the additional checks you requested:

```java
public static <T> boolean containsElement(Collection<? extends T> collection, T element) {
    if (element == null && !collection.contains(null)) {
        throw new NullPointerException("This collection does not permit null elements");
    }
    try {
        return collection.contains(element);
    } catch (ClassCastException e) {
        throw new ClassCastException("The specified element is incompatible with this collection");
    }
}

public static <T> List<T> asList(T... array) {
    if (array == null) {
        throw new NullPointerException("The specified array is null");
    }
    return Arrays.asList(array);
}
```

In the `containsElement()` method, we first check if the specified element is null and the collection does not permit null elements. If this is the case, we throw a `NullPointerException` with an appropriate message. We then try to call the `contains()` method on the collection and return the result. If the specified element is incompatible with the collection, a `ClassCastException` is thrown with an appropriate message.

In the `asList()` method, we check if the specified array is null. If it is, we throw a `NullPointerException` with an appropriate message. Otherwise, we call `Arrays.asList()` on the array and return the resulting list.

You can call these methods in the same way as before, but now they include additional checks to ensure that the inputs are valid.
------------------------------------------------------
