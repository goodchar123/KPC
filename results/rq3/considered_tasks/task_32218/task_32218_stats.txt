{"loop_id": 0, "unhandled_api_list": ["javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)", "javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)", "javax.imageio.ImageWriteParam.setTilingMode(int)", "javax.imageio.ImageWriteParam.setTilingMode(int)", "javax.imageio.ImageWriteParam.setTiling(int,int,int,int)", "javax.imageio.ImageWriteParam.setTiling(int,int,int,int)", "javax.imageio.ImageWriteParam.setTiling(int,int,int,int)", "javax.imageio.ImageWriteParam.setTiling(int,int,int,int)", "javax.imageio.ImageWriteParam.setTiling(int,int,int,int)", "javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String)", "javax.imageio.metadata.IIOMetadataNode.appendChild(org.w3c.dom.Node)"], "num_of_unhandled_api": 11, "unhandled_exception_list": ["Please check if formatName is null. for javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if bufferedImageType is not one of the standard types, or is equal to TYPE_CUSTOM. for javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if canWriteTiles returns false. for javax.imageio.ImageWriteParam.setTilingMode(int) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if mode is not one of the modes listed above. for javax.imageio.ImageWriteParam.setTilingMode(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if the plug in does not support tiling. for javax.imageio.ImageWriteParam.setTiling(int,int,int,int) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if the tiling mode is not MODE_EXPLICIT. for javax.imageio.ImageWriteParam.setTiling(int,int,int,int) in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if the plug in does not support grid offsets, and the grid offsets are not both zero. for javax.imageio.ImageWriteParam.setTiling(int,int,int,int) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if the tile size is not within one of the allowable ranges returned by getPreferredTileSizes. for javax.imageio.ImageWriteParam.setTiling(int,int,int,int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if tileWidth or tileHeight is less than or equal to 0. for javax.imageio.ImageWriteParam.setTiling(int,int,int,int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if formatName is null or is not one of the names returned by getMetadataFormatNames. for javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if newChild is null. for javax.imageio.metadata.IIOMetadataNode.appendChild(org.w3c.dom.Node) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 11}
{"loop_id": 1, "unhandled_api_list": ["javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)", "javax.imageio.ImageWriteParam.setTilingMode(int)", "javax.imageio.ImageWriteParam.setTilingMode(int)", "javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if bufferedImageType is not one of the standard types, or is equal to TYPE_CUSTOM. for javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if canWriteTiles returns false. for javax.imageio.ImageWriteParam.setTilingMode(int) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if mode is not one of the modes listed above. for javax.imageio.ImageWriteParam.setTilingMode(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if formatName is null or is not one of the names returned by getMetadataFormatNames. for javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 4}
{"loop_id": 2, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
