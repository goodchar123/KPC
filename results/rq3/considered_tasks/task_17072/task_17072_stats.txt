{"loop_id": 0, "unhandled_api_list": ["java.sql.Connection.rollback()", "java.sql.Connection.prepareStatement(java.lang.String)", "java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.next()"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this            Connection object is in auto commit mode for java.sql.Connection.rollback() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.prepareStatement(java.lang.String) in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs; this method is called on a closed  PreparedStatement or the SQL            statement does not return a ResultSet object for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 6}
{"loop_id": 1, "unhandled_api_list": ["java.sql.Connection.getMetaData()", "java.sql.Connection.setSavepoint()", "java.sql.Connection.setSavepoint()", "java.sql.ResultSet.next()", "java.sql.Connection.rollback(java.sql.Savepoint)", "java.sql.Connection.rollback(java.sql.Savepoint)", "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)", "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)"], "num_of_unhandled_api": 8, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection            or this Connection object is currently in            auto commit mode for java.sql.Connection.setSavepoint() in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.setSavepoint() in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection,            the Savepoint object is no longer valid,            or this Connection object is currently in            auto commit mode for java.sql.Connection.rollback(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.rollback(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if a database access error occurs, this  method is called on a closed connection or            the given Savepoint object is not a valid            savepoint in the current transaction for java.sql.Connection.releaseSavepoint(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.releaseSavepoint(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException."], "num_of_unhandled_exception": 8}
{"loop_id": 2, "unhandled_api_list": ["java.sql.Connection.getTransactionIsolation()", "java.sql.Connection.getMetaData()", "java.sql.Connection.setSavepoint()", "java.sql.Connection.setSavepoint()", "java.sql.Connection.rollback(java.sql.Savepoint)", "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)", "java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()"], "num_of_unhandled_api": 8, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getTransactionIsolation() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection            or this Connection object is currently in            auto commit mode for java.sql.Connection.setSavepoint() in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.setSavepoint() in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.rollback(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.releaseSavepoint(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException."], "num_of_unhandled_exception": 8}
{"loop_id": 3, "unhandled_api_list": ["java.sql.Connection.getMetaData()", "java.sql.Connection.setSavepoint()", "java.sql.Connection.rollback(java.sql.Savepoint)", "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)", "java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.next()"], "num_of_unhandled_api": 7, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.setSavepoint() in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.rollback(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.releaseSavepoint(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 7}
{"loop_id": 4, "unhandled_api_list": ["java.sql.Connection.setSavepoint()", "java.sql.Connection.rollback(java.sql.Savepoint)", "java.sql.Connection.rollback(java.sql.Savepoint)", "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)", "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)", "java.sql.Connection.prepareStatement(java.lang.String)", "java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.next()"], "num_of_unhandled_api": 10, "unhandled_exception_list": ["Please check if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection            or this Connection object is currently in            auto commit mode for java.sql.Connection.setSavepoint() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection,            the Savepoint object is no longer valid,            or this Connection object is currently in            auto commit mode for java.sql.Connection.rollback(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.rollback(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if a database access error occurs, this  method is called on a closed connection or            the given Savepoint object is not a valid            savepoint in the current transaction for java.sql.Connection.releaseSavepoint(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.Connection.releaseSavepoint(java.sql.Savepoint) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException.", "Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.prepareStatement(java.lang.String) in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs; this method is called on a closed  PreparedStatement or the SQL            statement does not return a ResultSet object for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 10}
{"loop_id": 5, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
