{"loop_id": 0, "unhandled_api_list": ["java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount)", "java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount)", "java.time.Duration.ofHours(long)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if the subtraction cannot be made for java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount) in the code snippet you provided, otherwise throw DateTimeException.", "Please check if numeric overflow occurs for java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount) in the code snippet you provided, otherwise throw ArithmeticException.", "Please check if the input hours exceeds the capacity of Duration for java.time.Duration.ofHours(long) in the code snippet you provided, otherwise throw ArithmeticException."], "num_of_unhandled_exception": 3}
{"loop_id": 1, "unhandled_api_list": ["java.time.Duration.ofHours(long)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if the input hours exceeds the capacity of Duration for java.time.Duration.ofHours(long) in the code snippet you provided, otherwise throw ArithmeticException."], "num_of_unhandled_exception": 1}
{"loop_id": 2, "unhandled_api_list": ["java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if numeric overflow occurs for java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount) in the code snippet you provided, otherwise throw ArithmeticException."], "num_of_unhandled_exception": 1}
{"loop_id": 3, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
