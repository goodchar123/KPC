
Here is an updated version of the Java method that includes the requested error checking for numeric overflow:

```java
public static Temporal subtract(Temporal temporal, TemporalAmount amount) {
    try {
        return temporal.minus(amount);
    } catch (DateTimeException e) {
        throw new DateTimeException("Subtraction cannot be made", e);
    } catch (ArithmeticException e) {
        if (e.getMessage().contains("long overflow")) {
            throw new ArithmeticException("Numeric overflow occurred during subtraction");
        } else {
            throw e;
        }
    }
}
```

This updated method includes error checking for `DateTimeException` and `ArithmeticException`, as before. However, it also includes additional error checking for numeric overflow.

If a numeric overflow occurs during the subtraction operation, an `ArithmeticException` will be thrown automatically by the `Temporal` class. In this case, the updated method checks if the error message of the exception contains the string "long overflow". If it does, the method throws a new `ArithmeticException` with a more descriptive error message. If it does not, the method re-throws the original `ArithmeticException`.
------------------------------------------------------
