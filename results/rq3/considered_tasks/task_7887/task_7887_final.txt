
Sure, here's the updated Java method that checks if the specified code point is a valid Unicode code point before converting it to its UTF-16 representation:

```java
public static String unicodeToUtf16(int codePoint) {
    if (Character.isBmpCodePoint(codePoint)) {
        // BMP code point
        return String.valueOf((char) codePoint);
    } else if (Character.isValidCodePoint(codePoint)) {
        // Supplementary code point
        char[] surrogatePair = Character.toChars(codePoint);
        return new String(surrogatePair);
    } else {
        // Invalid code point
        throw new IllegalArgumentException("Invalid Unicode code point: " + codePoint);
    }
}
```

In this updated method, we've added a check for the validity of the code point using the `Character.isValidCodePoint()` method before converting it to its UTF-16 representation. If the code point is invalid, the method throws an `IllegalArgumentException` with an appropriate error message.
------------------------------------------------------
