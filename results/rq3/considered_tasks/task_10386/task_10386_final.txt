
Sure, here's the updated code snippet that checks for `IOException` when calling `close()` method of `FileOutputStream`:

```java
import java.io.FileOutputStream;
import java.io.IOException;

public class ByteWriter {
    public static void writeBytesToFile(byte[] bytes, String fileName) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(fileName)) {
            fos.write(bytes);
        } catch (IOException e) {
            throw new IOException("Error writing bytes to file", e);
        }

        try {
            fos.close();
        } catch (IOException e) {
            throw new IOException("Error closing file output stream", e);
        }
    }
}
```

In this updated code, we have added another `try-catch` block to check for `IOException` when calling the `close()` method of `FileOutputStream`. If an `IOException` occurs, we throw a new `IOException` with a custom message and the original exception as the cause.
------------------------------------------------------
