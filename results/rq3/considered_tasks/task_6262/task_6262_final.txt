
Here is the updated Java method that checks for exceptions when adjusting the date-time:

```java
import java.time.LocalDateTime;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.TemporalAmount;

public class DateTimeAdjuster {
    public static LocalDateTime adjustDateTime(LocalDateTime dateTime, String adjustment) {
        LocalDateTime adjustedDateTime = null;
        try {
            switch (adjustment) {
                case "firstDayOfMonth":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.firstDayOfMonth());
                    break;
                case "lastDayOfMonth":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.lastDayOfMonth());
                    break;
                case "nextMonday":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.next(DayOfWeek.MONDAY));
                    break;
                case "previousFriday":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.previous(DayOfWeek.FRIDAY));
                    break;
                // Add more cases for other adjustments as needed
                default:
                    throw new DateTimeException("Invalid adjustment specified.");
            }
        } catch (DateTimeException e) {
            System.out.println("Error adjusting date-time: " + e.getMessage());
        } catch (ArithmeticException e) {
            System.out.println("Error adjusting date-time: " + e.getMessage());
        }
        return adjustedDateTime;
    }
}
```

This updated method uses try-catch blocks to catch `DateTimeException` and `ArithmeticException` that may occur when adjusting the date-time. If an exception is caught, the method prints an error message and returns `null`.
------------------------------------------------------
