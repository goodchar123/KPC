Please write a java method that Returns an adjusted copy of this date-time.
Here is an example Java method that returns an adjusted copy of a date-time:

```java
import java.time.LocalDateTime;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;

public class DateTimeAdjuster {
    public static LocalDateTime adjustDateTime(LocalDateTime dateTime, String adjustment) {
        LocalDateTime adjustedDateTime = null;
        switch (adjustment) {
            case "firstDayOfMonth":
                adjustedDateTime = dateTime.with(TemporalAdjusters.firstDayOfMonth());
                break;
            case "lastDayOfMonth":
                adjustedDateTime = dateTime.with(TemporalAdjusters.lastDayOfMonth());
                break;
            case "nextMonday":
                adjustedDateTime = dateTime.with(TemporalAdjusters.next(DayOfWeek.MONDAY));
                break;
            case "previousFriday":
                adjustedDateTime = dateTime.with(TemporalAdjusters.previous(DayOfWeek.FRIDAY));
                break;
            // Add more cases for other adjustments as needed
            default:
                System.out.println("Invalid adjustment specified.");
        }
        return adjustedDateTime;
    }
}
```

This method takes in a `LocalDateTime` object and a `String` specifying the type of adjustment to make. It uses the `TemporalAdjuster` interface and the `TemporalAdjusters` class to adjust the date-time as specified. The method returns the adjusted date-time as a new `LocalDateTime` object.
------------------------------------------------------
Please check if the adjustment cannot be made for java.time.LocalDateTime.with(java.time.temporal.TemporalAdjuster) in the code snippet you provided, otherwise throw DateTimeException.
Please check if numeric overflow occurs for java.time.LocalDateTime.with(java.time.temporal.TemporalAdjuster) in the code snippet you provided, otherwise throw ArithmeticException.
Here is the updated Java method that checks for exceptions when adjusting the date-time:

```java
import java.time.LocalDateTime;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.TemporalAmount;

public class DateTimeAdjuster {
    public static LocalDateTime adjustDateTime(LocalDateTime dateTime, String adjustment) {
        LocalDateTime adjustedDateTime = null;
        try {
            switch (adjustment) {
                case "firstDayOfMonth":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.firstDayOfMonth());
                    break;
                case "lastDayOfMonth":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.lastDayOfMonth());
                    break;
                case "nextMonday":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.next(DayOfWeek.MONDAY));
                    break;
                case "previousFriday":
                    adjustedDateTime = dateTime.with(TemporalAdjusters.previous(DayOfWeek.FRIDAY));
                    break;
                // Add more cases for other adjustments as needed
                default:
                    throw new DateTimeException("Invalid adjustment specified.");
            }
        } catch (DateTimeException e) {
            System.out.println("Error adjusting date-time: " + e.getMessage());
        } catch (ArithmeticException e) {
            System.out.println("Error adjusting date-time: " + e.getMessage());
        }
        return adjustedDateTime;
    }
}
```

This updated method uses try-catch blocks to catch `DateTimeException` and `ArithmeticException` that may occur when adjusting the date-time. If an exception is caught, the method prints an error message and returns `null`.
------------------------------------------------------
