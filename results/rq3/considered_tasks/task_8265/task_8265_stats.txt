{"loop_id": 0, "unhandled_api_list": ["java.util.Set.contains(java.lang.Object)", "java.util.Set.contains(java.lang.Object)", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the remove operation         is not supported by this set for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw UnsupportedOperationException."], "num_of_unhandled_exception": 5}
{"loop_id": 1, "unhandled_api_list": ["java.util.Set.contains(java.lang.Object)", "java.util.Set.contains(java.lang.Object)", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)", "java.util.SortedSet.first()"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if this set is empty for java.util.SortedSet.first() in the code snippet you provided, otherwise throw NoSuchElementException."], "num_of_unhandled_exception": 5}
{"loop_id": 2, "unhandled_api_list": ["java.util.Set.contains(java.lang.Object)", "java.util.Set.contains(java.lang.Object)", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)", "java.util.SortedSet.first()"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if this set is empty for java.util.SortedSet.first() in the code snippet you provided, otherwise throw NoSuchElementException."], "num_of_unhandled_exception": 5}
{"loop_id": 3, "unhandled_api_list": ["java.util.Set.contains(java.lang.Object)", "java.util.Set.contains(java.lang.Object)", "java.util.SortedSet.first()", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if this set is empty for java.util.SortedSet.first() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException."], "num_of_unhandled_exception": 5}
{"loop_id": 4, "unhandled_api_list": ["java.util.Set.contains(java.lang.Object)", "java.util.Set.contains(java.lang.Object)", "java.util.SortedSet.first()", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if this set is empty for java.util.SortedSet.first() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException."], "num_of_unhandled_exception": 5}
{"loop_id": 5, "unhandled_api_list": ["java.util.Set.contains(java.lang.Object)", "java.util.Set.contains(java.lang.Object)", "java.util.SortedSet.first()", "java.util.Set.remove(java.lang.Object)", "java.util.Set.remove(java.lang.Object)"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.contains(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if this set is empty for java.util.SortedSet.first() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if the type of the specified element         is incompatible with this set (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the specified element is null and this         set does not permit null elements (optional) for java.util.Set.remove(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException."], "num_of_unhandled_exception": 5}
{"loop_id": 6, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
