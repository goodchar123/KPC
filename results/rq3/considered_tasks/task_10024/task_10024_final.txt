
Sure, here's the updated code snippet that checks for I/O errors and throws an `IOException` if necessary:

```java
public int availableWithoutBlocking(InputStream inputStream) throws IOException {
    try {
        // Get the number of bytes that can be read without blocking
        int available = inputStream.available();

        // If the available bytes is zero, try to read one byte to see if any bytes are available
        if (available == 0) {
            inputStream.mark(1);
            int readByte = inputStream.read();
            if (readByte != -1) {
                available = 1;
            }
            inputStream.reset();
        }

        return available;
    } catch (IOException e) {
        throw new IOException("An I/O error occurred while checking available bytes", e);
    }
}
```

This code checks for any `IOException` that may occur while checking the number of bytes that can be read without blocking using the `available()` method of the `InputStream` class. If an `IOException` occurs, it throws a new `IOException` with a message indicating that an I/O error occurred.
------------------------------------------------------
