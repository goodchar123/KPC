
Sure, here's the updated Java method that checks for the conditions you mentioned:

```java
import java.io.IOException;
import java.nio.file.attribute.GroupPrincipal;
import java.nio.file.attribute.UserPrincipalLookupService;
import java.nio.file.FileSystems;
import java.nio.file.attribute.UserPrincipalNotFoundException;

public class GroupLookup {
    public static GroupPrincipal lookupGroup(String groupName) throws IOException, UserPrincipalNotFoundException, SecurityException {
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new RuntimePermission("lookupUserInformation"));
        }
        UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();
        GroupPrincipal groupPrincipal = lookupService.lookupPrincipalByGroupName(groupName);
        if (groupPrincipal == null) {
            throw new UserPrincipalNotFoundException("Group not found: " + groupName);
        }
        return groupPrincipal;
    }
}
```

This updated method now checks for the conditions you mentioned. First, it checks if a `SecurityManager` is installed and if so, checks for the `RuntimePermission("lookupUserInformation")`. If the permission is not granted, a `SecurityException` is thrown.

Next, the method looks up the group principal using the `lookupPrincipalByGroupName()` method. If the group principal is not found, a `UserPrincipalNotFoundException` is thrown with a message indicating the group name that was not found.

If the group principal is found, it is returned as a `GroupPrincipal` object.
------------------------------------------------------
