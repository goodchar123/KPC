
Sure, here's an updated version of the `readConfiguration` method that checks for invalid regular expression syntax and throws a `PatternSyntaxException` if necessary:

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.PatternSyntaxException;

public class ConfigurationReader {
    
    public static Map<String, String> readConfiguration(Reader reader) throws IOException, PatternSyntaxException {
        Map<String, String> config = new HashMap<>();
        BufferedReader bufferedReader = new BufferedReader(reader);
        String line;
        while ((line = bufferedReader.readLine()) != null) {
            if (!line.startsWith("#") && line.contains("=")) {
                String[] parts = line.split("=", 2);
                if (parts.length != 2) {
                    throw new PatternSyntaxException("Invalid regular expression syntax", "=", -1);
                }
                String key = parts[0].trim();
                String value = parts[1].trim();
                config.put(key, value);
            }
        }
        return config;
    }
}
```

This version of the method checks the length of the `parts` array after splitting the line with the equals sign. If the length is not 2, it throws a `PatternSyntaxException` with a message indicating invalid regular expression syntax. The exception includes the offending regular expression (in this case, the equals sign) and the index of the error (-1, since there is no specific index for this error).
------------------------------------------------------
