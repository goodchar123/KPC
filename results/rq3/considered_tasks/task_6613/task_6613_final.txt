
You can modify the `getTimeUntilYearMonth` method to check if the input values are valid and throw a `DateTimeException` if any of them are out of range or if the day of month is invalid for the month year. Here's the updated code:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;

public class TimeUntilYearMonth {
    public static long getTimeUntilYearMonth(int year, int month, int day, ChronoUnit unit) {
        try {
            LocalDate currentDate = LocalDate.now();
            LocalDate targetDate = LocalDate.of(year, month, day);
            Period period = Period.between(currentDate, targetDate);
            long timeUntil = unit.between(currentDate, targetDate) + period.getDays() / (double) unit.getDuration().toDays();
            return timeUntil;
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid input values: " + e.getMessage());
        }
    }
}
```

In this updated method, we added a `try-catch` block to catch any `DateTimeException` that may be thrown when creating the `LocalDate` objects. If an exception is caught, we throw a new `DateTimeException` with a custom message indicating that the input values are invalid.
------------------------------------------------------
