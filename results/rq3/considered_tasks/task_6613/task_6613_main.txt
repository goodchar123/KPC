Please write a java method that Calculates the amount of time until another year-month in terms of the specified unit.
Here's a Java method that calculates the amount of time until another year-month in terms of the specified unit:

```java
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;

public class TimeUntilYearMonth {
    public static long getTimeUntilYearMonth(LocalDate currentDate, int year, int month, ChronoUnit unit) {
        LocalDate targetDate = LocalDate.of(year, month, 1);
        Period period = Period.between(currentDate, targetDate);
        return unit.between(currentDate, targetDate) + period.getDays() / (double) unit.getDuration().toDays();
    }
}
```

This method takes in the current date, the target year and month, and the unit of time to calculate the difference in. It first creates a `LocalDate` object for the target year and month, and then calculates the difference between the current date and the target date using the `Period` class. Finally, it calculates the difference in terms of the specified unit using the `ChronoUnit` class, and adds any remaining days as a fraction of the unit's duration. The result is returned as a `long` value.
------------------------------------------------------
Please check if the value of any field is out of range,  or if the day of month is invalid for the month year for java.time.LocalDate.of(int,int,int) in the code snippet you provided, otherwise throw DateTimeException.
You can modify the `getTimeUntilYearMonth` method to check if the input values are valid and throw a `DateTimeException` if any of them are out of range or if the day of month is invalid for the month year. Here's the updated code:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;

public class TimeUntilYearMonth {
    public static long getTimeUntilYearMonth(int year, int month, int day, ChronoUnit unit) {
        try {
            LocalDate currentDate = LocalDate.now();
            LocalDate targetDate = LocalDate.of(year, month, day);
            Period period = Period.between(currentDate, targetDate);
            long timeUntil = unit.between(currentDate, targetDate) + period.getDays() / (double) unit.getDuration().toDays();
            return timeUntil;
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid input values: " + e.getMessage());
        }
    }
}
```

In this updated method, we added a `try-catch` block to catch any `DateTimeException` that may be thrown when creating the `LocalDate` objects. If an exception is caught, we throw a new `DateTimeException` with a custom message indicating that the input values are invalid.
------------------------------------------------------
