List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)`
2. `javax.imageio.ImageWriter.getDefaultWriteParam()`
3. `javax.imageio.ImageWriteParam.setCompressionMode(int)`
4. `javax.imageio.ImageWriteParam.setCompressionQuality(float)`
5. `javax.imageio.ImageWriteParam.setDestinationType(javax.imageio.ImageTypeSpecifier)`
6. `javax.imageio.ImageWriter.setOutput(javax.imageio.stream.ImageOutputStream)`
7. `javax.imageio.ImageWriter.setWriteParam(javax.imageio.ImageWriteParam)`

 + From response, we get: ['javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageWriter.getDefaultWriteParam()', 'javax.imageio.ImageWriteParam.setCompressionMode(int)', 'javax.imageio.ImageWriteParam.setCompressionQuality(float)', 'javax.imageio.ImageWriteParam.setDestinationType(javax.imageio.ImageTypeSpecifier)', 'javax.imageio.ImageWriter.setOutput(javax.imageio.stream.ImageOutputStream)', 'javax.imageio.ImageWriter.setWriteParam(javax.imageio.ImageWriteParam)']
------------------------------------------------------
Is the IllegalArgumentException handled or caught for javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `IllegalArgumentException` that may be thrown by the `javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)` method.
------------------------------------------------------
Is the UnsupportedOperationException handled or caught for javax.imageio.ImageWriteParam.setCompressionMode(int) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `UnsupportedOperationException` that may be thrown by the `javax.imageio.ImageWriteParam.setCompressionMode(int)` method.
------------------------------------------------------
Is the IllegalArgumentException handled or caught for javax.imageio.ImageWriteParam.setCompressionMode(int) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `IllegalArgumentException` that may be thrown by the `javax.imageio.ImageWriteParam.setCompressionMode(int)` method.
------------------------------------------------------
Is the UnsupportedOperationException handled or caught for javax.imageio.ImageWriteParam.setCompressionQuality(float) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `UnsupportedOperationException` that may be thrown by the `javax.imageio.ImageWriteParam.setCompressionQuality(float)` method.
------------------------------------------------------
Is the IllegalStateException handled or caught for javax.imageio.ImageWriteParam.setCompressionQuality(float) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `IllegalStateException` that may be thrown by the `javax.imageio.ImageWriteParam.setCompressionQuality(float)` method.
------------------------------------------------------
Is the IllegalStateException handled or caught for javax.imageio.ImageWriteParam.setCompressionQuality(float) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `IllegalStateException` that may be thrown by the `javax.imageio.ImageWriteParam.setCompressionQuality(float)` method.
------------------------------------------------------
Is the IllegalArgumentException handled or caught for javax.imageio.ImageWriteParam.setCompressionQuality(float) in the code snippet? Answer in Yes or No only.
No. The code snippet does not handle or catch the `IllegalArgumentException` that may be thrown by the `javax.imageio.ImageWriteParam.setCompressionQuality(float)` method.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)
2. javax.imageio.ImageWriter.getDefaultWriteParam()
3. javax.imageio.ImageWriteParam.isCompressionSupported()
4. javax.imageio.ImageWriteParam.setCompressionMode(int)
5. javax.imageio.ImageWriteParam.getCompressionMode()
6. javax.imageio.ImageWriteParam.setCompressionQuality(float)
7. javax.imageio.ImageWriteParam.getCompressionTypes()
8. javax.imageio.ImageWriteParam.getCompressionType()
9. javax.imageio.ImageWriteParam.setDestinationType(javax.imageio.ImageTypeSpecifier)
10. javax.imageio.ImageWriter.setOutput(javax.imageio.stream.ImageOutputStream)
11. javax.imageio.ImageWriter.setWriteParam(javax.imageio.ImageWriteParam)
12. java.awt.color.ColorSpace.getInstance(int)
13. java.awt.image.ColorModel.getRGBdefault()
14. javax.imageio.ImageTypeSpecifier.<init>(java.awt.image.SampleModel, java.awt.color.ColorSpace, boolean, boolean)
15. javax.imageio.ImageTypeSpecifier.<init>(java.awt.image.PixelType, java.awt.color.ColorSpace, int, boolean, boolean)

 + From response, we get: []
------------------------------------------------------
