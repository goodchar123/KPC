
Sure, here's an updated version of the code snippet that checks for both of these conditions:

```java
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.channels.ServerSocketChannel;

public class ServerSocketChannelExample {
    public static void main(String[] args) throws IOException {
        int port = 8080;
        ServerSocketChannel serverSocketChannel;
        try {
            serverSocketChannel = ServerSocketChannel.open();
        } catch (IOException e) {
            throw new IOException("Failed to open server socket channel", e);
        }
        Socket socket = serverSocketChannel.socket();
        if (!(socket instanceof java.net.InetSocketAddress)) {
            throw new UnsupportedOperationException("Socket is not an Internet protocol socket");
        }
        try {
            serverSocketChannel.socket().bind(new InetSocketAddress(port));
        } catch (IOException e) {
            throw new IOException("Failed to bind server socket channel to port " + port, e);
        }
        System.out.println("Server started on port " + port);
    }
}
```

This version of the code uses a try-catch block to catch any `IOException` that may occur when opening the server socket channel using the `open()` method. If an `IOException` is caught, it is re-thrown as a new `IOException` with a more descriptive error message.

The code also checks if the channel's socket is an instance of `java.net.InetSocketAddress`, and throws an `UnsupportedOperationException` if it is not.

Finally, the code uses another try-catch block to catch any `IOException` that may occur when binding the server socket channel to the specified port using the `bind()` method. If an `IOException` is caught, it is re-thrown as a new `IOException` with a more descriptive error message.
------------------------------------------------------
