Please write a java method that Returns an effectively unlimited stream of pseudorandomly chosen int values, where each value is between the specified origin (inclusive) and the specified bound (exclusive).
Here's a Java method that returns an effectively unlimited stream of pseudorandomly chosen int values between the specified origin (inclusive) and the specified bound (exclusive):

```java
import java.util.Random;
import java.util.stream.IntStream;

public class RandomIntStream {
    public static IntStream randomIntStream(int origin, int bound) {
        Random random = new Random();
        return random.ints(origin, bound);
    }
}
```

You can call this method by passing in the origin and bound values as arguments:

```java
IntStream stream = RandomIntStream.randomIntStream(0, 10);
```

This will return an IntStream that generates pseudorandom int values between 0 (inclusive) and 10 (exclusive). You can then use this stream to perform various operations, such as filtering, mapping, and reducing.
------------------------------------------------------
Please check if randomNumberOrigin         is greater than or equal to randomNumberBound for java.util.Random.ints(int,int) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's the updated code snippet that checks if `randomNumberOrigin` is greater than or equal to `randomNumberBound` and throws an `IllegalArgumentException` if it is:

```java
import java.util.Random;
import java.util.stream.IntStream;

public class RandomIntStream {
    public static IntStream randomIntStream(int randomNumberOrigin, int randomNumberBound) {
        if (randomNumberOrigin >= randomNumberBound) {
            throw new IllegalArgumentException("Origin must be less than bound");
        }
        Random random = new Random();
        return random.ints(randomNumberOrigin, randomNumberBound);
    }
}
```

Now, if you call the `randomIntStream` method with an origin that is greater than or equal to the bound, it will throw an `IllegalArgumentException`. For example:

```java
IntStream stream = RandomIntStream.randomIntStream(10, 5); // throws IllegalArgumentException
```

This will throw an `IllegalArgumentException` with the message "Origin must be less than bound".
------------------------------------------------------
Please check if randomNumberOrigin         is greater than or equal to randomNumberBound for java.util.Random.ints(int,int) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's the updated code snippet that checks if `randomNumberOrigin` is greater than or equal to `randomNumberBound` and throws an `IllegalArgumentException` if it is:

```java
import java.util.Random;
import java.util.stream.IntStream;

public class RandomIntStream {
    public static IntStream randomIntStream(int randomNumberOrigin, int randomNumberBound) {
        if (randomNumberOrigin >= randomNumberBound) {
            throw new IllegalArgumentException("Origin must be less than bound");
        }
        Random random = new Random();
        return random.ints(randomNumberOrigin, randomNumberBound);
    }
}
```

Now, if you call the `randomIntStream` method with an origin that is greater than or equal to the bound, it will throw an `IllegalArgumentException`. For example:

```java
IntStream stream = RandomIntStream.randomIntStream(10, 5); // throws IllegalArgumentException
```

This will throw an `IllegalArgumentException` with the message "Origin must be less than bound".
------------------------------------------------------
Please check if randomNumberOrigin         is greater than or equal to randomNumberBound for java.util.Random.ints(int,int) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's the updated code snippet that checks if `randomNumberOrigin` is greater than or equal to `randomNumberBound` and throws an `IllegalArgumentException` if it is:

```java
import java.util.Random;
import java.util.stream.IntStream;

public class RandomIntStream {
    public static IntStream randomIntStream(int randomNumberOrigin, int randomNumberBound) {
        if (randomNumberOrigin >= randomNumberBound) {
            throw new IllegalArgumentException("Origin must be less than bound");
        }
        Random random = new Random();
        return random.ints(randomNumberOrigin, randomNumberBound);
    }
}
```

Now, if you call the `randomIntStream` method with an origin that is greater than or equal to the bound, it will throw an `IllegalArgumentException`. For example:

```java
IntStream stream = RandomIntStream.randomIntStream(10, 5); // throws IllegalArgumentException
```

This will throw an `IllegalArgumentException` with the message "Origin must be less than bound".
------------------------------------------------------
