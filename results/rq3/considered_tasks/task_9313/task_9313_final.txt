
Sure, here's the updated code snippet that checks if `randomNumberOrigin` is greater than or equal to `randomNumberBound` and throws an `IllegalArgumentException` if it is:

```java
import java.util.Random;
import java.util.stream.IntStream;

public class RandomIntStream {
    public static IntStream randomIntStream(int randomNumberOrigin, int randomNumberBound) {
        if (randomNumberOrigin >= randomNumberBound) {
            throw new IllegalArgumentException("Origin must be less than bound");
        }
        Random random = new Random();
        return random.ints(randomNumberOrigin, randomNumberBound);
    }
}
```

Now, if you call the `randomIntStream` method with an origin that is greater than or equal to the bound, it will throw an `IllegalArgumentException`. For example:

```java
IntStream stream = RandomIntStream.randomIntStream(10, 5); // throws IllegalArgumentException
```

This will throw an `IllegalArgumentException` with the message "Origin must be less than bound".
------------------------------------------------------
