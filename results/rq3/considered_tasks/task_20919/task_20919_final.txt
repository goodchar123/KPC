
Sure, here's the updated code snippet that checks if the columnLabel is valid and throws a SQLException if a database access error occurs or if the method is called on a closed result set:

```java
public String getColumnValue(ResultSet resultSet, String columnLabel) throws SQLException {
    if (resultSet.isClosed()) {
        throw new SQLException("Result set is closed");
    }
    
    ResultSetMetaData metaData = resultSet.getMetaData();
    int columnCount = metaData.getColumnCount();
    int columnIndex = -1;
    for (int i = 1; i <= columnCount; i++) {
        if (metaData.getColumnLabel(i).equals(columnLabel)) {
            columnIndex = i;
            break;
        }
    }
    
    if (columnIndex == -1) {
        throw new SQLException("Invalid column label: " + columnLabel);
    }
    
    return resultSet.getString(columnIndex);
}
```

This updated method first checks if the result set is closed and throws a SQLException if it is. It then loops through the columns in the result set's metadata to find the index of the column with the specified column label. If the column label is not found, the method throws a SQLException with an appropriate error message. Finally, if the column index is found, the method returns the value of the column as a string using the `getString` method of the ResultSet class.
------------------------------------------------------
