{"loop_id": 0, "unhandled_api_list": ["java.lang.Class.forName(java.lang.String)", "java.lang.Class.forName(java.lang.String)", "java.lang.Class.forName(java.lang.String)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.Class.getMethod(java.lang.String,java.lang.Class...)", "java.lang.Class.getMethod(java.lang.String,java.lang.Class...)", "java.lang.Class.getMethod(java.lang.String,java.lang.Class...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)"], "num_of_unhandled_api": 14, "unhandled_exception_list": ["Please check if the linkage fails for java.lang.Class.forName(java.lang.String) in the code snippet you provided, otherwise throw LinkageError.", "Please check if the initialization provoked            by this method fails for java.lang.Class.forName(java.lang.String) in the code snippet you provided, otherwise throw ExceptionInInitializerError.", "Please check if the class cannot be located for java.lang.Class.forName(java.lang.String) in the code snippet you provided, otherwise throw ClassNotFoundException.", "Please check if this Method object              is enforcing Java language access control and the underlying              method is inaccessible. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalAccessException.", "Please check if the method is an              instance method and the specified object argument              is not an instance of the class or interface              declaring the underlying method (or of a subclass              or implementor thereof); if the number of actual              and formal parameters differ; if an unwrapping              conversion for primitive arguments fails; or if,              after possible unwrapping, a parameter value              cannot be converted to the corresponding formal              parameter type by a method invocation conversion. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if the specified object is null              and the method is an instance method. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the initialization provoked by this method fails. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw ExceptionInInitializerError.", "Please check if a matching method is not found         or if the name is \"<init>\"or \"<clinit>\". for java.lang.Class.getMethod(java.lang.String,java.lang.Class...) in the code snippet you provided, otherwise throw NoSuchMethodException.", "Please check if name is null for java.lang.Class.getMethod(java.lang.String,java.lang.Class...) in the code snippet you provided, otherwise throw NullPointerException.", "Please check If a security manager, s, is present and         the caller's class loader is not the same as or an         ancestor of the class loader for the current class and         invocation of s.checkPackageAccess() denies access to the package         of this class. for java.lang.Class.getMethod(java.lang.String,java.lang.Class...) in the code snippet you provided, otherwise throw SecurityException.", "Please check if this Method object              is enforcing Java language access control and the underlying              method is inaccessible. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalAccessException.", "Please check if the method is an              instance method and the specified object argument              is not an instance of the class or interface              declaring the underlying method (or of a subclass              or implementor thereof); if the number of actual              and formal parameters differ; if an unwrapping              conversion for primitive arguments fails; or if,              after possible unwrapping, a parameter value              cannot be converted to the corresponding formal              parameter type by a method invocation conversion. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if the specified object is null              and the method is an instance method. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the initialization provoked by this method fails. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw ExceptionInInitializerError."], "num_of_unhandled_exception": 14}
{"loop_id": 1, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
