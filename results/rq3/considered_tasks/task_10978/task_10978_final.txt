
Here's an updated version of the Java method that includes the requested error checking:

```java
import java.net.*;
import java.io.*;

public class ConnectionHandler {
    public void acceptConnection() throws IOException {
        ServerSocket serverSocket = new ServerSocket(8080); // create a server socket on port 8080
        Socket clientSocket = null;
        try {
            SecurityManager security = System.getSecurityManager();
            if (security != null) {
                security.checkAccept(serverSocket.getInetAddress().getHostAddress(), serverSocket.getLocalPort());
            }
            if (serverSocket.getSoTimeout() > 0) {
                serverSocket.setSoTimeout(serverSocket.getSoTimeout());
            }
            if (serverSocket.getChannel() != null && serverSocket.getChannel().isBlocking()) {
                throw new IllegalBlockingModeException();
            }
            clientSocket = serverSocket.accept(); // accept a connection from a client
        } catch (SecurityException e) {
            serverSocket.close();
            throw e;
        } catch (SocketTimeoutException e) {
            serverSocket.close();
            throw e;
        } catch (IllegalBlockingModeException e) {
            serverSocket.close();
            throw e;
        } catch (IOException e) {
            serverSocket.close();
            throw e;
        }
        try {
            InputStream inputStream = clientSocket.getInputStream();
            if (inputStream == null) {
                throw new IOException("Input stream is null");
            }
            OutputStream outputStream = clientSocket.getOutputStream();
            if (outputStream == null) {
                throw new IOException("Output stream is null");
            }
            // do something with the input and output streams
        } catch (IOException e) {
            clientSocket.close();
            throw e;
        }
        serverSocket.close(); // close the server socket when done
    }
}
```

This version of the method checks for a `SecurityManager` and calls its `checkAccept()` method to ensure that the operation is allowed. It also checks for a timeout that may have been previously set with `setSoTimeout()` and throws a `SocketTimeoutException` if the timeout has been reached. If the socket has an associated channel and the channel is in non-blocking mode, it throws an `IllegalBlockingModeException`. 

The method also checks for errors when creating the input and output streams, and throws an `IOException` if there is an error. Finally, it closes the server socket and client socket when done.
------------------------------------------------------
