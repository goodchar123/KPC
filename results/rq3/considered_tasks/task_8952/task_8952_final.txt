
Sure, here's an updated version of the `arriveAtPhaser` method that checks if the phaser is not terminated and the number of unarrived parties would not become negative before calling `arrive()`. If either of these conditions are not met, an `IllegalStateException` is thrown:

```
public void arriveAtPhaser(Phaser phaser) {
    if (phaser.isTerminated() || phaser.getPhase() < 0 || phaser.getRegisteredParties() - phaser.getArrivedParties() <= 0) {
        throw new IllegalStateException("Phaser is terminated or invalid");
    }
    phaser.arrive();
}
```

This updated method first checks if the phaser is terminated using the `isTerminated()` method. It also checks if the current phase is negative using the `getPhase()` method. Finally, it checks if the number of registered parties minus the number of arrived parties is less than or equal to zero, which would indicate that the number of unarrived parties would become negative if `arrive()` were called.

If any of these conditions are not met, the method throws an `IllegalStateException` with an appropriate error message. Otherwise, it calls `arrive()` on the phaser as before.
------------------------------------------------------
