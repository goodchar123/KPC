
Sure, here's the updated code snippet that checks for I/O errors when calling `BufferedReader.readLine()`, `BufferedReader.close()`, and `BufferedWriter.close()`, and throws an `IOException` if any occur:

```java
import java.io.*;

public void writePlainText(File document, OutputStream outputStream) throws IOException {
    BufferedReader reader = new BufferedReader(new FileReader(document));
    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream));
    String line;
    try {
        while ((line = reader.readLine()) != null) {
            try {
                writer.write(line);
                writer.newLine();
            } catch (IOException e) {
                throw new IOException("Error writing line to output stream", e);
            }
        }
    } catch (IOException e) {
        throw new IOException("Error reading from input stream", e);
    } finally {
        try {
            reader.close();
        } catch (IOException e) {
            throw new IOException("Error closing input stream", e);
        }
        try {
            writer.close();
        } catch (IOException e) {
            throw new IOException("Error closing output stream", e);
        }
    }
}
```

In this updated version, we've added try-catch blocks around the calls to `reader.readLine()`, `reader.close()`, and `writer.close()`. If an `IOException` is thrown, we catch it and re-throw it as a new `IOException` with a more descriptive error message. We've also added a `finally` block to ensure that both the reader and writer are closed, even if an exception is thrown.
------------------------------------------------------
