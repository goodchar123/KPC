
Sure, here's the updated Java method that checks if either field value is invalid for `java.time.YearMonth.of(int,int)`, otherwise throws `DateTimeException`:

```java
import java.time.DateTimeException;
import java.time.YearMonth;

public class YearMonthExample {
    public static YearMonth getYearMonth(int year, int month) {
        try {
            return YearMonth.of(year, month);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid year or month value", e);
        }
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` that may be thrown by the `YearMonth.of()` method. If an exception is caught, it throws a new `DateTimeException` with a custom error message.

You can call this method by passing in the year and month as arguments:

```java
YearMonth yearMonth = YearMonthExample.getYearMonth(2021, 13); // Invalid month value
```

This will throw a `DateTimeException` with the error message "Invalid year or month value".
------------------------------------------------------
