
Sure, here's the updated Java method that checks for exceptions:

```java
import java.time.Duration;
import java.time.temporal.TemporalAmount;
import java.time.temporal.UnsupportedTemporalTypeException;

public class DurationHelper {
    public static Duration getDuration(TemporalAmount amount) {
        try {
            return Duration.from(amount);
        } catch (UnsupportedTemporalTypeException e) {
            throw new DateTimeException("Unable to convert to a Duration", e);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow occurred for Duration conversion");
        }
    }
}
```

This updated method now includes exception handling for the `Duration.from()` method. If the method is unable to convert the `TemporalAmount` to a `Duration`, it will throw a `DateTimeException` with a message indicating the issue. If a numeric overflow occurs during the conversion, it will throw an `ArithmeticException` with a message indicating the issue.
------------------------------------------------------
