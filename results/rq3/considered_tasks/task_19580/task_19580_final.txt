
Sure, here's an updated version of the Java method that checks for the conditions you mentioned and throws the appropriate exceptions:

```java
public static <E> void addElementToQueue(Queue<E> queue, E element) {
    if (element == null && !queue.offer(element)) {
        throw new NullPointerException("Queue does not permit null elements");
    } else if (!queue.offer(element)) {
        throw new IllegalStateException("Element cannot be added at this time due to capacity restrictions");
    } else if (!queue.contains(element)) {
        throw new IllegalArgumentException("Some property of this element prevents it from being added to this queue");
    }
}
```

This method first checks if the specified element is null and the queue does not permit null elements. If this is the case, a `NullPointerException` is thrown.

Next, the method attempts to add the element to the queue using the `offer()` method. If the element cannot be added due to capacity restrictions, an `IllegalStateException` is thrown.

Finally, the method checks if the element was actually added to the queue. If not, it means that some property of the element prevents it from being added to the queue, so an `IllegalArgumentException` is thrown.

Note that this method assumes that the `Queue` implementation being used is not thread-safe. If the `Queue` is thread-safe, then additional synchronization may be required to ensure that the checks and modifications are performed atomically.
------------------------------------------------------
