
Here is the updated Java method that includes the requested exception handling:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.UnsupportedTemporalTypeException;

public class DateParser {
    public static LocalDate parseDate(String dateString) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            TemporalAccessor temporalAccessor = formatter.parse(dateString);
            int year = temporalAccessor.get(ChronoField.YEAR);
            int month = temporalAccessor.get(ChronoField.MONTH_OF_YEAR);
            int day = temporalAccessor.get(ChronoField.DAY_OF_MONTH);
            return LocalDate.of(year, month, day);
        } catch (DateTimeException | IllegalArgumentException | DateTimeParseException | UnsupportedTemporalTypeException | ArithmeticException e) {
            throw e;
        }
    }
}
```

This method now includes a try-catch block that catches the various exceptions that could be thrown during the parsing process. If any of these exceptions are caught, they are re-thrown to the calling method. This ensures that any errors that occur during parsing are properly handled and reported to the user.
------------------------------------------------------
