List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.lang.invoke.MethodHandles.lookup()`
2. `java.lang.invoke.MethodHandles.Lookup.findStatic(java.lang.Class<?>, java.lang.String, java.lang.invoke.MethodType)`
3. `java.lang.invoke.MethodType.methodType(java.lang.Class<?>, java.lang.Class<?>...)`
4. `java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...)` (implicitly used by `MethodHandleDesc` constructor)

 + From response, we get: ['java.lang.invoke.MethodHandles.lookup()', 'java.lang.invoke.MethodHandles.Lookup.findStatic(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)', 'java.lang.invoke.MethodType.methodType(java.lang.Class<?>,java.lang.Class<?>...)', 'java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...)']
------------------------------------------------------
Is the ClassCastException handled or caught for java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the WrongMethodTypeException handled or caught for java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the Throwable handled or caught for java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.lang.invoke.MethodHandles.lookup()
2. java.lang.invoke.MethodHandles.Lookup.findStatic(java.lang.Class<?>, java.lang.String, java.lang.invoke.MethodType)
3. java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class<?>, java.lang.String, java.lang.invoke.MethodType)
4. java.lang.invoke.MethodHandle.asType(java.lang.invoke.MethodType)
5. java.lang.invoke.MethodHandleDesc.<init>(java.lang.invoke.MethodHandle, java.lang.Object[])
6. java.lang.Class.isAssignableFrom(java.lang.Class<?>)

 + From response, we get: []
------------------------------------------------------
