
Sure, here's an updated version of the Java method that includes the requested checks:

```java
public static boolean containsElement(List<String> list, String element) {
    if (element == null && !list.contains(null)) {
        throw new NullPointerException("This list does not permit null elements.");
    }
    try {
        return list.contains(element);
    } catch (ClassCastException e) {
        throw new ClassCastException("The specified element is incompatible with this list.");
    }
}
```

This updated method first checks if the specified element is null and the list does not permit null elements. If this is the case, it throws a `NullPointerException` with a message indicating that null elements are not allowed in the list.

Next, the method attempts to call the `contains()` method on the list with the specified element. If the element is incompatible with the list (e.g. if the list is a list of integers and the element is a string), a `ClassCastException` is thrown with a message indicating that the element is incompatible with the list.

If neither of these checks fail, the method returns the result of the `contains()` method call, indicating whether the element is present in the list.
------------------------------------------------------
