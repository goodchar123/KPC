
Sure, here's an updated version of the Java method that includes all the requested checks:

```
public List<String> getAllRoles(List<Object> relation) {
    List<String> roles = new ArrayList<>();
    for (Object obj : relation) {
        String role = obj.getRole(); // assuming the role attribute is called "role"
        if (role == null) {
            throw new NullPointerException("Role cannot be null");
        }
        if (!roles.contains(role)) {
            roles.add(role);
        }
    }
    for (int i = 0; i < roles.size(); i++) {
        try {
            String role = roles.get(i);
        } catch (IndexOutOfBoundsException e) {
            throw new IndexOutOfBoundsException("Index out of range");
        }
    }
    return roles;
}
```

This updated method first checks if the "role" attribute of the current object is null, and throws a `NullPointerException` if it is. It then checks if the list already contains the role, and adds it to the list if it doesn't.

After that, it loops through the list of roles and tries to get each role by index. If the index is out of range, it throws an `IndexOutOfBoundsException`. This check ensures that the method behaves correctly and avoids unexpected errors.

Finally, the method returns the list of roles.
------------------------------------------------------
