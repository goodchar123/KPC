Please write a java method that Finds the resource with the given name.
Here is a Java method that finds the resource with the given name:

```java
public static URL findResource(String resourceName) {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    URL resourceUrl = classLoader.getResource(resourceName);
    return resourceUrl;
}
```

This method uses the current thread's context class loader to find the resource with the given name. It returns a URL object that represents the location of the resource. If the resource is not found, the method returns null.
------------------------------------------------------
Please check if a security manager is present, and the caller's class loader          is not null and is not the same as or an ancestor of the          context class loader, and the caller does not have the          RuntimePermission("getClassLoader") for java.lang.Thread.getContextClassLoader() in the code snippet you provided, otherwise throw SecurityException.
Please check If name is null for java.lang.ClassLoader.getResource(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.
Here is the updated Java method that checks for the security manager and null inputs:

```java
public static URL findResource(String resourceName) {
    SecurityManager security = System.getSecurityManager();
    if (security != null) {
        security.checkPermission(new RuntimePermission("getClassLoader"));
    }
    
    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
    ClassLoader callerClassLoader = findResource.class.getClassLoader();
    
    if (callerClassLoader != null && !callerClassLoader.equals(contextClassLoader) && !isAncestor(callerClassLoader, contextClassLoader)) {
        throw new SecurityException("Caller class loader is not the same as or an ancestor of the context class loader");
    }
    
    if (resourceName == null) {
        throw new NullPointerException("Resource name is null");
    }
    
    URL resourceUrl = contextClassLoader.getResource(resourceName);
    return resourceUrl;
}

private static boolean isAncestor(ClassLoader ancestor, ClassLoader descendant) {
    ClassLoader current = descendant;
    while (current != null) {
        if (current.equals(ancestor)) {
            return true;
        }
        current = current.getParent();
    }
    return false;
}
```

This updated method first checks for the presence of a security manager and throws a SecurityException if the caller does not have the necessary permission. It then checks that the caller's class loader is not null and is not the same as or an ancestor of the context class loader, and throws a SecurityException if this condition is not met. Finally, it checks that the resource name is not null and throws a NullPointerException if it is. The method also includes a helper method, `isAncestor`, which checks if one class loader is an ancestor of another.
------------------------------------------------------
