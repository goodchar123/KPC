
Sure, here's an updated version of the Java method that checks if the year value is valid for `java.time.ZonedDateTime.withYear(int)` and throws a `DateTimeException` if it's invalid:

```java
public static ZonedDateTime withYear(ZonedDateTime zonedDateTime, int year) {
    try {
        return zonedDateTime.withYear(year);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid year value: " + year, e);
    }
}
```

This method takes in a `ZonedDateTime` object and an integer `year` as parameters. It then calls the `withYear()` method on the `ZonedDateTime` object, passing in the `year` parameter to alter the year of the `ZonedDateTime` object. If the `withYear()` method throws a `DateTimeException`, the method catches it and throws a new `DateTimeException` with a custom error message that includes the invalid `year` value and the original exception as the cause. Finally, it returns the updated `ZonedDateTime` object if the year value is valid.
------------------------------------------------------
