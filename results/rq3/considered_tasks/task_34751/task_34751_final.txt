
Sure, here's the updated Java method that checks if the String contains a parsable integer and throws a NumberFormatException if it doesn't:

```
public static Color getColorFromString(String colorString) throws NumberFormatException {
    int colorInt;
    try {
        colorInt = Integer.parseInt(colorString);
    } catch (NumberFormatException e) {
        throw new NumberFormatException("Invalid color string: " + colorString);
    }
    return new Color(colorInt, true);
}
```

This method uses a try-catch block to catch the NumberFormatException that may be thrown by the `Integer.parseInt()` method if the String is not a parsable integer. If this exception is caught, the method throws a new NumberFormatException with a custom error message indicating the invalid color string.

You can call this updated method in the same way as before, but now it will throw an exception if the String is not a valid integer:

```
Color myColor = getColorFromString("16711680"); // creates a red color
Color invalidColor = getColorFromString("not a color"); // throws NumberFormatException
```
------------------------------------------------------
