
Here are the updated Java methods that check for I/O errors and throw an `IOException` if necessary:

For `OutputStream.write(byte[])`:

```java
public void writeIntToStream(OutputStream stream, int v) throws IOException {
    byte[] bytes = new byte[4];
    bytes[0] = (byte) (v >>> 24);
    bytes[1] = (byte) (v >>> 16);
    bytes[2] = (byte) (v >>> 8);
    bytes[3] = (byte) v;
    try {
        stream.write(bytes);
    } catch (IOException e) {
        throw new IOException("Error writing to output stream", e);
    }
}
```

For `OutputStream.write(byte[], int, int)`:

```java
public void writeIntToStream(OutputStream stream, int v) throws IOException {
    byte[] bytes = new byte[4];
    bytes[0] = (byte) (v >>> 24);
    bytes[1] = (byte) (v >>> 16);
    bytes[2] = (byte) (v >>> 8);
    bytes[3] = (byte) v;
    try {
        stream.write(bytes, 0, 4);
    } catch (IOException e) {
        throw new IOException("Error writing to output stream", e);
    }
}
```

Both methods now use a try-catch block to catch any `IOException` that may occur during the write operation. If an `IOException` is caught, a new `IOException` is thrown with a custom error message and the original exception as its cause. This way, the calling method can handle the exception appropriately.
------------------------------------------------------
