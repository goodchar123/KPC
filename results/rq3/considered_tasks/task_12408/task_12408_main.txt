Please write a java method that Performs an unchecked "crack" of a direct method handle.
Here's an example of a Java method that performs an unchecked "crack" of a direct method handle:

```java
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public class MethodHandleCracker {
    public static void crack(MethodHandle handle) throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodType type = handle.type();
        MethodHandle target = lookup.findVirtual(MethodHandle.class, "internalMemberName", MethodType.methodType(Object.class));
        Object memberName = target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalKind", MethodType.methodType(int.class));
        int kind = (int) target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalModifiers", MethodType.methodType(int.class));
        int modifiers = (int) target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalMethodType", MethodType.methodType(MethodType.class));
        MethodType methodType = (MethodType) target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalSpecialCaller", MethodType.methodType(Object.class));
        Object specialCaller = target.invokeExact(handle);
        System.out.println("Member name: " + memberName);
        System.out.println("Kind: " + kind);
        System.out.println("Modifiers: " + modifiers);
        System.out.println("Method type: " + methodType);
        System.out.println("Special caller: " + specialCaller);
    }
}
```

This method takes a `MethodHandle` as input and uses reflection to access its internal fields and methods. It then prints out information about the method handle, including its member name, kind, modifiers, method type, and special caller. Note that this method is not type-safe and can potentially throw `Throwable` if the internal fields or methods of the `MethodHandle` class change in future versions of Java.
------------------------------------------------------
Please check if the target's type is not identical with the caller's symbolic type descriptor for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet you provided, otherwise throw WrongMethodTypeException.
Please check anything thrown by the underlying method propagates unchanged through the method handle call for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet you provided, otherwise throw Throwable.
Here's an updated version of the `crack` method that includes the requested checks:

```java
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public class MethodHandleCracker {
    public static void crack(MethodHandle handle) throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodType type = handle.type();
        MethodHandle target = lookup.findVirtual(MethodHandle.class, "internalMemberName", MethodType.methodType(Object.class));
        Object memberName = target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalKind", MethodType.methodType(int.class));
        int kind = (int) target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalModifiers", MethodType.methodType(int.class));
        int modifiers = (int) target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalMethodType", MethodType.methodType(MethodType.class));
        MethodType methodType = (MethodType) target.invokeExact(handle);
        target = lookup.findVirtual(MethodHandle.class, "internalSpecialCaller", MethodType.methodType(Object.class));
        Object specialCaller = target.invokeExact(handle);
        System.out.println("Member name: " + memberName);
        System.out.println("Kind: " + kind);
        System.out.println("Modifiers: " + modifiers);
        System.out.println("Method type: " + methodType);
        System.out.println("Special caller: " + specialCaller);
        
        // Check if target's type is not identical with the caller's symbolic type descriptor
        if (!type.toMethodDescriptorString().equals(methodType.toMethodDescriptorString())) {
            throw new WrongMethodTypeException("Target's type is not identical with the caller's symbolic type descriptor");
        }
        
        // Check if anything thrown by the underlying method propagates unchanged through the method handle call
        try {
            handle.invokeExact();
        } catch (Throwable t) {
            throw t;
        }
    }
}
```

This updated version first checks if the target's type is not identical with the caller's symbolic type descriptor, and throws a `WrongMethodTypeException` if they are not identical. It then checks if anything thrown by the underlying method propagates unchanged through the method handle call, and throws the same `Throwable` if it does.
------------------------------------------------------
