List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.lang.invoke.MethodHandle`
2. `java.lang.invoke.MethodHandles.lookup()`
3. `java.lang.invoke.MethodType.methodType(java.lang.Object.class)`
4. `java.lang.invoke.MethodType.methodType(int.class)`
5. `java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodType.class)`
6. `java.lang.invoke.MethodHandle.findVirtual(java.lang.Class<?>, java.lang.String, java.lang.invoke.MethodType)`
7. `java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)`

 + From response, we get: ['java.lang.invoke.MethodHandle', 'java.lang.invoke.MethodHandles.lookup()', 'java.lang.invoke.MethodType.methodType(java.lang.Object.class)', 'java.lang.invoke.MethodType.methodType(int.class)', 'java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodType.class)', 'java.lang.invoke.MethodHandle.findVirtual(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)', 'java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)']
------------------------------------------------------
Is the WrongMethodTypeException handled or caught for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the Throwable handled or caught for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
Here are the fully qualified names of the Java JDK methods used in the `crack` method:

- `java.lang.invoke.MethodHandles.lookup()`
- `java.lang.invoke.MethodType.methodType(Class<?>...)`
- `java.lang.invoke.MethodHandle.type()`
- `java.lang.invoke.MethodHandles.Lookup.findVirtual(Class<?>, String, MethodType)`
- `java.lang.invoke.MethodHandle.invokeExact(Object...)`
- `java.lang.invoke.MethodType.toMethodDescriptorString()`
- `java.lang.invoke.MethodHandle.internalMemberName()`
- `java.lang.invoke.MethodHandle.internalKind()`
- `java.lang.invoke.MethodHandle.internalModifiers()`
- `java.lang.invoke.MethodHandle.internalMethodType()`
- `java.lang.invoke.MethodHandle.internalSpecialCaller()`

 + From response, we get: ['crack', 'java.lang.invoke.MethodHandles.lookup()', 'java.lang.invoke.MethodType.methodType(Class<?>...)', 'java.lang.invoke.MethodHandle.type()', 'java.lang.invoke.MethodHandles.Lookup.findVirtual(Class<?>,String,MethodType)', 'java.lang.invoke.MethodHandle.invokeExact(Object...)', 'java.lang.invoke.MethodType.toMethodDescriptorString()', 'java.lang.invoke.MethodHandle.internalMemberName()', 'java.lang.invoke.MethodHandle.internalKind()', 'java.lang.invoke.MethodHandle.internalModifiers()', 'java.lang.invoke.MethodHandle.internalMethodType()', 'java.lang.invoke.MethodHandle.internalSpecialCaller()']
------------------------------------------------------
