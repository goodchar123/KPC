
You can add a check for invalid values and throw a `DateTimeException` if any of the values are out of range or if the day of month is invalid for the month year. Here's an updated version of the `getLocalDateTime` method that includes this check:

```java
import java.time.DateTimeException;
import java.time.LocalDateTime;

public class DateTimeUtils {
    public static LocalDateTime getLocalDateTime(int year, int month, int day, int hour, int minute) {
        try {
            return LocalDateTime.of(year, month, day, hour, minute, 0, 0);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date or time value", e);
        }
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` that may be thrown by the `LocalDateTime.of` method. If an exception is caught, a new `DateTimeException` is thrown with a custom error message.

You can call this method in the same way as before:

```java
LocalDateTime dateTime = DateTimeUtils.getLocalDateTime(2021, 10, 15, 9, 30);
```

If any of the values are out of range or if the day of month is invalid for the month year, a `DateTimeException` will be thrown with the custom error message.
------------------------------------------------------
