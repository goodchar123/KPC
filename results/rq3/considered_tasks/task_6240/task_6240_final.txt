
Sure, here's the updated Java method that checks for the exceptions you mentioned:

```java
public static int getFieldValue(LocalDateTime dateTime, ChronoField field) {
    try {
        return dateTime.get(field);
    } catch (DateTimeException | UnsupportedTemporalTypeException e) {
        System.err.println("Error: " + e.getMessage());
        return -1; // or throw the exception further up the call stack
    } catch (ArithmeticException e) {
        System.err.println("Error: Numeric overflow occurred");
        return -1; // or throw the exception further up the call stack
    }
}
```

This method now catches the `DateTimeException`, `UnsupportedTemporalTypeException`, and `ArithmeticException` that may be thrown by the `get` method of the `LocalDateTime` class. If any of these exceptions occur, the method prints an error message and returns `-1` (or throws the exception further up the call stack).

Here's an example of how you can use this updated method:

```java
LocalDateTime dateTime = LocalDateTime.now();
int hour = getFieldValue(dateTime, ChronoField.HOUR_OF_DAY);
System.out.println("Hour of the day: " + hour);
```

If the `HOUR_OF_DAY` field is not supported by the `LocalDateTime` object, or if the value is outside the valid range, or if a numeric overflow occurs, the method will print an error message and return `-1`. Otherwise, it will return the value of the specified field as an `int`.
------------------------------------------------------
