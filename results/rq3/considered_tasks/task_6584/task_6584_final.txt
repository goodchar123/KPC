
Sure, here's the updated Java method that checks if the temporal object can be converted to a `YearMonth` instance using the `from` method. If it cannot be converted, it throws a `DateTimeException`:

```
import java.time.YearMonth;
import java.time.temporal.TemporalAccessor;
import java.time.DateTimeException;

public class YearMonthHelper {
    public static YearMonth getYearMonth(TemporalAccessor temporal) {
        try {
            return YearMonth.from(temporal);
        } catch (DateTimeException e) {
            throw new DateTimeException("Unable to convert to YearMonth", e);
        }
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` that may be thrown when trying to convert the temporal object to a `YearMonth` instance. If a `DateTimeException` is caught, it is re-thrown with a custom error message.
------------------------------------------------------
