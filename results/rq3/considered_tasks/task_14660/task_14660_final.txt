
Sure, here's an updated version of the code snippet that checks if `corePoolSize` is less than 0 and throws an `IllegalArgumentException` if it is:

```
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class TaskScheduler {
    private final ScheduledExecutorService scheduler;

    public TaskScheduler(int corePoolSize) {
        if (corePoolSize < 0) {
            throw new IllegalArgumentException("corePoolSize cannot be negative");
        }
        scheduler = Executors.newScheduledThreadPool(corePoolSize);
    }

    public void scheduleTask(Runnable task, long delay, long period) {
        scheduler.scheduleAtFixedRate(task, delay, period, TimeUnit.MILLISECONDS);
    }
}
```

In this version, the `TaskScheduler` constructor takes an `int` parameter `corePoolSize`, which is used to create the `ScheduledExecutorService`. Before creating the `ScheduledExecutorService`, the constructor checks if `corePoolSize` is less than 0 and throws an `IllegalArgumentException` if it is.
------------------------------------------------------
