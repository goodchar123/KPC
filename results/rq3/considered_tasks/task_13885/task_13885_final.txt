
Sure, here's the updated code snippet that includes the null and exception checks:

```java
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class LanguageTagFilter {

    public static List<String> filterLanguageTags(List<String> languageTags, String languageRange) {
        if (languageRange == null) {
            throw new NullPointerException("Language range cannot be null");
        }

        List<String> matchingTags = new ArrayList<>();
        Locale.LanguageRange[] languageRanges;

        try {
            languageRanges = Locale.LanguageRange.parse(languageRange);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid language range: " + e.getMessage());
        }

        for (String tag : languageTags) {
            if (tag == null) {
                throw new NullPointerException("Language tag cannot be null");
            }

            Locale locale = Locale.forLanguageTag(tag);
            double matchScore = Locale.LanguageRange.getMatchingLocales(languageRange, locale).get(0).getWeight();
            if (matchScore > 0) {
                matchingTags.add(tag);
            }
        }

        return matchingTags;
    }
}
```

This updated implementation includes the following checks:

- If the `languageRange` parameter is null, a `NullPointerException` is thrown with an appropriate message.
- If the `Locale.LanguageRange.parse()` method throws an `IllegalArgumentException`, it is caught and re-thrown with an appropriate message.
- If a language tag in the `languageTags` list is null, a `NullPointerException` is thrown with an appropriate message.

These checks help ensure that the method is used correctly and that any errors are caught and reported in a clear and helpful way.
------------------------------------------------------
