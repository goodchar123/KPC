{"loop_id": 0, "unhandled_api_list": ["java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.getString(java.lang.String)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if the columnLabel is not valid; if a database access error occurs or this method is            called on a closed result set for java.sql.ResultSet.getString(java.lang.String) in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 3}
{"loop_id": 1, "unhandled_api_list": ["java.sql.Connection.getMetaData()", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.next()"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 3}
{"loop_id": 2, "unhandled_api_list": ["java.sql.Connection.getMetaData()", "java.sql.DatabaseMetaData.getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)", "java.lang.StringBuilder.delete(int,int)", "java.sql.Connection.prepareStatement(java.lang.String)", "java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.next()", "java.sql.ResultSet.getObject(java.lang.String)"], "num_of_unhandled_api": 9, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs for java.sql.DatabaseMetaData.getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String) in the code snippet you provided, otherwise throw SQLException.", "Please check if start             is negative, greater than length(), or             greater than end. for java.lang.StringBuilder.delete(int,int) in the code snippet you provided, otherwise throw StringIndexOutOfBoundsException.", "Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.prepareStatement(java.lang.String) in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs; this method is called on a closed  PreparedStatement or the SQL            statement does not return a ResultSet object for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException.", "Please check if the columnLabel is not valid; if a database access error occurs or this method is            called on a closed result set for java.sql.ResultSet.getObject(java.lang.String) in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 9}
{"loop_id": 3, "unhandled_api_list": ["java.sql.PreparedStatement.setObject(int,java.lang.Object)", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.getObject(java.lang.String)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs;  this method is called on a closed PreparedStatement or the type of the given object is ambiguous for java.sql.PreparedStatement.setObject(int,java.lang.Object) in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if the columnLabel is not valid; if a database access error occurs or this method is            called on a closed result set for java.sql.ResultSet.getObject(java.lang.String) in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 3}
{"loop_id": 4, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
