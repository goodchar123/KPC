
Sure, here's the updated code that checks for null `Locale` and `IndexOutOfBoundsException`:

```java
import java.text.BreakIterator;
import java.util.Locale;

public class SentenceBreakIterator {
    public static BreakIterator getSentenceBreakIterator(Locale locale) {
        if (locale == null) {
            throw new NullPointerException("Locale cannot be null");
        }
        return BreakIterator.getSentenceInstance(locale);
    }
}

public class SentenceExtractor {
    public static void extractSentences(String text) {
        BreakIterator sentenceIterator = SentenceBreakIterator.getSentenceBreakIterator(Locale.US);
        sentenceIterator.setText(text);

        int start = sentenceIterator.first();
        int end = sentenceIterator.next();
        while (end != BreakIterator.DONE) {
            try {
                String sentence = text.substring(start, end);
                System.out.println(sentence);
            } catch (IndexOutOfBoundsException e) {
                System.err.println("Error extracting sentence: " + e.getMessage());
            }
            start = end;
            end = sentenceIterator.next();
        }
    }
}
```

In the `getSentenceBreakIterator` method, we added a null check for the `Locale` parameter and throw a `NullPointerException` if it is null.

In the `extractSentences` method, we added a try-catch block around the `substring` method call to catch any `IndexOutOfBoundsException` that may occur. If an exception is caught, we print an error message to the console.

With these updates, the code is now more robust and can handle null `Locale` and out-of-bounds index exceptions.
------------------------------------------------------
