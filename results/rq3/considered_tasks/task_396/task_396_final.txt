
Sure, here's an updated version of the `readConfig` method that checks for invalid regular expression syntax and throws a `PatternSyntaxException` if necessary:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.PatternSyntaxException;

public class ConfigReader {
    public static Map<String, String> readConfig(String filePath) throws IOException, PatternSyntaxException {
        Map<String, String> configMap = new HashMap<>();
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;
        while ((line = reader.readLine()) != null) {
            try {
                String[] parts = line.split("=");
                if (parts.length >= 2) {
                    String key = parts[0].trim();
                    String value = parts[1].trim();
                    configMap.put(key, value);
                }
            } catch (PatternSyntaxException e) {
                reader.close();
                throw e;
            }
        }
        reader.close();
        return configMap;
    }
}
```

This version of the method uses a `try-catch` block to catch any `PatternSyntaxException` that may be thrown by the `split` method. If such an exception is caught, the method closes the file reader and re-throws the exception. This ensures that any invalid regular expression syntax is detected and handled properly.
------------------------------------------------------
