
Sure, here's an updated version of the `getResult()` method that checks if the computation was cancelled or threw an exception, and throws the appropriate exception if it did:

```
public static <T> T getResult(Future<T> future) throws InterruptedException, ExecutionException, CancellationException {
    T result;
    try {
        result = future.get(); // waits for the computation to complete and retrieves the result
    } catch (CancellationException e) {
        throw e; // rethrow the cancellation exception
    } catch (ExecutionException e) {
        Throwable cause = e.getCause();
        if (cause instanceof RuntimeException) {
            throw (RuntimeException) cause; // rethrow the runtime exception
        } else if (cause instanceof Error) {
            throw (Error) cause; // rethrow the error
        } else {
            throw e; // rethrow the execution exception
        }
    }
    if (future.isCancelled()) {
        throw new CancellationException("Computation was cancelled");
    }
    return result;
}
```

This version of the method uses a try-catch block to catch any exceptions that may be thrown by the `future.get()` method. If a `CancellationException` is caught, it is rethrown immediately. If an `ExecutionException` is caught, the method checks the cause of the exception to see if it was a `RuntimeException` or an `Error`. If it was, the method rethrows that exception. Otherwise, it rethrows the `ExecutionException`.

After the try-catch block, the method checks if the computation was cancelled by calling `future.isCancelled()`. If it was, it throws a `CancellationException` with an appropriate message. Otherwise, it returns the result.
------------------------------------------------------
