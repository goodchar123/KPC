
Sure, here's an updated version of the Java method that includes all the requested checks:

```
public void readBytesFromChannel(ReadableByteChannel channel, ByteBuffer buffer) throws IOException {
    if (!buffer.isReadOnly()) {
        throw new IllegalArgumentException("Buffer must be read-only");
    }
    if (channel instanceof FileChannel) {
        FileChannel fileChannel = (FileChannel) channel;
        if (!fileChannel.isOpen()) {
            throw new ClosedChannelException();
        }
        int bytesRead;
        try {
            bytesRead = fileChannel.read(buffer);
        } catch (AsynchronousCloseException e) {
            throw e;
        } catch (ClosedByInterruptException e) {
            throw e;
        } catch (IOException e) {
            throw new ClosedChannelException();
        }
        while (bytesRead != -1) {
            buffer.flip();
            while (buffer.hasRemaining()) {
                System.out.print((char) buffer.get());
            }
            buffer.clear();
            try {
                bytesRead = fileChannel.read(buffer);
            } catch (AsynchronousCloseException e) {
                throw e;
            } catch (ClosedByInterruptException e) {
                throw e;
            } catch (IOException e) {
                throw new ClosedChannelException();
            }
        }
    } else if (channel instanceof SocketChannel) {
        SocketChannel socketChannel = (SocketChannel) channel;
        if (!socketChannel.isConnected()) {
            throw new NotYetConnectedException();
        }
        if (!socketChannel.isOpen()) {
            throw new ClosedChannelException();
        }
        int bytesRead;
        try {
            bytesRead = socketChannel.read(buffer);
        } catch (AsynchronousCloseException e) {
            throw e;
        } catch (ClosedByInterruptException e) {
            throw e;
        } catch (IOException e) {
            throw new ClosedChannelException();
        }
        while (bytesRead != -1) {
            buffer.flip();
            while (buffer.hasRemaining()) {
                System.out.print((char) buffer.get());
            }
            buffer.clear();
            try {
                bytesRead = socketChannel.read(buffer);
            } catch (AsynchronousCloseException e) {
                throw e;
            } catch (ClosedByInterruptException e) {
                throw e;
            } catch (IOException e) {
                throw new ClosedChannelException();
            }
        }
    } else {
        throw new NonReadableChannelException();
    }
    if (buffer.position() >= buffer.limit()) {
        throw new BufferUnderflowException();
    }
}
```

This updated method includes the following checks:


------------------------------------------------------
