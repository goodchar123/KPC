
Sure, here's the updated code snippet that checks for `IOException` when calling `readLine()` and `close()` methods:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileHelper {
    public static String readFromFile(String filePath) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        StringBuilder stringBuilder = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
        } catch (IOException e) {
            throw new IOException("Error reading file: " + e.getMessage());
        } finally {
            try {
                reader.close();
            } catch (IOException e) {
                throw new IOException("Error closing file: " + e.getMessage());
            }
        }
        return stringBuilder.toString();
    }
}
```

In this updated code, we've added a `try-catch` block around the `readLine()` method to catch any `IOException` that might occur. If an `IOException` is caught, we throw a new `IOException` with a custom error message.

Similarly, we've added a `try-catch` block around the `close()` method to catch any `IOException` that might occur while closing the file. If an `IOException` is caught, we throw a new `IOException` with a custom error message.

By doing this, we ensure that any `IOException` that occurs during the file reading or closing process is properly handled and propagated up the call stack.
------------------------------------------------------
