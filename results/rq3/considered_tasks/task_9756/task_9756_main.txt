Please write a java method that Writes the Manifest to the specified OutputStream.
Here's an example Java method that writes the Manifest to the specified OutputStream:

```java
import java.io.IOException;
import java.io.OutputStream;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

public class ManifestWriter {
    public static void writeManifest(OutputStream outputStream) throws IOException {
        Manifest manifest = new Manifest();
        Attributes attributes = manifest.getMainAttributes();
        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0");
        attributes.put(new Attributes.Name("Created-By"), "My Application");
        manifest.write(outputStream);
    }
}
```

This method creates a new Manifest object, sets the manifest version and a custom "Created-By" attribute, and then writes the manifest to the specified OutputStream. You can call this method with any OutputStream, such as a FileOutputStream or ByteArrayOutputStream.
------------------------------------------------------
Please check if the name is not a Attributes.Name            or the value is not a String for java.util.jar.Attributes.put(java.lang.Object,java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.
Sure, here's an updated version of the `writeManifest` method that checks if the name is not an `Attributes.Name` or the value is not a `String` before calling `Attributes.put`. If either of these conditions is true, a `ClassCastException` is thrown:

```java
import java.io.IOException;
import java.io.OutputStream;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

public class ManifestWriter {
    public static void writeManifest(OutputStream outputStream) throws IOException {
        Manifest manifest = new Manifest();
        Attributes attributes = manifest.getMainAttributes();
        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0");
        putAttribute(attributes, new Attributes.Name("Created-By"), "My Application");
        manifest.write(outputStream);
    }

    private static void putAttribute(Attributes attributes, Object name, Object value) {
        if (!(name instanceof Attributes.Name)) {
            throw new ClassCastException("Name must be an instance of Attributes.Name");
        }
        if (!(value instanceof String)) {
            throw new ClassCastException("Value must be an instance of String");
        }
        attributes.put((Attributes.Name) name, (String) value);
    }
}
```

This version of the method includes a new private helper method called `putAttribute` that performs the type checking before calling `Attributes.put`. If either the name or value is not of the expected type, a `ClassCastException` is thrown.
------------------------------------------------------
