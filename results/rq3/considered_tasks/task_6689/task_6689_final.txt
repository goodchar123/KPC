
Sure, here's the updated Java method that checks if the day-of-year value is invalid or if the day-of-year is invalid for the year, and throws a `DateTimeException` if either of these conditions are met:

```java
public static OffsetDateTime withDayOfYear(OffsetDateTime dateTime, int dayOfYear) {
    try {
        return dateTime.withDayOfYear(dayOfYear);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid day-of-year value: " + dayOfYear, e);
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` that may be thrown when calling the `withDayOfYear` method on the `OffsetDateTime` object. If an exception is caught, it throws a new `DateTimeException` with a custom error message that includes the invalid day-of-year value.

You can call this updated method in the same way as before:

```java
OffsetDateTime dateTime = OffsetDateTime.now();
OffsetDateTime newDateTime = withDayOfYear(dateTime, 200);
```

If the day-of-year value is invalid or if the day-of-year is invalid for the year, a `DateTimeException` will be thrown with an appropriate error message.
------------------------------------------------------
