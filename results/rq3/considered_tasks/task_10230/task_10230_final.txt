
Sure, here's the updated Java method that checks for an I/O error when reading a line from the file using `BufferedReader.readLine()` and throws an `IOException` if an error occurs:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileHelper {
    public static boolean readBooleanFromFile(String filePath) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        boolean value;
        try {
            String line = reader.readLine();
            if (line == null) {
                throw new IOException("File is empty");
            }
            value = Boolean.parseBoolean(line);
        } catch (IOException e) {
            throw new IOException("Error reading file: " + e.getMessage());
        } finally {
            reader.close();
        }
        return value;
    }
}
```

This updated method uses a try-catch block to catch any `IOException` that may occur when reading a line from the file using `BufferedReader.readLine()`. If an error occurs, it throws a new `IOException` with a message that includes the original error message. Additionally, it checks if the file is empty by checking if the line read from the file is null, and throws an `IOException` with a message indicating that the file is empty. Finally, it closes the reader in a `finally` block to ensure that the reader is always closed, even if an exception is thrown.
------------------------------------------------------
