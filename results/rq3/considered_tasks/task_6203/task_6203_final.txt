
Sure, here's an updated version of the Java method that includes the requested check for numeric overflow:

```java
public static Year setField(Year year, TemporalField field, long newValue) {
    try {
        return year.with(field, newValue);
    } catch (DateTimeException | UnsupportedTemporalTypeException e) {
        throw e;
    } catch (ArithmeticException e) {
        throw new ArithmeticException("Numeric overflow occurred while setting field");
    }
}
```

This method first attempts to set the specified field to the new value using the `with` method of the `Year` class. If an exception is thrown due to an invalid field or value, it is caught and re-thrown. If an `ArithmeticException` is thrown due to numeric overflow, it is caught and a new `ArithmeticException` with a more descriptive message is thrown.

Here's an example usage of this updated method:

```java
Year currentYear = Year.now(); // e.g. 2021
Year newYear = setField(currentYear, ChronoField.YEAR, 10000000000L); // throws ArithmeticException
``` 

In this example, the `setField` method is called with a value that causes a numeric overflow, resulting in an `ArithmeticException` being thrown with the message "Numeric overflow occurred while setting field".
------------------------------------------------------
