
Sure, here's the updated code that checks for an I/O error when closing the output stream and throws an `IOException` if necessary:

```java
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStore.LoadStoreParameter;

public class KeystoreHelper {
    
    public static void storeKeystore(KeyStore keystore, LoadStoreParameter param, String filename) throws Exception {
        FileOutputStream fos = new FileOutputStream(filename);
        try {
            keystore.store(fos, param.getProtectionParameter());
        } finally {
            try {
                fos.close();
            } catch (IOException e) {
                // log or handle the exception as needed
                throw new IOException("Error closing output stream", e);
            }
        }
    }
}
```

In this updated code, we wrap the call to `keystore.store()` in a `try` block and then close the output stream in a `finally` block. If an `IOException` occurs when closing the output stream, we catch it and re-throw it as a new `IOException` with a more descriptive message. This way, the caller of the `storeKeystore()` method can handle the exception appropriately.
------------------------------------------------------
