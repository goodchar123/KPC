
Sure, here's an updated version of the `interruptThread` method that checks if the current thread has permission to interrupt the specified thread:

```
public void interruptThread(Thread thread) throws SecurityException {
    SecurityManager securityManager = System.getSecurityManager();
    if (securityManager != null) {
        securityManager.checkAccess(thread);
    }
    thread.interrupt();
}
```

This version first checks if a `SecurityManager` is installed and if so, calls its `checkAccess` method to determine if the current thread has permission to modify the specified thread. If the current thread does not have permission, a `SecurityException` is thrown. Otherwise, the method calls the `interrupt` method on the specified thread to interrupt it.
------------------------------------------------------
