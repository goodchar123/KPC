
Sure, here's the updated Java method that includes the null and closed scanner checks for `Scanner.findAll` method, and the check for previous match operation for `MatchResult.group` method:

```java
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.stream.Stream;

public class ScannerStream {
    public static Stream<String> getMatchResults(Scanner scanner, String pattern) {
        if (scanner == null) {
            throw new NullPointerException("Scanner cannot be null");
        }
        if (!scanner.hasNext()) {
            throw new IllegalStateException("Scanner is closed");
        }
        Pattern regex = Pattern.compile(pattern);
        return scanner.findAll(regex)
                      .map(matchResult -> {
                          if (!matchResult.matches()) {
                              throw new IllegalStateException("No match found");
                          }
                          return matchResult.group();
                      });
    }
}
```

This method first checks if the `Scanner` object is null, and throws a `NullPointerException` if it is. It then checks if the scanner has any input left, and throws an `IllegalStateException` if it is closed.

For the `findAll` method, it compiles the pattern into a `Pattern` object and uses it to find all occurrences of the pattern in the scanner's input. It then maps each `MatchResult` object to its corresponding match string using the `group` method, and checks if the previous match operation failed by calling the `matches` method on the `MatchResult` object. If it failed, it throws an `IllegalStateException`.

You can call this method like this:

```java
Scanner scanner = new Scanner("Hello world! How are you?");
Stream<String> matchResults = ScannerStream.getMatchResults(scanner, "\\w+");
matchResults.forEach(System.out::println);
```

This will output:

```
Hello
world
How
are
you
```
------------------------------------------------------
