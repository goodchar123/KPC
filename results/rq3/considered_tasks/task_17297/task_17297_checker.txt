List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.lang.String.split(java.lang.String)`
2. `javax.sql.rowset.FilteredRowSet.getFilter()`
3. `java.lang.String.isEmpty()`
4. `java.lang.String.equals(java.lang.Object)`
5. `java.lang.String.trim()`
6. `java.lang.String.equalsIgnoreCase(java.lang.String)`
7. `java.lang.Object.toString()`
8. `java.lang.Object.compareTo(java.lang.Object)`

 + From response, we get: ['java.lang.String.split(java.lang.String)', 'javax.sql.rowset.FilteredRowSet.getFilter()', 'java.lang.String.isEmpty()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.trim()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.lang.Object.toString()', 'java.lang.Object.compareTo(java.lang.Object)']
------------------------------------------------------
Is the PatternSyntaxException handled or caught for java.lang.String.split(java.lang.String) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.lang.String.split(java.lang.String)
2. java.lang.String.isEmpty()
3. java.lang.String.trim()
4. java.lang.Object.toString()
5. java.lang.Object.compareTo(java.lang.Object)
6. java.sql.SQLException()
7. java.util.regex.PatternSyntaxException(java.lang.String, java.lang.String, int)
8. java.lang.String.equalsIgnoreCase(java.lang.String)

 + From response, we get: []
------------------------------------------------------
