
You're right, it's important to check if the values of the fields are valid before creating a `ThaiBuddhistDate` object. Here's an updated version of the method that checks for invalid values and throws a `DateTimeException` if any of the fields are out of range or if the day of month is invalid for the month year:

```
public static ThaiBuddhistDate getThaiBuddhistDate(int year, int month, int day) {
    try {
        return ThaiBuddhistDate.of(year, month, day);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid date values: " + e.getMessage());
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` that may be thrown by the `ThaiBuddhistDate.of()` method. If an exception is caught, it throws a new `DateTimeException` with a custom error message that includes the original exception's message.

You can call this method like this:

```
ThaiBuddhistDate thaiDate = getThaiBuddhistDate(2564, 10, 1);
```

If any of the values are out of range or if the day of month is invalid for the month year, a `DateTimeException` will be thrown with an appropriate error message.
------------------------------------------------------
