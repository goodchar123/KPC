Please write a java method that Retains only the elements in this list that are contained in the specified collection.
Here's a Java method that retains only the elements in a list that are contained in a specified collection:

```
public static <T> void retainAll(List<T> list, Collection<?> c) {
    list.retainAll(c);
}
```

This method takes in a list of type `T` and a collection of any type (`Collection<?>`). The `retainAll()` method of the list is called, which modifies the list to retain only the elements that are also contained in the specified collection. 

Here's an example of how to use this method:

```
List<String> list = new ArrayList<>(Arrays.asList("apple", "banana", "orange", "pear"));
Collection<String> c = new HashSet<>(Arrays.asList("banana", "pear", "grape"));
retainAll(list, c);
System.out.println(list); // Output: [banana, pear]
```

In this example, the `list` contains four elements: "apple", "banana", "orange", and "pear". The `c` collection contains three elements: "banana", "pear", and "grape". After calling the `retainAll()` method with `list` and `c`, the `list` is modified to only contain "banana" and "pear", which are the elements that are also in `c`.
------------------------------------------------------
Please check if the specified array is null for java.util.Arrays.asList(T...) in the code snippet you provided, otherwise throw NullPointerException.
Sure, here's an updated version of the code snippet that checks if the specified array is null before calling `Arrays.asList(T...)`:

```
public static <T> List<T> createList(T... elements) {
    if (elements == null) {
        throw new NullPointerException("Array cannot be null");
    }
    return Arrays.asList(elements);
}
```

This method takes in a variable number of elements of type `T`. It first checks if the `elements` array is null. If it is, a `NullPointerException` is thrown with a message indicating that the array cannot be null. If the array is not null, the `Arrays.asList(T...)` method is called with the `elements` array, and the resulting list is returned.

Here's an example of how to use this updated method:

```
Integer[] arr = {1, 2, 3};
List<Integer> list = createList(arr);
System.out.println(list); // Output: [1, 2, 3]

Integer[] nullArr = null;
List<Integer> nullList = createList(nullArr); // Throws NullPointerException
```

In this example, the `arr` array contains three elements: 1, 2, and 3. The `createList()` method is called with `arr`, and the resulting list is printed to the console. The `nullArr` array is null, so calling `createList()` with it throws a `NullPointerException`.
------------------------------------------------------
