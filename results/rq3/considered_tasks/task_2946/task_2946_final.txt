
Here is the updated Java method that includes the requested error checking:

```java
public void addRootModules(ModuleLayer layer, String... moduleNames) {
    Set<Module> rootModules = new HashSet<>();
    for (String moduleName : moduleNames) {
        Optional<Module> module = layer.findModule(moduleName);
        if (module.isPresent()) {
            rootModules.add(module.get());
        } else {
            throw new IllegalArgumentException("Module " + moduleName + " not found in layer");
        }
    }
    Configuration configuration = layer.configuration().resolveAndBind(ModuleFinder.of(), ModuleFinder.of(), rootModules);
    try {
        layer = layer.defineModulesWithOneLoader(configuration, ClassLoader.getSystemClassLoader());
    } catch (IllegalArgumentException e) {
        if (e.getMessage().contains("more than one parent") || !layer.configuration().parent().equals(configuration)) {
            throw new IllegalArgumentException("Invalid configuration for layer", e);
        } else {
            throw e;
        }
    } catch (LayerInstantiationException e) {
        throw new LayerInstantiationException("Failed to create layer", e);
    } catch (SecurityException e) {
        if (e.getMessage().contains("createClassLoader") || e.getMessage().contains("getClassLoader")) {
            throw new SecurityException("Permission denied", e);
        } else {
            throw e;
        }
    } catch (IllegalStateException e) {
        if (System.getProperty("java.system.class.loader") != null && e.getMessage().contains("java.system.class.loader")) {
            throw new IllegalStateException("Recursive invocation during class loader construction", e);
        } else {
            throw e;
        }
    } catch (Error e) {
        if (System.getProperty("java.system.class.loader") != null && e.getMessage().contains("java.system.class.loader")) {
            throw new Error("Failed to load system class loader", e);
        } else {
            throw e;
        }
    }
}
```

This method now includes error checking for various exceptions that may be thrown by the `defineModulesWithOneLoader` method. 

If the configuration has more than one parent or the parent of the configuration is not the configuration for this layer, an `IllegalArgumentException` is thrown with a more descriptive error message.

If the layer cannot be created for any reason specified by the `defineModulesWithOneLoader` method, a `LayerInstantiationException` is thrown with a more descriptive error message.

If the security manager denies the `createClassLoader` or `getClassLoader` permission, a `SecurityException` is thrown with a more descriptive error message.

If a security manager is present and the caller's class loader is not null and not the same as or an ancestor of the system class loader, and the caller does not have the `RuntimePermission("getClassLoader")`, a `SecurityException` is thrown with a more descriptive error message.

If the method is invoked recursively during the construction of the class loader specified by the `java.system.class.loader` property, an `IllegalStateException` is thrown with a more descriptive error message.

If the system property `java.system.class.loader` is defined but the named class could not be loaded, the provider class does not define the required constructor, or an exception is thrown by that constructor when it is invoked, an `Error` is thrown with a more descriptive error message.
------------------------------------------------------
