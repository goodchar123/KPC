
Sure, here's the updated Java method that checks if the month-of-year value is valid for `OffsetDateTime.withMonth(int)` and throws a `DateTimeException` if it's invalid:

```java
public static OffsetDateTime withMonth(OffsetDateTime dateTime, int month) {
    try {
        return dateTime.withMonth(month);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid month-of-year value: " + month, e);
    }
}
```

This method takes an `OffsetDateTime` object and an integer value representing the desired month-of-year. It then attempts to return a copy of the original `OffsetDateTime` object with the month-of-year altered to the specified value using the `withMonth` method. If the month-of-year value is invalid, a `DateTimeException` is thrown with a custom error message that includes the invalid value and the original exception.

You can call this method by passing in an `OffsetDateTime` object and the desired month-of-year value:

```java
OffsetDateTime originalDateTime = OffsetDateTime.now();
OffsetDateTime newDateTime = withMonth(originalDateTime, 13);
```

In this example, the `withMonth` method is called with the current date and time as the original `OffsetDateTime` object and the value `13` as the desired month-of-year. Since `13` is an invalid month-of-year value, a `DateTimeException` is thrown with the error message "Invalid month-of-year value: 13".
------------------------------------------------------
