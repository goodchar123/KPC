
You are correct. The `java.util.jar.JarFile.getManifest()` method can throw an `IllegalStateException` if the jar file has been closed. Here's the updated code snippet that checks for this exception:

```java
import java.io.IOException;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

public class JarManifestHelper {
    public static Manifest getJarManifest(String jarFilePath) {
        try {
            JarFile jarFile = new JarFile(jarFilePath);
            Manifest manifest = jarFile.getManifest();
            if (manifest == null) {
                // Jar file has no manifest
                jarFile.close();
                return null;
            }
            return manifest;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (IllegalStateException e) {
            e.printStackTrace();
        }
        return null;
    }
}
```

In this updated code, we first create a `JarFile` object using the path and call the `getManifest()` method on it to get the jar file manifest. If the manifest is null, we close the jar file and return null. If there is an `IOException` or `IllegalStateException`, we print the stack trace and return null.
------------------------------------------------------
