
Here's the updated Java method that includes the requested error checking:

```java
public static byte[] allocateMemory(int[] layout, int[] addresses) {
    int totalSize = 0;
    for (int size : layout) {
        totalSize += size;
    }
    byte[] memory = new byte[totalSize];
    int offset = 0;
    for (int i = 0; i < layout.length; i++) {
        int size = layout[i];
        int address = addresses[i];
        try {
            System.arraycopy(intToByteArray(address), 0, memory, offset, 4);
        } catch (IndexOutOfBoundsException e) {
            throw new IndexOutOfBoundsException("Copying would cause access of data outside array bounds.");
        } catch (ArrayStoreException e) {
            throw new ArrayStoreException("An element in the src array could not be stored into the dest array because of a type mismatch.");
        } catch (NullPointerException e) {
            throw new NullPointerException("Either src or dest is null.");
        }
        offset += 4;
        for (int j = 0; j < size - 4; j++) {
            memory[offset + j] = 0;
        }
        offset += size - 4;
    }
    return memory;
}

private static byte[] intToByteArray(int value) {
    return new byte[] {
        (byte)(value >>> 24),
        (byte)(value >>> 16),
        (byte)(value >>> 8),
        (byte)value
    };
}

public static void main(String[] args) {
    int[] layout = {8, 12};
    int[] addresses = {0x1000, 0x2000};
    byte[] memory = allocateMemory(layout, addresses);
    System.out.println(Arrays.toString(memory));
}
```

The `System.arraycopy` method is now wrapped in a try-catch block that catches `IndexOutOfBoundsException`, `ArrayStoreException`, and `NullPointerException`. If any of these exceptions are thrown, the method throws a new exception with a more descriptive error message.

Additionally, the `Integer.parseInt` method is not used in this code snippet, so there is no need to check for `NumberFormatException`.
------------------------------------------------------
