
Sure, here's the updated Java method that checks for `NullPointerException` and `IndexOutOfBoundsException`:

```java
public void readBytes(InputStream inputStream, byte[] byteArray, int offset) throws IOException {
    if (byteArray == null) {
        throw new NullPointerException("byteArray is null");
    }
    if (offset < 0 || offset > byteArray.length || byteArray.length - offset < len) {
        throw new IndexOutOfBoundsException("offset or len is invalid");
    }
    int bytesRead = 0;
    while (bytesRead < len) {
        int count = inputStream.read(byteArray, offset + bytesRead, len - bytesRead);
        if (count == -1) {
            break;
        }
        bytesRead += count;
    }
}
```

This updated method first checks if the `byteArray` parameter is `null`. If it is, a `NullPointerException` is thrown with a message indicating that `byteArray` is `null`.

Next, the method checks if the `offset` parameter is negative, greater than the length of `byteArray`, or if `len` is negative or greater than the remaining space in the byte array after the offset. If any of these conditions is true, an `IndexOutOfBoundsException` is thrown with a message indicating that `offset` or `len` is invalid.

If neither of these exceptions is thrown, the method proceeds to read bytes from the input stream into the byte array, starting at the given offset. The method reads bytes in chunks of up to `len - bytesRead` bytes at a time, until the entire length of bytes has been read or the end of the input stream has been reached.

If the end of the input stream is reached before the entire length of bytes has been read, the method will exit early. If an error occurs while reading from the input stream, an `IOException` will be thrown.
------------------------------------------------------
