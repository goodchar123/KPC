{"loop_id": 0, "unhandled_api_list": ["javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)", "javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)", "javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String)", "javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)", "javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)", "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)", "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)", "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)", "javax.imageio.ImageWriter.endWriteSequence()", "javax.imageio.ImageWriter.endWriteSequence()", "javax.imageio.ImageWriter.endWriteSequence()"], "num_of_unhandled_api": 11, "unhandled_exception_list": ["Please check if formatName is null. for javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if bufferedImageType is not one of the standard types, or is equal to TYPE_CUSTOM. for javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if formatName is null or is not one of the names returned by getMetadataFormatNames. for javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if output is null. for javax.imageio.ImageIO.createImageOutputStream(java.lang.Object) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if a cache file is needed but cannot be created. for javax.imageio.ImageIO.createImageOutputStream(java.lang.Object) in the code snippet you provided, otherwise throw IOException.", "Please check if the output has not been set. for javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata) in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if canWriteSequence returns false. for javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if an error occurs writing the stream metadata. for javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata) in the code snippet you provided, otherwise throw IOException.", "Please check if the output has not been set, or prepareWriteSequence has not been called. for javax.imageio.ImageWriter.endWriteSequence() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if canWriteSequence returns false. for javax.imageio.ImageWriter.endWriteSequence() in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if an error occurs during writing. for javax.imageio.ImageWriter.endWriteSequence() in the code snippet you provided, otherwise throw IOException."], "num_of_unhandled_exception": 11}
{"loop_id": 1, "unhandled_api_list": ["javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)", "javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String)", "javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)", "javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)", "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)", "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)", "javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata)", "javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)", "javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)", "javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)", "javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam)", "javax.imageio.ImageWriter.endWriteSequence()", "javax.imageio.ImageWriter.endWriteSequence()", "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)"], "num_of_unhandled_api": 14, "unhandled_exception_list": ["Please check if bufferedImageType is not one of the standard types, or is equal to TYPE_CUSTOM. for javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if formatName is null or is not one of the names returned by getMetadataFormatNames. for javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if output is null. for javax.imageio.ImageIO.createImageOutputStream(java.lang.Object) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if a cache file is needed but cannot be created. for javax.imageio.ImageIO.createImageOutputStream(java.lang.Object) in the code snippet you provided, otherwise throw IOException.", "Please check if the output has not been set. for javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata) in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if canWriteSequence returns false. for javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if an error occurs writing the stream metadata. for javax.imageio.ImageWriter.prepareWriteSequence(javax.imageio.metadata.IIOMetadata) in the code snippet you provided, otherwise throw IOException.", "Please check if the output has not been set, or prepareWriteSequence has not been called. for javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam) in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if canWriteSequence returns false. for javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if image is null. for javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if image contains a Raster and canWriteRasters returns false. for javax.imageio.ImageWriter.writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if the output has not been set, or prepareWriteSequence has not been called. for javax.imageio.ImageWriter.endWriteSequence() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if canWriteSequence returns false. for javax.imageio.ImageWriter.endWriteSequence() in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if any parameter is null. for javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 14}
{"loop_id": 2, "unhandled_api_list": ["javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)", "javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String)", "javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if bufferedImageType is not one of the standard types, or is equal to TYPE_CUSTOM. for javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if formatName is null or is not one of the names returned by getMetadataFormatNames. for javax.imageio.metadata.IIOMetadata.getAsTree(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if output is null. for javax.imageio.ImageIO.createImageOutputStream(java.lang.Object) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 3}
{"loop_id": 3, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
