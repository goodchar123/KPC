Please write a java method that Obtains an instance of LocalDateTime from a temporal object.
Sure, here's an example Java method that obtains an instance of `LocalDateTime` from a temporal object:

```java
import java.time.LocalDateTime;
import java.time.temporal.TemporalAccessor;

public class DateTimeUtils {
    public static LocalDateTime getLocalDateTime(TemporalAccessor temporal) {
        return LocalDateTime.from(temporal);
    }
}
```

This method takes a `TemporalAccessor` object as a parameter, which is a generic interface for date-time objects that can be converted to other types. The method then uses the `LocalDateTime.from()` method to obtain an instance of `LocalDateTime` from the temporal object.

You can call this method like this:

```java
import java.time.LocalDate;
import java.time.LocalDateTime;

public class Main {
    public static void main(String[] args) {
        LocalDate date = LocalDate.of(2021, 10, 31);
        LocalDateTime dateTime = DateTimeUtils.getLocalDateTime(date);
        System.out.println(dateTime);
    }
}
```

This will output `2021-10-31T00:00`, which is a `LocalDateTime` object representing midnight on October 31st, 2021.
------------------------------------------------------
Please check if unable to convert to a LocalDateTime for java.time.LocalDateTime.from(java.time.temporal.TemporalAccessor) in the code snippet you provided, otherwise throw DateTimeException.
Please check if the value of any field is out of range,  or if the day of month is invalid for the month year for java.time.LocalDate.of(int,int,int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's an updated version of the `getLocalDateTime()` method that checks for invalid values and throws a `DateTimeException` if necessary:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.TemporalAccessor;

public class DateTimeUtils {
    public static LocalDateTime getLocalDateTime(TemporalAccessor temporal) {
        try {
            return LocalDateTime.from(temporal);
        } catch (DateTimeException e) {
            throw new DateTimeException("Unable to convert to LocalDateTime", e);
        }
    }

    public static LocalDate getLocalDate(int year, int month, int dayOfMonth) {
        try {
            return LocalDate.of(year, month, dayOfMonth);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date values", e);
        }
    }
}
```

The `getLocalDateTime()` method now catches any `DateTimeException` that may be thrown by the `LocalDateTime.from()` method and re-throws it with a more descriptive error message.

Similarly, the `getLocalDate()` method now catches any `DateTimeException` that may be thrown by the `LocalDate.of()` method and re-throws it with a more descriptive error message.

You can call these methods like this:

```java
import java.time.LocalDate;
import java.time.LocalDateTime;

public class Main {
    public static void main(String[] args) {
        try {
            LocalDate date = DateTimeUtils.getLocalDate(2021, 2, 29);
            LocalDateTime dateTime = DateTimeUtils.getLocalDateTime(date);
            System.out.println(dateTime);
        } catch (DateTimeException e) {
            System.out.println(e.getMessage());
        }
    }
}
```

This will output `Invalid date values`, since February 29th, 2021 is an invalid date.
------------------------------------------------------
