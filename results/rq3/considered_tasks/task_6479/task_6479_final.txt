
Sure, here's an updated version of the `getLocalDateTime()` method that checks for invalid values and throws a `DateTimeException` if necessary:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.TemporalAccessor;

public class DateTimeUtils {
    public static LocalDateTime getLocalDateTime(TemporalAccessor temporal) {
        try {
            return LocalDateTime.from(temporal);
        } catch (DateTimeException e) {
            throw new DateTimeException("Unable to convert to LocalDateTime", e);
        }
    }

    public static LocalDate getLocalDate(int year, int month, int dayOfMonth) {
        try {
            return LocalDate.of(year, month, dayOfMonth);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date values", e);
        }
    }
}
```

The `getLocalDateTime()` method now catches any `DateTimeException` that may be thrown by the `LocalDateTime.from()` method and re-throws it with a more descriptive error message.

Similarly, the `getLocalDate()` method now catches any `DateTimeException` that may be thrown by the `LocalDate.of()` method and re-throws it with a more descriptive error message.

You can call these methods like this:

```java
import java.time.LocalDate;
import java.time.LocalDateTime;

public class Main {
    public static void main(String[] args) {
        try {
            LocalDate date = DateTimeUtils.getLocalDate(2021, 2, 29);
            LocalDateTime dateTime = DateTimeUtils.getLocalDateTime(date);
            System.out.println(dateTime);
        } catch (DateTimeException e) {
            System.out.println(e.getMessage());
        }
    }
}
```

This will output `Invalid date values`, since February 29th, 2021 is an invalid date.
------------------------------------------------------
