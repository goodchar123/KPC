Please write a java method that Returns a Calendar built from the parameters set by the setter methods.
Sure, here's an example Java method that creates a Calendar object based on the parameters set by the setter methods:

```
import java.util.Calendar;

public class CalendarBuilder {
    private int year;
    private int month;
    private int dayOfMonth;
    private int hourOfDay;
    private int minute;
    private int second;

    public void setYear(int year) {
        this.year = year;
    }

    public void setMonth(int month) {
        this.month = month;
    }

    public void setDayOfMonth(int dayOfMonth) {
        this.dayOfMonth = dayOfMonth;
    }

    public void setHourOfDay(int hourOfDay) {
        this.hourOfDay = hourOfDay;
    }

    public void setMinute(int minute) {
        this.minute = minute;
    }

    public void setSecond(int second) {
        this.second = second;
    }

    public Calendar buildCalendar() {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, year);
        calendar.set(Calendar.MONTH, month);
        calendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
        calendar.set(Calendar.MINUTE, minute);
        calendar.set(Calendar.SECOND, second);
        return calendar;
    }
}
```

This class has setter methods for each of the fields that can be set on a Calendar object (year, month, day of month, hour of day, minute, and second). It also has a `buildCalendar()` method that creates a new Calendar object and sets its fields based on the values set by the setter methods. 

You can use this class like this:

```
CalendarBuilder builder = new CalendarBuilder();
builder.setYear(2021);
builder.setMonth(Calendar.JANUARY);
builder.setDayOfMonth(1);
builder.setHourOfDay(0);
builder.setMinute(0);
builder.setSecond(0);
Calendar calendar = builder.buildCalendar();
```

This will create a new Calendar object set to January 1, 2021 at midnight.
------------------------------------------------------
Please check if the specified field is out of range             (field < 0 || field >= FIELD_COUNT). in non lenient mode. for java.util.Calendar.set(int,int) in the code snippet you provided, otherwise throw ArrayIndexOutOfBoundsException.
Sure, here's the updated `set` method that checks if the specified field is out of range in non-lenient mode and throws an `ArrayIndexOutOfBoundsException` if it is:

```
public void set(int field, int value) {
    if (isLenient() || (value >= getMinimum(field) && value <= getMaximum(field))) {
        fields[field] = value;
        isSet[field] = true;
        isTimeSet = false;
    } else {
        if (field < 0 || field >= FIELD_COUNT) {
            throw new ArrayIndexOutOfBoundsException(field);
        } else {
            throw new IllegalArgumentException("Value " + value + " is out of range for field " + field);
        }
    }
}
```

This method first checks if the calendar is in lenient mode or if the specified value is within the valid range for the specified field. If either of these conditions is true, the method sets the field value and updates the `isSet` and `isTimeSet` flags accordingly.

If the calendar is not in lenient mode and the specified value is out of range for the specified field, the method checks if the field index is out of range and throws an `ArrayIndexOutOfBoundsException` if it is. Otherwise, it throws an `IllegalArgumentException` with a message indicating that the specified value is out of range for the specified field.
------------------------------------------------------
