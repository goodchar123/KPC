
Sure, here's an updated version of the `subtractNanos()` method that checks if the result exceeds the supported date range for `OffsetDateTime.minusNanos(long)` and throws a `DateTimeException` if it does:

```java
public OffsetDateTime subtractNanos(OffsetDateTime offsetDateTime, long nanos) {
    OffsetDateTime result = offsetDateTime.minusNanos(nanos);
    if (result.isBefore(MIN) || result.isAfter(MAX)) {
        throw new DateTimeException("Result exceeds supported date range");
    }
    return result;
}
```

This method first calls `minusNanos()` on the `OffsetDateTime` object to get the result of subtracting the specified number of nanoseconds. It then checks if the result is before the minimum supported date or after the maximum supported date for `OffsetDateTime.minusNanos(long)` using the `isBefore()` and `isAfter()` methods, respectively. If the result is outside the supported range, it throws a `DateTimeException` with an appropriate message. Otherwise, it returns the result.

You can call this method like this:

```java
OffsetDateTime originalDateTime = OffsetDateTime.now();
OffsetDateTime newDateTime = subtractNanos(originalDateTime, 1000000000L);
```

If the result of subtracting one billion nanoseconds from the current date and time exceeds the supported range, a `DateTimeException` will be thrown.
------------------------------------------------------
