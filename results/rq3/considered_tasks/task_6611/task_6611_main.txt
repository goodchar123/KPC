Please write a java method that Queries this year-month using the specified query.
Sure, here's an example Java method that queries a year-month using a specified query:

```java
import java.time.YearMonth;

public class YearMonthQuery {
    public static void main(String[] args) {
        YearMonth yearMonth = YearMonth.of(2021, 10); // create a YearMonth object for October 2021
        String query = "SELECT * FROM events WHERE year = " + yearMonth.getYear() + " AND month = " + yearMonth.getMonthValue();
        System.out.println("Query: " + query);
        // execute the query using your preferred database library
    }
}
```

This method creates a `YearMonth` object for October 2021, and then constructs a SQL query string that selects all events from a hypothetical `events` table where the year is 2021 and the month is 10 (i.e. October). You can replace this query with your own query that fits your specific use case.
------------------------------------------------------
Please check if either field value is invalid for java.time.YearMonth.of(int,int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's an updated version of the code snippet that checks if either field value is invalid for `java.time.YearMonth.of(int,int)`, and throws a `DateTimeException` if either value is invalid:

```java
import java.time.DateTimeException;
import java.time.YearMonth;

public class YearMonthQuery {
    public static void main(String[] args) {
        int year = 2021;
        int month = 13; // invalid month value
        try {
            YearMonth yearMonth = YearMonth.of(year, month);
            String query = "SELECT * FROM events WHERE year = " + yearMonth.getYear() + " AND month = " + yearMonth.getMonthValue();
            System.out.println("Query: " + query);
            // execute the query using your preferred database library
        } catch (DateTimeException e) {
            System.out.println("Invalid year or month value: " + e.getMessage());
            // handle the exception as appropriate for your use case
        }
    }
}
```

In this version of the code, the `year` and `month` variables are set to 2021 and 13, respectively, which is an invalid month value. The `YearMonth.of(year, month)` method call will throw a `DateTimeException`, which is caught in a try-catch block. If the exception is caught, the code prints an error message indicating that the year or month value is invalid. You can replace the error message and exception handling code with your own error handling logic as appropriate for your use case.
------------------------------------------------------
