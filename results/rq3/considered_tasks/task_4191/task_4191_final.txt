
Sure, here's an updated version of the `createDuration` method that checks for numeric overflow and throws an `ArithmeticException` if it occurs:

```java
import java.time.Duration;

public class DurationHelper {
    public static Duration createDuration(boolean isPositive, long years, long months, long days, long hours, long minutes, long seconds) {
        // Create a new Duration object using the specified parameters
        Duration duration = Duration.ZERO;
        try {
            duration = duration.plusYears(years)
                    .plusMonths(months)
                    .plusDays(days)
                    .plusHours(hours)
                    .plusMinutes(minutes)
                    .plusSeconds(seconds);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow occurred while creating duration");
        }
        
        // If the duration should be negative, negate it
        if (!isPositive) {
            try {
                duration = duration.negated();
            } catch (ArithmeticException e) {
                throw new ArithmeticException("Numeric overflow occurred while negating duration");
            }
        }
        
        return duration;
    }
}
```

This version of the method uses a `try-catch` block to catch any `ArithmeticException` that might occur when adding the years, months, days, hours, minutes, or seconds to the `Duration` object. If an exception is caught, the method throws a new `ArithmeticException` with a message indicating that numeric overflow occurred.

The method also checks for numeric overflow when negating the duration, using another `try-catch` block and throwing a new `ArithmeticException` if an exception is caught.

With these checks in place, you can be sure that the method will not create or return a `Duration` object that overflows the maximum value of a `long`.
------------------------------------------------------
