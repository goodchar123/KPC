
Sure, here's an updated version of the method that includes the requested checks and exceptions:

```java
public static <K, V> boolean removeIfMappedToValue(Map<K, V> map, K key, V value) {
    Objects.requireNonNull(map, "Map cannot be null");
    Objects.requireNonNull(key, "Key cannot be null");
    if (!map.containsKey(key)) {
        return false;
    }
    V currentValue = map.get(key);
    if (!Objects.equals(currentValue, value)) {
        return false;
    }
    try {
        map.remove(key);
        return true;
    } catch (UnsupportedOperationException e) {
        throw new UnsupportedOperationException("Remove operation not supported by this map", e);
    } catch (ClassCastException e) {
        throw new ClassCastException("Key is of inappropriate type for this map", e);
    } catch (NullPointerException e) {
        throw new NullPointerException("Specified key is null and this map does not permit null keys", e);
    }
}
```

This updated method first checks if the `map` and `key` parameters are not null, and throws a `NullPointerException` if either of them is null. It then checks if the map contains the specified key, and returns `false` if it does not. It also checks if the value associated with the key is equal to the specified value, and returns `false` if it is not.

If the key is present and the value is equal to the specified value, the method attempts to remove the entry for the key from the map. If the remove operation is not supported by the map, it throws an `UnsupportedOperationException`. If the key is of an inappropriate type for the map, it throws a `ClassCastException`. If the specified key is null and the map does not permit null keys, it throws a `NullPointerException`.
------------------------------------------------------
