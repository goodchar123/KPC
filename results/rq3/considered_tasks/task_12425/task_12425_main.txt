Please write a java method that Produces a constant method handle of the requested return type which returns the default value for that type every time it is invoked.
Here's a Java method that produces a constant method handle of the requested return type which returns the default value for that type every time it is invoked:

```java
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public class ConstantMethodHandle {
    public static MethodHandle getDefaultConstantMethodHandle(Class<?> returnType) throws NoSuchMethodException, IllegalAccessException {
        MethodType methodType = MethodType.methodType(returnType);
        Object defaultValue = getDefaultValue(returnType);
        MethodHandle constantMethodHandle = MethodHandles.constant(returnType, defaultValue);
        return constantMethodHandle.asType(methodType);
    }

    private static Object getDefaultValue(Class<?> returnType) {
        if (returnType == boolean.class) {
            return false;
        } else if (returnType == byte.class) {
            return (byte) 0;
        } else if (returnType == short.class) {
            return (short) 0;
        } else if (returnType == int.class) {
            return 0;
        } else if (returnType == long.class) {
            return 0L;
        } else if (returnType == float.class) {
            return 0.0f;
        } else if (returnType == double.class) {
            return 0.0d;
        } else {
            return null;
        }
    }
}
```

This method takes a `Class<?>` object representing the return type of the desired method handle, and returns a `MethodHandle` object that returns the default value for that type every time it is invoked. The `getDefaultValue` method is a helper method that returns the default value for the given type. The `MethodHandles.constant` method is used to create a constant method handle with the default value, and the `asType` method is used to convert the method handle to the desired return type.
------------------------------------------------------
Please check if newType is a null reference for java.lang.invoke.MethodHandle.asType(java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw NullPointerException.
Please check if the conversion cannot be made for java.lang.invoke.MethodHandle.asType(java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw WrongMethodTypeException.
Sure, here's the updated code snippet that checks for `null` and `WrongMethodTypeException`:

```java
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public class ConstantMethodHandle {
    public static MethodHandle getDefaultConstantMethodHandle(Class<?> returnType) throws NoSuchMethodException, IllegalAccessException {
        MethodType methodType = MethodType.methodType(returnType);
        Object defaultValue = getDefaultValue(returnType);
        MethodHandle constantMethodHandle = MethodHandles.constant(returnType, defaultValue);
        try {
            return constantMethodHandle.asType(methodType);
        } catch (NullPointerException | WrongMethodTypeException e) {
            throw e;
        }
    }

    private static Object getDefaultValue(Class<?> returnType) {
        if (returnType == boolean.class) {
            return false;
        } else if (returnType == byte.class) {
            return (byte) 0;
        } else if (returnType == short.class) {
            return (short) 0;
        } else if (returnType == int.class) {
            return 0;
        } else if (returnType == long.class) {
            return 0L;
        } else if (returnType == float.class) {
            return 0.0f;
        } else if (returnType == double.class) {
            return 0.0d;
        } else {
            return null;
        }
    }
}
```

Now, the `asType` method call is wrapped in a try-catch block that catches `NullPointerException` and `WrongMethodTypeException`. If either of these exceptions is thrown, it is re-thrown to the caller.
------------------------------------------------------
