
Sure, here's an updated version of the `updateDate()` method that checks for a query timeout and attempts to cancel the statement if the timeout has been exceeded:

```java
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLTimeoutException;

public class UpdateDateColumn {
    
    public void updateDate(Connection conn, String tableName, String columnName, int id, Date dateValue, int timeoutSeconds) throws SQLException {
        String sql = "UPDATE " + tableName + " SET " + columnName + " = ? WHERE id = ?";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setQueryTimeout(timeoutSeconds);
        pstmt.setDate(1, dateValue);
        pstmt.setInt(2, id);
        try {
            pstmt.executeUpdate();
        } catch (SQLTimeoutException e) {
            pstmt.cancel();
            throw e;
        }
    }
}
```

This updated method takes an additional parameter `timeoutSeconds` which specifies the maximum number of seconds to wait for the update to complete before timing out. It sets the query timeout using the `setQueryTimeout()` method on the prepared statement.

After executing the update, it catches any `SQLTimeoutException` that may be thrown and attempts to cancel the statement using the `cancel()` method. If the statement cannot be cancelled, the exception is re-thrown to the calling code.
------------------------------------------------------
