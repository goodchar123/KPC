
Sure, here's an updated version of the Java method that includes the requested checks:

```java
public static void applyPattern(Format format, String pattern) {
    if (format instanceof DecimalFormat) {
        if (pattern == null) {
            throw new NullPointerException("Pattern cannot be null");
        }
        try {
            ((DecimalFormat) format).applyPattern(pattern);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern: " + pattern, e);
        }
    } else if (format instanceof SimpleDateFormat) {
        if (pattern == null) {
            throw new NullPointerException("Pattern cannot be null");
        }
        try {
            ((SimpleDateFormat) format).applyPattern(pattern);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern: " + pattern, e);
        }
    } else {
        throw new IllegalArgumentException("Unsupported format type: " + format.getClass().getName());
    }
}
```

This updated method includes the following checks:

- For `DecimalFormat`, it checks if the pattern is null and throws a `NullPointerException` if it is.
- For `DecimalFormat`, it also checks if the pattern is invalid and throws an `IllegalArgumentException` with a message that includes the invalid pattern and the original exception.
- For `SimpleDateFormat`, it checks if the pattern is null and throws a `NullPointerException` if it is.
- For `SimpleDateFormat`, it also checks if the pattern is invalid and throws an `IllegalArgumentException` with a message that includes the invalid pattern and the original exception.
------------------------------------------------------
