{"loop_id": 0, "unhandled_api_list": ["java.sql.PreparedStatement.setDouble(int,double)", "java.sql.PreparedStatement.executeQuery()", "java.sql.PreparedStatement.executeQuery()", "java.sql.ResultSet.getDouble(int)", "java.sql.ResultSet.next()", "java.sql.ResultSet.close()"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.setDouble(int,double) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs; this method is called on a closed  PreparedStatement or the SQL            statement does not return a ResultSet object for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLException.", "Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if the columnIndex is not valid; if a database access error occurs or this method is            called on a closed result set for java.sql.ResultSet.getDouble(int) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs for java.sql.ResultSet.close() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 6}
{"loop_id": 1, "unhandled_api_list": ["java.sql.PreparedStatement.executeQuery()"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException."], "num_of_unhandled_exception": 1}
{"loop_id": 2, "unhandled_api_list": ["java.sql.PreparedStatement.executeQuery()", "java.sql.Statement.setQueryTimeout(int)", "java.sql.Statement.getQueryTimeout()"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException.", "Please check if a database access error occurs, this method is called on a closed Statement            or the condition seconds >= 0 is not satisfied for java.sql.Statement.setQueryTimeout(int) in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is called on a closed Statement for java.sql.Statement.getQueryTimeout() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 3}
{"loop_id": 3, "unhandled_api_list": ["java.sql.PreparedStatement.executeQuery()"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check when the driver has determined that the timeout value that was specified by the setQueryTimeout method has been exceeded and has at least attempted to cancel the currently running Statement for java.sql.PreparedStatement.executeQuery() in the code snippet you provided, otherwise throw SQLTimeoutException."], "num_of_unhandled_exception": 1}
{"loop_id": 4, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
