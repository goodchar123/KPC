Please write a java method that Evaluates an XPath expression string and returns a result of the specified type if possible.
Sure, here's an example Java method that evaluates an XPath expression string and returns a result of the specified type if possible:

```java
import javax.xml.xpath.*;
import org.w3c.dom.*;

public class XPathEvaluator {
    
    public static <T> T evaluateXPath(String xpathExpression, Object source, QName returnType) throws XPathExpressionException {
        XPathFactory xpathFactory = XPathFactory.newInstance();
        XPath xpath = xpathFactory.newXPath();
        XPathExpression expr = xpath.compile(xpathExpression);
        Object result = expr.evaluate(source, returnType);
        return (T) result;
    }
    
    public static void main(String[] args) throws Exception {
        String xml = "<root><person><name>John</name><age>30</age></person></root>";
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(new InputSource(new StringReader(xml)));
        String xpathExpression = "/root/person/name/text()";
        String name = evaluateXPath(xpathExpression, doc, XPathConstants.STRING);
        System.out.println("Name: " + name);
        xpathExpression = "/root/person/age/text()";
        int age = evaluateXPath(xpathExpression, doc, XPathConstants.NUMBER);
        System.out.println("Age: " + age);
    }
}
```

In this example, the `evaluateXPath` method takes three parameters: the XPath expression string, the source object (which can be a `Document`, `Node`, `InputSource`, or `String`), and the return type (`XPathConstants.STRING`, `XPathConstants.NUMBER`, `XPathConstants.BOOLEAN`, `XPathConstants.NODE`, or `XPathConstants.NODESET`). The method uses the `XPathFactory` and `XPath` classes to compile and evaluate the XPath expression, and returns the result as the specified type. 

In the `main` method, we create a sample XML document and use the `evaluateXPath` method to extract the name and age of a person from the document using XPath expressions. The `evaluateXPath` method returns the name as a `String` and the age as an `int`.
------------------------------------------------------
Please check When there is a failure in creating an   XPathFactory for the default object model. for javax.xml.xpath.XPathFactory.newInstance() in the code snippet you provided, otherwise throw RuntimeException.
Please check If expression is null. for javax.xml.xpath.XPath.compile(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.
Please check If returnType is not one of the types defined in XPathConstants. for javax.xml.xpath.XPathExpression.evaluate(java.lang.Object,javax.xml.namespace.QName) in the code snippet you provided, otherwise throw IllegalArgumentException.
Please check If returnType is null. for javax.xml.xpath.XPathExpression.evaluate(java.lang.Object,javax.xml.namespace.QName) in the code snippet you provided, otherwise throw NullPointerException.
Please check in case of service configuration error or if the implementation is not available or cannot be instantiated. for javax.xml.parsers.DocumentBuilderFactory.newInstance() in the code snippet you provided, otherwise throw FactoryConfigurationError.
Please check if a DocumentBuilder   cannot be created which satisfies the configuration requested. for javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder() in the code snippet you provided, otherwise throw ParserConfigurationException.
Please check When is is null for javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's an updated version of the code snippet that includes the error checking and exception handling you requested:

```java
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import org.xml.sax.InputSource;

public class XPathEvaluator {
    
    public static <T> T evaluateXPath(String xpathExpression, Object source, QName returnType) throws XPathExpressionException {
        try {
            XPathFactory xpathFactory = XPathFactory.newInstance();
            XPath xpath = xpathFactory.newXPath();
            if (xpathExpression == null) {
                throw new NullPointerException("XPath expression cannot be null");
            }
            XPathExpression expr = xpath.compile(xpathExpression);
            if (returnType == null || !isValidReturnType(returnType)) {
                throw new IllegalArgumentException("Invalid return type specified");
            }
            Object result = expr.evaluate(source, returnType);
            return (T) result;
        } catch (XPathFactoryConfigurationException e) {
            throw new RuntimeException("Failed to create XPathFactory", e);
        }
    }
    
    private static boolean isValidReturnType(QName returnType) {
        return returnType.equals(XPathConstants.STRING) ||
               returnType.equals(XPathConstants.NUMBER) ||
               returnType.equals(XPathConstants.BOOLEAN) ||
               returnType.equals(XPathConstants.NODE) ||
               returnType.equals(XPathConstants.NODESET);
    }
    
    public static void main(String[] args) throws Exception {
        try {
            String xml = "<root><person><name>John</name><age>30</age></person></root>";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            try {
                DocumentBuilder builder = factory.newDocumentBuilder();
                if (xml == null) {
                    throw new IllegalArgumentException("XML string cannot be null");
                }
                Document doc = builder.parse(new InputSource(new StringReader(xml)));
                String xpathExpression = "/root/person/name/text()";
                String name = evaluateXPath(xpathExpression, doc, XPathConstants.STRING);
                System.out.println("Name: " + name);
                xpathExpression = "/root/person/age/text()";
                int age = evaluateXPath(xpathExpression, doc, XPathConstants.NUMBER);
                System.out.println("Age: " + age);
            } catch (ParserConfigurationException e) {
                throw new RuntimeException("Failed to create DocumentBuilder", e);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException("Invalid argument", e);
            } catch (NullPointerException e) {
                throw new RuntimeException("Null argument", e);
            } catch (Exception e) {
                throw new RuntimeException("Error parsing XML", e);
            }
        } catch (FactoryConfigurationError e) {
            throw new RuntimeException("Failed to create DocumentBuilderFactory", e);
        }
    }
}
```

In this updated version, we've added error checking and exception handling for the various potential issues that could arise when using the `XPathFactory`, `XPath`, and `DocumentBuilder` classes. We've also added a helper method `isValidReturnType` to check if the specified return type is valid. If any of these checks fail, we throw an appropriate exception with a descriptive error message.
------------------------------------------------------
