
Here's the updated Java method that includes the requested checks:

```java
public static boolean hasNextByte(Scanner scanner, int radix) {
    if (scanner == null) {
        throw new IllegalArgumentException("Scanner cannot be null");
    }
    if (scanner.ioException() != null) {
        throw new IllegalStateException("Scanner is closed");
    }
    if (!scanner.hasNext()) {
        throw new NoSuchElementException("Input is exhausted");
    }
    try {
        byte b = scanner.nextByte(radix);
        if (scanner.ioException() != null) {
            throw new IllegalStateException("Scanner is closed");
        }
        return true;
    } catch (InputMismatchException e) {
        return false;
    } catch (IllegalArgumentException e) {
        throw new IllegalArgumentException("Radix is out of range");
    }
}
```

This method now checks for the following:

- If the scanner is null, it throws an IllegalArgumentException.
- If the scanner has an IOException, it means it is closed, so it throws an IllegalStateException.
- If there is no next token in the scanner's input, it throws a NoSuchElementException.
- If the next token cannot be parsed as a byte value in the specified radix, it returns false.
- If the radix is out of range, it throws an IllegalArgumentException.

If all checks pass, it returns true.
------------------------------------------------------
