
Sure, here's the updated Java method that checks for numeric overflow and throws `ArithmeticException` if it occurs, and also checks if a value for the field cannot be obtained and throws `DateTimeException` in that case:

```java
public static long getEraFieldValue(TemporalAccessor temporal, TemporalField field) {
    if (temporal.isSupported(field)) {
        try {
            return temporal.getLong(field);
        } catch (DateTimeException e) {
            throw e;
        } catch (ArithmeticException e) {
            throw e;
        } catch (RuntimeException e) {
            throw new DateTimeException("Error getting value for field: " + field, e);
        }
    } else {
        throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
    }
}
```

This updated method uses a try-catch block to catch any `DateTimeException` or `ArithmeticException` that may occur when getting the value of the field using `getLong()`. If either of these exceptions occur, the method re-throws them. 

If any other `RuntimeException` occurs, the method throws a `DateTimeException` with a message indicating the field for which the value could not be obtained.

You can call this method like this:

```java
// create an era object
Era era = IsoEra.CE;

// get the value of the era field ChronoField.ERA
long eraValue = getEraFieldValue(era, ChronoField.ERA);

System.out.println("Era value: " + eraValue);
```

This will output:

```
Era value: 1
```
------------------------------------------------------
