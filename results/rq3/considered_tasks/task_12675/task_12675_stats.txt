{"loop_id": 0, "unhandled_api_list": ["java.util.Date.from(java.time.Instant)", "java.util.Date.from(java.time.Instant)", "java.time.LocalDate.minus(java.time.temporal.TemporalAmount)", "java.time.LocalDate.minus(java.time.temporal.TemporalAmount)", "java.time.ZoneId.systemDefault()", "java.time.ZoneId.systemDefault()", "java.time.Instant.atZone(java.time.ZoneId)"], "num_of_unhandled_api": 7, "unhandled_exception_list": ["Please check if instant is null. for java.util.Date.from(java.time.Instant) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the instant is too large to  represent as a Date for java.util.Date.from(java.time.Instant) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if the subtraction cannot be made for java.time.LocalDate.minus(java.time.temporal.TemporalAmount) in the code snippet you provided, otherwise throw DateTimeException.", "Please check if numeric overflow occurs for java.time.LocalDate.minus(java.time.temporal.TemporalAmount) in the code snippet you provided, otherwise throw ArithmeticException.", "Please check if the converted zone ID has an invalid format for java.time.ZoneId.systemDefault() in the code snippet you provided, otherwise throw DateTimeException.", "Please check if the converted zone region ID cannot be found for java.time.ZoneId.systemDefault() in the code snippet you provided, otherwise throw ZoneRulesException.", "Please check if the result exceeds the supported range for java.time.Instant.atZone(java.time.ZoneId) in the code snippet you provided, otherwise throw DateTimeException."], "num_of_unhandled_exception": 7}
{"loop_id": 1, "unhandled_api_list": ["java.util.Date.from(java.time.Instant)", "java.time.Instant.isAfter(java.time.Instant)", "java.time.Instant.isBefore(java.time.Instant)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if instant is null. for java.util.Date.from(java.time.Instant) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if otherInstant is null for java.time.Instant.isAfter(java.time.Instant) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if otherInstant is null for java.time.Instant.isBefore(java.time.Instant) in the code snippet you provided, otherwise throw NullPointerException."], "num_of_unhandled_exception": 3}
{"loop_id": 2, "unhandled_api_list": ["java.util.Date.from(java.time.Instant)", "java.time.ZoneId.systemDefault()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if instant is null. for java.util.Date.from(java.time.Instant) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the converted zone ID has an invalid format for java.time.ZoneId.systemDefault() in the code snippet you provided, otherwise throw DateTimeException."], "num_of_unhandled_exception": 2}
{"loop_id": 3, "unhandled_api_list": ["java.util.Date.from(java.time.Instant)", "java.time.ZoneId.systemDefault()", "java.time.ZoneId.systemDefault()"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if instant is null. for java.util.Date.from(java.time.Instant) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the converted zone ID has an invalid format for java.time.ZoneId.systemDefault() in the code snippet you provided, otherwise throw DateTimeException.", "Please check if the converted zone region ID cannot be found for java.time.ZoneId.systemDefault() in the code snippet you provided, otherwise throw ZoneRulesException."], "num_of_unhandled_exception": 3}
{"loop_id": 4, "unhandled_api_list": ["java.time.ZoneId.systemDefault()"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if the converted zone region ID cannot be found for java.time.ZoneId.systemDefault() in the code snippet you provided, otherwise throw ZoneRulesException."], "num_of_unhandled_exception": 1}
{"loop_id": 5, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
