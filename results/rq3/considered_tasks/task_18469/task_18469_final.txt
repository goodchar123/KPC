
Sure, here's an updated version of the `parseCounterReset` method that checks for invalid regular expression syntax and throws a `PatternSyntaxException` if necessary:

```java
import java.util.regex.PatternSyntaxException;

public static void parseCounterReset(String counterReset) throws PatternSyntaxException {
    try {
        String[] parts = counterReset.split("\\s+");
        String counterName = parts[0];
        int initialValue = 0;
        if (parts.length > 1) {
            initialValue = Integer.parseInt(parts[1]);
        }
        System.out.println("Counter name: " + counterName);
        System.out.println("Initial value: " + initialValue);
    } catch (NumberFormatException e) {
        System.err.println("Invalid counter-reset value: " + counterReset);
    } catch (PatternSyntaxException e) {
        throw e;
    }
}
```

Now, if you call `parseCounterReset` with an invalid regular expression syntax, it will throw a `PatternSyntaxException`:

```java
try {
    parseCounterReset("my-counter +3");
} catch (PatternSyntaxException e) {
    System.err.println("Invalid regular expression syntax: " + e.getMessage());
}
```

This will output:

```
Invalid regular expression syntax: Dangling meta character '+' near index 10
my-counter +3
          ^
```
------------------------------------------------------
