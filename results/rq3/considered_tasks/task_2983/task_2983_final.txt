
Sure, here's an updated version of the `writeToFile` method that checks for I/O errors when writing to the output stream:

```java
import java.io.*;

public class FileHelper {
    public static OutputStream getOutputStream(File file) throws IOException {
        return new FileOutputStream(file);
    }
    
    public static void writeToFile(File file, String data) throws IOException {
        OutputStream outputStream = null;
        try {
            outputStream = getOutputStream(file);
            outputStream.write(data.getBytes());
        } catch (IOException e) {
            throw e;
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                    throw e;
                }
            }
        }
    }
}
```

In this version of the code, we catch any `IOException` that is thrown by the `write` method of the `OutputStream` class, and re-throw it so that the calling code can handle the error. This ensures that any errors that occur during the write operation are properly handled.

Note that the `close` method of the `OutputStream` class can also throw an `IOException`, so we still need to wrap it in a try-catch block and throw an `IOException` if an error occurs.
------------------------------------------------------
