
Sure, here's the updated code that checks for invalid regular expression syntax and throws a `PatternSyntaxException` if necessary:

```
import java.util.regex.PatternSyntaxException;

public static String getBorderColor(String style) throws PatternSyntaxException {
    String borderColor = null;
    try {
        String[] declarations = style.split(";");
        for (String declaration : declarations) {
            String[] parts = declaration.split(":");
            if (parts.length == 2) {
                String property = parts[0].trim();
                String value = parts[1].trim();
                if (property.equals("border-color")) {
                    borderColor = value;
                    break;
                }
            }
        }
    } catch (PatternSyntaxException e) {
        throw new PatternSyntaxException("Invalid regular expression syntax", e.getPattern(), e.getIndex());
    }
    return borderColor;
}
```

This updated method now catches any `PatternSyntaxException` that may be thrown by the `split()` method and re-throws it with a more descriptive error message. This way, the caller of the method can be informed of any syntax errors in the regular expression used for splitting the style string.
------------------------------------------------------
