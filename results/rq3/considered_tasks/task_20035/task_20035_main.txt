Please write a java method that Adapts a target var handle by narrowing incoming values and widening outgoing values, to and from the given type, respectively.
Here's an example Java method that adapts a target var handle by narrowing incoming values and widening outgoing values to and from the given type:

```
public static <T, U> VarHandle adaptVarHandle(VarHandle varHandle, Class<T> targetType, Class<U> valueType) {
    MethodHandles.Lookup lookup = MethodHandles.lookup();
    MethodType getterType = MethodType.methodType(targetType, valueType);
    MethodType setterType = MethodType.methodType(void.class, targetType, valueType);
    MethodHandle getter = lookup.findVirtual(valueType, "doubleValue", getterType);
    MethodHandle setter = lookup.findVirtual(targetType, "valueOf", setterType);
    return varHandle.withValueConverter(MethodHandles.filterReturnValue(getter, setter));
}
```

This method takes in a `VarHandle` object, the target type `T`, and the value type `U`. It then creates a `MethodHandles.Lookup` object and two `MethodType` objects for the getter and setter methods. The getter method is used to convert the incoming value to the target type, while the setter method is used to convert the outgoing value to the value type.

The method then creates two `MethodHandle` objects using the `lookup.findVirtual` method. The getter method handle is created by finding the `doubleValue` method on the value type, while the setter method handle is created by finding the `valueOf` method on the target type.

Finally, the method returns a new `VarHandle` object that has been adapted with a value converter that uses the getter and setter method handles to convert incoming and outgoing values between the target and value types.
------------------------------------------------------
Please check if rtype or ptype0 is null for java.lang.invoke.MethodType.methodType(java.lang.Class,java.lang.Class) in the code snippet you provided, otherwise throw NullPointerException.
Please check if ptype0 is void.class for java.lang.invoke.MethodType.methodType(java.lang.Class,java.lang.Class) in the code snippet you provided, otherwise throw IllegalArgumentException.
Please check if either argument is null for java.lang.invoke.MethodHandles.filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle) in the code snippet you provided, otherwise throw NullPointerException.
Please check if the argument list of filter          does not match the return type of target as described above for java.lang.invoke.MethodHandles.filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle) in the code snippet you provided, otherwise throw IllegalArgumentException.
Here's the updated Java method that includes the requested null and argument checks:

```
public static <T, U> VarHandle adaptVarHandle(VarHandle varHandle, Class<T> targetType, Class<U> valueType) {
    if (targetType == null || valueType == null) {
        throw new NullPointerException("Target type and value type cannot be null");
    }
    if (valueType == void.class) {
        throw new IllegalArgumentException("Value type cannot be void");
    }
    MethodHandles.Lookup lookup = MethodHandles.lookup();
    MethodType getterType = MethodType.methodType(targetType, valueType);
    MethodType setterType = MethodType.methodType(void.class, targetType, valueType);
    MethodHandle getter = lookup.findVirtual(valueType, "doubleValue", getterType);
    MethodHandle setter = lookup.findVirtual(targetType, "valueOf", setterType);
    if (!getter.type().returnType().equals(targetType)) {
        throw new IllegalArgumentException("Getter return type does not match target type");
    }
    return varHandle.withValueConverter(MethodHandles.filterReturnValue(getter, setter));
}
```

This updated method first checks if the `targetType` and `valueType` arguments are null, and throws a `NullPointerException` if either is null. It also checks if the `valueType` argument is `void.class`, and throws an `IllegalArgumentException` if it is.

The method then proceeds with the same logic as before, creating the necessary `MethodType` and `MethodHandle` objects. However, it now includes an additional check to ensure that the return type of the `getter` method handle matches the `targetType`. If they do not match, an `IllegalArgumentException` is thrown.

Finally, the method returns a new `VarHandle` object that has been adapted with a value converter that uses the getter and setter method handles to convert incoming and outgoing values between the target and value types.
------------------------------------------------------
