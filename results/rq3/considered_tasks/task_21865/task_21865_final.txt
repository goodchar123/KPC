
Sure, here's the updated Java method that includes the null and exception checks:

```
public static double evaluateExpression(String expression) throws NullPointerException, NumberFormatException, ScriptException {
    if (expression == null) {
        throw new NullPointerException("Expression cannot be null");
    }
    ScriptEngineManager manager = new ScriptEngineManager();
    String engineName = "JavaScript";
    ScriptEngine engine = manager.getEngineByName(engineName);
    if (engine == null) {
        throw new NullPointerException("Script engine " + engineName + " not found");
    }
    Object result = engine.eval(expression);
    if (result == null) {
        throw new NullPointerException("Result of evaluation is null");
    }
    String resultString = result.toString();
    if (resultString == null) {
        throw new NullPointerException("Result string is null");
    }
    try {
        return Double.parseDouble(resultString);
    } catch (NumberFormatException e) {
        throw new NumberFormatException("Result string is not a parsable double: " + resultString);
    }
}
```

This updated method first checks if the input expression is null, and throws a `NullPointerException` if it is. It then checks if the `ScriptEngine` object returned by `getEngineByName()` is null, and throws a `NullPointerException` if it is. After evaluating the expression, it checks if the result is null or if the result string is null, and throws a `NullPointerException` in either case. Finally, it attempts to parse the result string as a `double`, and throws a `NumberFormatException` if it is not parsable.
------------------------------------------------------
