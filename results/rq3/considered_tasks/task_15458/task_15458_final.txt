
Sure, here's the updated code snippet that includes the requested error handling:

```java
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DateTimeFormatterExample {
    public static String formatDateTime(LocalDateTime dateTime) {
        String pattern = "yyyy-MM-dd HH:mm:ss";
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
            return dateTime.format(formatter);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern: " + pattern, e);
        } catch (DateTimeException e) {
            throw new DateTimeException("Error occurred during formatting", e);
        }
    }
}
```

This updated method now checks for two types of errors:

1. If the pattern provided to `DateTimeFormatter.ofPattern()` is invalid, an `IllegalArgumentException` is thrown with a custom error message that includes the invalid pattern.
2. If an error occurs during the formatting process, a `DateTimeException` is thrown with a custom error message.

These error handling blocks ensure that any issues with the pattern or formatting process are caught and handled appropriately.
------------------------------------------------------
