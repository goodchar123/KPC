Please write a java method that Formats a date-time object using this formatter.
Sure, here's an example Java method that formats a date-time object using a formatter:

```java
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DateTimeFormatterExample {
    public static String formatDateTime(LocalDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return dateTime.format(formatter);
    }
}
```

This method takes a `LocalDateTime` object as input and returns a formatted string representation of the date and time using the specified formatter. The formatter pattern used in this example is "yyyy-MM-dd HH:mm:ss", which represents the year, month, day, hour, minute, and second in a specific order. You can modify the pattern to suit your needs.
------------------------------------------------------
Please check if the pattern is invalid for java.time.format.DateTimeFormatter.ofPattern(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.
Please check if an error occurs during printing for java.time.LocalDateTime.format(java.time.format.DateTimeFormatter) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's the updated code snippet that includes the requested error handling:

```java
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class DateTimeFormatterExample {
    public static String formatDateTime(LocalDateTime dateTime) {
        String pattern = "yyyy-MM-dd HH:mm:ss";
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
            return dateTime.format(formatter);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern: " + pattern, e);
        } catch (DateTimeException e) {
            throw new DateTimeException("Error occurred during formatting", e);
        }
    }
}
```

This updated method now checks for two types of errors:

1. If the pattern provided to `DateTimeFormatter.ofPattern()` is invalid, an `IllegalArgumentException` is thrown with a custom error message that includes the invalid pattern.
2. If an error occurs during the formatting process, a `DateTimeException` is thrown with a custom error message.

These error handling blocks ensure that any issues with the pattern or formatting process are caught and handled appropriately.
------------------------------------------------------
