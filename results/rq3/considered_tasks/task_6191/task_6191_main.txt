Please write a java method that Obtains an instance of Year from a text string using a specific formatter.
Sure, here's an example Java method that obtains an instance of Year from a text string using a specific formatter:

```java
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class YearFromString {
    public static Year getYearFromString(String dateString, String formatString) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(formatString);
        Year year = null;
        try {
            year = Year.parse(dateString, formatter);
        } catch (DateTimeParseException e) {
            System.err.println("Unable to parse year from string " + dateString + " using format " + formatString);
        }
        return year;
    }
}
```

This method takes two arguments: a `String` representing the date to parse, and a `String` representing the format to use when parsing the date. It returns a `Year` object representing the year parsed from the input string.

Here's an example of how you could use this method:

```java
String dateString = "2022";
String formatString = "yyyy";
Year year = YearFromString.getYearFromString(dateString, formatString);
System.out.println(year); // Output: 2022
```

In this example, the input string is `"2022"`, and the format string is `"yyyy"`, which specifies that the input string represents a year in four-digit format. The `getYearFromString` method uses the `DateTimeFormatter` class to parse the input string using the specified format, and returns a `Year` object representing the year parsed from the input string. The output of the program is `2022`, which is the year parsed from the input string.
------------------------------------------------------
Please check if the pattern is invalid for java.time.format.DateTimeFormatter.ofPattern(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's an updated version of the `getYearFromString` method that checks if the pattern is invalid for `DateTimeFormatter.ofPattern` and throws an `IllegalArgumentException` if it is:

```java
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class YearFromString {
    public static Year getYearFromString(String dateString, String formatString) {
        DateTimeFormatter formatter = null;
        try {
            formatter = DateTimeFormatter.ofPattern(formatString);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid pattern: " + formatString, e);
        }
        Year year = null;
        try {
            year = Year.parse(dateString, formatter);
        } catch (DateTimeParseException e) {
            System.err.println("Unable to parse year from string " + dateString + " using format " + formatString);
        }
        return year;
    }
}
```

In this updated version of the method, we first attempt to create a `DateTimeFormatter` object using the specified format string. If the format string is invalid, an `IllegalArgumentException` will be thrown, which we catch and re-throw with a more informative error message.

If the format string is valid, we proceed with parsing the input string using the formatter, as before. If the parsing fails, we print an error message to the console and return `null`.

Here's an example of how you could use this updated method:

```java
String dateString = "2022";
String formatString = "yyyy-MM-dd";
Year year = null;
try {
    year = YearFromString.getYearFromString(dateString, formatString);
} catch (IllegalArgumentException e) {
    System.err.println(e.getMessage());
}
if (year != null) {
    System.out.println(year); // Output: 2022
}
```

In this example, the format string `"yyyy-MM-dd"` is invalid for parsing a year, so the `getYearFromString` method will throw an `IllegalArgumentException` with the message "Invalid pattern: yyyy-MM-dd". We catch this exception and print the error message to the console.

If we use a valid format string, such as `"yyyy"`, the method will return a `Year` object representing the year parsed from the input string, as before.
------------------------------------------------------
