List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()`
2. `java.awt.EventQueue.invokeAndWait(java.lang.Runnable)`

 + From response, we get: ['java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()', 'java.awt.EventQueue.invokeAndWait(java.lang.Runnable)']
------------------------------------------------------
Is the InterruptedException handled or caught for java.awt.EventQueue.invokeAndWait(java.lang.Runnable) in the code snippet? Answer in Yes or No only.
No. The `InterruptedException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the InvocationTargetException handled or caught for java.awt.EventQueue.invokeAndWait(java.lang.Runnable) in the code snippet? Answer in Yes or No only.
No. The `InvocationTargetException` is not handled or caught in the code snippet.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()`
2. `java.awt.EventQueue.invokeAndWait(java.lang.Runnable)`

 + From response, we get: ['java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()', 'java.awt.EventQueue.invokeAndWait(java.lang.Runnable)']
------------------------------------------------------
Is the InterruptedException handled or caught for java.awt.EventQueue.invokeAndWait(java.lang.Runnable) in the code snippet? Answer in Yes or No only.
Yes. The `InterruptedException` is caught and re-thrown in the `try-catch` block that surrounds the `EventQueue.invokeAndWait()` method call.
------------------------------------------------------
Is the InvocationTargetException handled or caught for java.awt.EventQueue.invokeAndWait(java.lang.Runnable) in the code snippet? Answer in Yes or No only.
Yes. The `InvocationTargetException` is caught and re-thrown in the `try-catch` block that surrounds the `EventQueue.invokeAndWait()` method call.
------------------------------------------------------
