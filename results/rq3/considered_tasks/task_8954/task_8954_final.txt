
Sure, here's an updated version of the Java method that checks if the phaser is not terminated and the number of unarrived parties would not become negative before calling `arriveAndAwaitAdvance()`. If either of these conditions is not met, an `IllegalStateException` is thrown:

```
public void awaitAtPhaser(Phaser phaser) {
    int phase = phaser.getPhase();
    if (phaser.isTerminated() || phaser.getUnarrivedParties() < 0) {
        throw new IllegalStateException("Phaser is terminated or unarrived parties would become negative");
    }
    phaser.arriveAndAwaitAdvance(phase);
}
```

This method first gets the current phase of the phaser using `getPhase()`. It then checks if the phaser is terminated or if the number of unarrived parties would become negative using `isTerminated()` and `getUnarrivedParties()`. If either of these conditions is true, an `IllegalStateException` is thrown with an appropriate message. Otherwise, the method calls `arriveAndAwaitAdvance(phase)` with the current phase to arrive at the phaser and wait for other threads to arrive as well.
------------------------------------------------------
