
Sure, here's an updated version of the `formatTime` method that includes the requested error checking:

```java
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class TimeFormatter {
    public static String formatTime(LocalTime time, String format) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);
            return time.format(formatter);
        } catch (DateTimeException e) {
            throw new IllegalArgumentException("Invalid format: " + format, e);
        }
    }
    
    public static LocalTime createTime(int hour, int minute, int second) {
        try {
            return LocalTime.of(hour, minute, second);
        } catch (DateTimeException e) {
            throw new IllegalArgumentException("Invalid time: " + hour + ":" + minute + ":" + second, e);
        }
    }
}
```

I've added a new method called `createTime` that creates a `LocalTime` object from the given hour, minute, and second values, and checks for any out-of-range values. The `formatTime` method now includes error checking for an invalid format pattern or an error during printing, and throws the appropriate exception with a helpful error message.

You can call these methods like this:

```java
LocalTime time = TimeFormatter.createTime(14, 30, 0); // 2:30 PM
String format = "hh:mm a"; // 02:30 PM
String formattedTime = TimeFormatter.formatTime(time, format);
System.out.println(formattedTime); // prints "02:30 PM"
```

In this example, the `createTime` method is called with valid values, so it returns a `LocalTime` object representing 2:30 PM. The `formatTime` method is then called with this time and a valid format pattern, so it returns the formatted time "02:30 PM". If any invalid values or patterns were passed to these methods, the appropriate exception would be thrown with a helpful error message.
------------------------------------------------------
