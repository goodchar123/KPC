
Sure, here's an updated version of the Java method that checks for InvalidClassException and NotSerializableException:

```java
import java.io.*;

public class ObjectWriter {
    public static void writeObject(Object obj, String filename) throws IOException {
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(new FileOutputStream(filename));
            oos.writeObject(obj);
        } catch (InvalidClassException e) {
            throw new InvalidClassException("Something is wrong with a class used by serialization.");
        } catch (NotSerializableException e) {
            throw new NotSerializableException("Some object to be serialized does not implement the java.io.Serializable interface.");
        } finally {
            if (oos != null) {
                oos.close();
            }
        }
    }
}
```

This updated version of the method uses a try-catch block to catch InvalidClassException and NotSerializableException. If either of these exceptions is caught, the method throws a new exception with a more descriptive message. Finally, the method closes the ObjectOutputStream in a finally block to ensure that it is always closed, even if an exception is thrown.
------------------------------------------------------
