Please write a java method that Opens a server-socket channel.
Sure, here's an example Java method that opens a server-socket channel:

```java
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.ServerSocketChannel;

public class ServerSocketChannelExample {
    public static void main(String[] args) throws IOException {
        int port = 8080;
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        serverSocketChannel.socket().bind(new InetSocketAddress(port));
        System.out.println("Server listening on port " + port);
    }
}
```

This method creates a new `ServerSocketChannel` object, binds it to a specific port using the `bind()` method, and then prints a message to indicate that the server is listening on that port. Note that this method throws an `IOException` if there is an error opening or binding the server socket channel, so you may want to handle that exception in your code.
------------------------------------------------------
Please check If an I/O error occurs for java.nio.channels.ServerSocketChannel.open() in the code snippet you provided, otherwise throw IOException.
Please check If the channel's socket is not an Internet protocol socket for java.nio.channels.ServerSocketChannel.socket() in the code snippet you provided, otherwise throw UnsupportedOperationException.
Sure, here's an updated version of the code snippet that checks for the conditions you mentioned and throws the appropriate exceptions:

```java
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.ServerSocketChannel;

public class ServerSocketChannelExample {
    public static void main(String[] args) throws IOException {
        int port = 8080;
        ServerSocketChannel serverSocketChannel = null;
        try {
            serverSocketChannel = ServerSocketChannel.open();
        } catch (IOException e) {
            throw new IOException("Error opening server socket channel", e);
        }
        if (!(serverSocketChannel.socket().getLocalSocketAddress() instanceof InetSocketAddress)) {
            throw new UnsupportedOperationException("Socket address not an Internet protocol socket");
        }
        try {
            serverSocketChannel.socket().bind(new InetSocketAddress(port));
        } catch (IOException e) {
            throw new IOException("Error binding server socket channel to port " + port, e);
        }
        System.out.println("Server listening on port " + port);
    }
}
```

This version of the code uses a try-catch block to catch any `IOException` that might occur when opening the server socket channel, and throws a new `IOException` with a more descriptive error message.

It also checks whether the socket address returned by `getLocalSocketAddress()` is an instance of `InetSocketAddress`, and throws an `UnsupportedOperationException` if it is not.

Finally, it uses another try-catch block to catch any `IOException` that might occur when binding the server socket channel to the specified port, and throws a new `IOException` with a more descriptive error message.
------------------------------------------------------
