
Sure, here's the updated Java method that checks for exceptions:

```java
public LocalTime truncateTime(LocalTime time) {
    try {
        return time.truncatedTo(ChronoUnit.DAYS);
    } catch (DateTimeException e) {
        System.out.println("Unable to truncate time: " + e.getMessage());
        throw e;
    } catch (UnsupportedTemporalTypeException e) {
        System.out.println("Unsupported temporal type: " + e.getMessage());
        throw e;
    }
}
```

This method now includes try-catch blocks to handle potential exceptions. If the `truncatedTo()` method is unable to truncate the time, a `DateTimeException` will be thrown. If the specified unit is not supported for truncation, an `UnsupportedTemporalTypeException` will be thrown. Both exceptions are caught and re-thrown with an error message.
------------------------------------------------------
