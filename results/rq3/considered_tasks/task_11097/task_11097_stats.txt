{"loop_id": 0, "unhandled_api_list": ["java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long)", "java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long)", "java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long)", "java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check If the mode is READ_ONLY or         an implementation specific map mode requiring read access         but this channel was not opened for reading for java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long) in the code snippet you provided, otherwise throw NonReadableChannelException.", "Please check If the mode is READ_WRITE.         PRIVATE or an implementation specific         map mode requiring write access but this channel was not         opened for both reading and writing for java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long) in the code snippet you provided, otherwise throw NonWritableChannelException.", "Please check If the preconditions on the parameters do not hold for java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check If an unsupported map mode is specified for java.nio.channels.FileChannel.map(java.nio.channels.FileChannel.MapMode,long,long) in the code snippet you provided, otherwise throw UnsupportedOperationException."], "num_of_unhandled_exception": 4}
{"loop_id": 1, "unhandled_api_list": ["java.nio.channels.FileChannel.size()", "java.nio.channels.FileChannel.size()", "java.io.RandomAccessFile.close()"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check If this channel is closed for java.nio.channels.FileChannel.size() in the code snippet you provided, otherwise throw ClosedChannelException.", "Please check If some other I/O error occurs for java.nio.channels.FileChannel.size() in the code snippet you provided, otherwise throw IOException.", "Please check if an I/O error occurs. for java.io.RandomAccessFile.close() in the code snippet you provided, otherwise throw IOException."], "num_of_unhandled_exception": 3}
{"loop_id": 2, "unhandled_api_list": ["java.nio.channels.FileChannel.size()", "java.nio.channels.FileChannel.size()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check If this channel is closed for java.nio.channels.FileChannel.size() in the code snippet you provided, otherwise throw ClosedChannelException.", "Please check If some other I/O error occurs for java.nio.channels.FileChannel.size() in the code snippet you provided, otherwise throw IOException."], "num_of_unhandled_exception": 2}
{"loop_id": 3, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
