
Sure, here's the updated Java method that checks if the minute value is valid for `OffsetDateTime.withMinute(int)` and throws a `DateTimeException` if it's invalid:

```java
public static OffsetDateTime withMinuteOfHour(OffsetDateTime offsetDateTime, int minute) {
    try {
        return offsetDateTime.withMinute(minute);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid minute value: " + minute, e);
    }
}
```

This method first tries to set the minute-of-hour value using `OffsetDateTime.withMinute(int)`. If the minute value is invalid, a `DateTimeException` will be thrown. In this case, the method catches the exception and re-throws it with a more descriptive error message that includes the invalid minute value.

You can call this updated method in the same way as before:

```java
OffsetDateTime originalDateTime = OffsetDateTime.now();
OffsetDateTime newDateTime = withMinuteOfHour(originalDateTime, 70); // Invalid minute value
```

In this example, the method call will throw a `DateTimeException` with the message "Invalid minute value: 70".
------------------------------------------------------
