Please write a java method that Set time as one unit, including optional milliseconds.
Here's an example Java method that sets time as one unit, including optional milliseconds:

```java
public static void setTime(int hours, int minutes, int seconds, int milliseconds) {
    Calendar calendar = Calendar.getInstance();
    calendar.set(Calendar.HOUR_OF_DAY, hours);
    calendar.set(Calendar.MINUTE, minutes);
    calendar.set(Calendar.SECOND, seconds);
    calendar.set(Calendar.MILLISECOND, milliseconds);
    Date date = calendar.getTime();
    System.out.println("Time set to: " + date);
}
```

This method takes four parameters: hours, minutes, seconds, and milliseconds. It creates a new instance of the Calendar class, sets the hour, minute, second, and millisecond fields using the provided parameters, and then gets the corresponding Date object. Finally, it prints out the time that was set.

You can call this method like this:

```java
setTime(12, 30, 45, 500);
```

This would set the time to 12:30:45.500.
------------------------------------------------------
Please check if the specified field is out of range             (field < 0 || field >= FIELD_COUNT). in non lenient mode. for java.util.Calendar.set(int,int) in the code snippet you provided, otherwise throw ArrayIndexOutOfBoundsException.
Sure, here's an updated version of the Java method that checks if the specified field is out of range in non-lenient mode and throws an `ArrayIndexOutOfBoundsException` if it is:

```java
public static void setTime(int hours, int minutes, int seconds, int milliseconds) {
    Calendar calendar = Calendar.getInstance();
    calendar.setLenient(false);
    try {
        calendar.set(Calendar.HOUR_OF_DAY, hours);
        calendar.set(Calendar.MINUTE, minutes);
        calendar.set(Calendar.SECOND, seconds);
        calendar.set(Calendar.MILLISECOND, milliseconds);
    } catch (IllegalArgumentException e) {
        throw new ArrayIndexOutOfBoundsException("Specified field is out of range");
    }
    Date date = calendar.getTime();
    System.out.println("Time set to: " + date);
}
```

This updated method sets the lenient mode of the calendar to `false` to ensure that any out-of-range values will throw an `IllegalArgumentException`. It then tries to set the hour, minute, second, and millisecond fields using the provided parameters. If any of these fields are out of range, an `IllegalArgumentException` will be thrown, which is caught and re-thrown as an `ArrayIndexOutOfBoundsException`.

You can call this method like this:

```java
setTime(12, 30, 45, 500);
```

This would set the time to 12:30:45.500. If any of the parameters are out of range, an `ArrayIndexOutOfBoundsException` will be thrown.
------------------------------------------------------
