
Sure, here's an updated version of the Java method that checks for the conditions you mentioned:

```java
import java.time.Period;
import java.time.temporal.TemporalAmount;
import java.time.temporal.UnsupportedTemporalTypeException;

public class PeriodHelper {
    public static Period getPeriodFromTemporalAmount(TemporalAmount amount) {
        try {
            return Period.from(amount);
        } catch (UnsupportedTemporalTypeException e) {
            throw new DateTimeException("Unable to convert to a Period", e);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Amount of years, months or days exceeds an int");
        }
    }
}
```

This updated method now catches the `UnsupportedTemporalTypeException` and throws a `DateTimeException` with a custom message if the `Period.from()` method is unable to convert the `TemporalAmount` to a `Period`.

It also catches the `ArithmeticException` and throws a custom `ArithmeticException` with a message if the amount of years, months or days in the `TemporalAmount` exceeds an `int`.

You can call this method from your code and it will handle these exceptions for you.
------------------------------------------------------
