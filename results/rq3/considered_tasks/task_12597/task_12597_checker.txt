List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.lang.invoke.MethodHandles.lookup()`
2. `java.lang.invoke.MethodType.methodType(java.lang.Class, java.lang.Class...)`
3. `java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class, java.lang.String, java.lang.invoke.MethodType)`
4. `java.lang.invoke.MethodHandle.bindTo(java.lang.Object)`
5. `java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)`

 + From response, we get: ['java.lang.invoke.MethodHandles.lookup()', 'java.lang.invoke.MethodType.methodType(java.lang.Class,java.lang.Class...)', 'java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)', 'java.lang.invoke.MethodHandle.bindTo(java.lang.Object)', 'java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)']
------------------------------------------------------
Is the NoSuchMethodException handled or caught for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet? Answer in Yes or No only.
No. The `NoSuchMethodException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the IllegalAccessException handled or caught for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet? Answer in Yes or No only.
No. The `IllegalAccessException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the SecurityException handled or caught for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet? Answer in Yes or No only.
No. The `SecurityException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the NullPointerException handled or caught for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet? Answer in Yes or No only.
No. The `NullPointerException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the IllegalArgumentException handled or caught for java.lang.invoke.MethodHandle.bindTo(java.lang.Object) in the code snippet? Answer in Yes or No only.
No. The `IllegalArgumentException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the ClassCastException handled or caught for java.lang.invoke.MethodHandle.bindTo(java.lang.Object) in the code snippet? Answer in Yes or No only.
No. The `ClassCastException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the WrongMethodTypeException handled or caught for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No. The `WrongMethodTypeException` is not handled or caught in the code snippet.
------------------------------------------------------
Is the Throwable handled or caught for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet? Answer in Yes or No only.
No. The `Throwable` is not handled or caught in the code snippet.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.lang.invoke.MethodHandles.lookup()
2. java.lang.invoke.MethodType.methodType(java.lang.Class, java.lang.Class...)
3. java.lang.invoke.MethodHandle.isAccessible()
4. java.lang.invoke.MethodHandle.isStatic()
5. java.lang.invoke.MethodHandle.isVarargsCollector()
6. java.lang.invoke.MethodHandle.asVarargsCollector(java.lang.Class)
7. java.lang.invoke.MethodHandle.bindTo(java.lang.Object)
8. java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)

 + From response, we get: []
------------------------------------------------------
