
Sure, here's an updated version of the Java method that checks for the two exceptions you mentioned:

```java
public void writeToStream(Object obj, OutputStream outputStream) throws IOException, InvalidClassException, NotSerializableException {
    if (!(obj instanceof Serializable)) {
        throw new NotSerializableException("Object to be serialized does not implement the Serializable interface");
    }
    ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
    objectOutputStream.writeObject(obj);
    objectOutputStream.flush();
    if (objectOutputStream != null) {
        objectOutputStream.close();
    }
}
```

This updated method first checks if the object being written to the stream implements the `Serializable` interface. If it doesn't, it throws a `NotSerializableException`. 

If the object is serializable, it proceeds to create an `ObjectOutputStream` from the output stream and writes the object to the stream using the `writeObject` method. Finally, it flushes the stream to ensure that all data is written and closes the `ObjectOutputStream`.

Additionally, if there is an issue with the class used by serialization, such as a version mismatch, the `writeObject` method may throw an `InvalidClassException`. This exception is not explicitly checked in the method, but it will be thrown if there is an issue with the class used by serialization.
------------------------------------------------------
