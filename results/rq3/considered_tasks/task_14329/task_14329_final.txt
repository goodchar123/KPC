
Sure, here's an updated version of the code snippet that checks if the specified array is null before calling `Arrays.asList(T...)`:

```
public static <T> List<T> asList(T... a) {
    if (a == null) {
        throw new NullPointerException("Array cannot be null");
    }
    return Arrays.asList(a);
}
```

This method takes in a variable number of arguments of type `T` and returns a list of type `T`. Before calling `Arrays.asList(T...)`, it checks if the specified array is null. If it is null, it throws a `NullPointerException` with the message "Array cannot be null". Otherwise, it calls `Arrays.asList(T...)` with the specified array and returns the resulting list.

Here's an example of how you could use this method:

```
String[] array = {"apple", "banana", "orange"};
List<String> list = asList(array);
System.out.println(list); // Output: [apple, banana, orange]

String[] nullArray = null;
List<String> nullList = asList(nullArray); // Throws NullPointerException
```

In this example, the `asList()` method is called with a non-null array of fruits, and the resulting list is printed. Then, the method is called with a null array, which throws a `NullPointerException` with the message "Array cannot be null".
------------------------------------------------------
