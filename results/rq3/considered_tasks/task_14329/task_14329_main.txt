Please write a java method that Retains only the elements in this list that are contained in the specified collection.
Here's a Java method that retains only the elements in a list that are contained in a specified collection:

```
public static <T> void retainAll(List<T> list, Collection<?> c) {
    list.retainAll(c);
}
```

This method takes in a list of type `T` and a collection of any type (`Collection<?>`). The `retainAll()` method of the list is then called with the specified collection as its argument. This method modifies the list so that it only contains elements that are also in the specified collection.

Here's an example of how you could use this method:

```
List<String> list = new ArrayList<>(Arrays.asList("apple", "banana", "orange", "pear"));
Set<String> set = new HashSet<>(Arrays.asList("banana", "pear", "grape"));
retainAll(list, set);
System.out.println(list); // Output: [banana, pear]
```

In this example, the `retainAll()` method is called with a list of fruits and a set of fruits. The resulting list only contains the fruits that are also in the set, which are "banana" and "pear".
------------------------------------------------------
Please check if the specified array is null for java.util.Arrays.asList(T...) in the code snippet you provided, otherwise throw NullPointerException.
Sure, here's an updated version of the code snippet that checks if the specified array is null before calling `Arrays.asList(T...)`:

```
public static <T> List<T> asList(T... a) {
    if (a == null) {
        throw new NullPointerException("Array cannot be null");
    }
    return Arrays.asList(a);
}
```

This method takes in a variable number of arguments of type `T` and returns a list of type `T`. Before calling `Arrays.asList(T...)`, it checks if the specified array is null. If it is null, it throws a `NullPointerException` with the message "Array cannot be null". Otherwise, it calls `Arrays.asList(T...)` with the specified array and returns the resulting list.

Here's an example of how you could use this method:

```
String[] array = {"apple", "banana", "orange"};
List<String> list = asList(array);
System.out.println(list); // Output: [apple, banana, orange]

String[] nullArray = null;
List<String> nullList = asList(nullArray); // Throws NullPointerException
```

In this example, the `asList()` method is called with a non-null array of fruits, and the resulting list is printed. Then, the method is called with a null array, which throws a `NullPointerException` with the message "Array cannot be null".
------------------------------------------------------
