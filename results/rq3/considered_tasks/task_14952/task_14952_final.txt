
Sure, here's an updated version of the `createCustomSpliterator` method that checks if the given array is null before creating the spliterator using `Spliterators.spliterator` method. If the array is null, it throws a `NullPointerException`:

```java
import java.util.Spliterator;
import java.util.Spliterators;

public class CustomSpliterator {

    public static Spliterator.OfDouble createCustomSpliterator(double[] array) {
        if (array == null) {
            throw new NullPointerException("Array cannot be null");
        }
        int characteristics = Spliterator.IMMUTABLE | Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;
        return Spliterators.spliterator(array, characteristics);
    }
}
```

In this updated version, the `if` statement checks if the `array` parameter is null. If it is null, a `NullPointerException` is thrown with the message "Array cannot be null". If the array is not null, the method proceeds to create the spliterator using the `Spliterators.spliterator` method with the specified characteristics.

This ensures that the method will not create a spliterator with a null array, which could cause errors later on in the code.
------------------------------------------------------
