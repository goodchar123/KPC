
Sure, here's an updated version of the Java method that checks for an I/O error when closing the `Writer` and throws an `IOException` if necessary:

```java
public void writeCharsToFile(String fileName, String data) throws IOException {
    FileWriter writer = null;
    try {
        writer = new FileWriter(fileName);
        writer.write(data);
    } finally {
        if (writer != null) {
            try {
                writer.close();
            } catch (IOException e) {
                throw new IOException("Error closing writer: " + e.getMessage());
            }
        }
    }
}
```

In this version, we use a try-finally block to ensure that the `Writer` is closed even if an exception is thrown while writing to the file. The `finally` block checks if the `Writer` is not null and attempts to close it. If an `IOException` occurs while closing the `Writer`, we throw a new `IOException` with a message indicating the error.

This way, if an I/O error occurs while closing the `Writer`, the method will throw an `IOException` with a descriptive error message.
------------------------------------------------------
