Please write a java method that Enable/disable the SO_REUSEADDR socket option.
Here's an example Java method that enables/disables the SO_REUSEADDR socket option:

```java
import java.net.*;

public class SocketOptionExample {
    public static void setReuseAddr(Socket socket, boolean enable) throws SocketException {
        socket.setReuseAddress(enable);
    }
}
```

In this example, the `setReuseAddr` method takes a `Socket` object and a boolean value as parameters. The `Socket` object represents the socket whose SO_REUSEADDR option needs to be enabled or disabled. The boolean value indicates whether to enable or disable the option.

The `setReuseAddress` method of the `Socket` class is used to enable or disable the SO_REUSEADDR option. If the `enable` parameter is `true`, the option is enabled. If it is `false`, the option is disabled.

You can call this method to enable or disable the SO_REUSEADDR option for a socket object.
------------------------------------------------------
Please check if an error occurs enabling or            disabling the SO_REUSEADDR            socket option, or the socket is closed. for java.net.Socket.setReuseAddress(boolean) in the code snippet you provided, otherwise throw SocketException.
Sure, here's an updated version of the `setReuseAddr` method that checks for errors and throws a `SocketException` if necessary:

```java
import java.net.*;

public class SocketOptionExample {
    public static void setReuseAddr(Socket socket, boolean enable) throws SocketException {
        try {
            socket.setReuseAddress(enable);
        } catch (SocketException e) {
            throw new SocketException("Error setting SO_REUSEADDR option: " + e.getMessage());
        } catch (IllegalStateException e) {
            throw new SocketException("Socket is closed: " + e.getMessage());
        }
    }
}
```

In this updated version, we've added a try-catch block to catch any `SocketException` or `IllegalStateException` that might be thrown when setting the SO_REUSEADDR option. If an exception is caught, we throw a new `SocketException` with a descriptive error message.

This way, if an error occurs or the socket is closed, the method will throw a `SocketException` with a clear message indicating what went wrong.
------------------------------------------------------
