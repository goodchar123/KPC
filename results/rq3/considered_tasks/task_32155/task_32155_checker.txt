List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `javax.imageio.ImageIO.createImageInputStream(java.lang.Object)`
2. `java.util.Iterator.hasNext()`
3. `java.util.Iterator.next()`
4. `javax.imageio.ImageReader.setInput(javax.imageio.stream.ImageInputStream)`
5. `javax.imageio.ImageReader.read(int, javax.imageio.ImageReadParam)`
6. `javax.imageio.ImageReader.getImageMetadata(int)`
7. `javax.imageio.ImageReader.getStreamMetadata()`
8. `javax.imageio.metadata.IIOMetadataNode.<init>()`
9. `javax.imageio.IIOImage.<init>(java.awt.image.BufferedImage, java.util.List<javax.imageio.ImageWriter$IIOParam>, javax.imageio.metadata.IIOMetadata)`
10. `javax.imageio.ImageReader.dispose()`
11. `javax.imageio.stream.ImageInputStream.close()`

 + From response, we get: ['javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'java.util.Iterator.hasNext()', 'java.util.Iterator.next()', 'javax.imageio.ImageReader.setInput(javax.imageio.stream.ImageInputStream)', 'javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam)', 'javax.imageio.ImageReader.getImageMetadata(int)', 'javax.imageio.ImageReader.getStreamMetadata()', 'javax.imageio.metadata.IIOMetadataNode.<init>()', 'javax.imageio.IIOImage.<init>(java.awt.image.BufferedImage,java.util.List<javax.imageio.ImageWriter$IIOParam>,javax.imageio.metadata.IIOMetadata)', 'javax.imageio.ImageReader.dispose()', 'javax.imageio.stream.ImageInputStream.close()']
------------------------------------------------------
Is the IllegalArgumentException handled or caught for javax.imageio.ImageIO.createImageInputStream(java.lang.Object) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IOException handled or caught for javax.imageio.ImageIO.createImageInputStream(java.lang.Object) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NoSuchElementException handled or caught for java.util.Iterator.next() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IllegalStateException handled or caught for javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IndexOutOfBoundsException handled or caught for javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IllegalArgumentException handled or caught for javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IllegalArgumentException handled or caught for javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IOException handled or caught for javax.imageio.ImageReader.read(int,javax.imageio.ImageReadParam) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IllegalStateException handled or caught for javax.imageio.ImageReader.getImageMetadata(int) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IndexOutOfBoundsException handled or caught for javax.imageio.ImageReader.getImageMetadata(int) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IOException handled or caught for javax.imageio.ImageReader.getImageMetadata(int) in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IOException handled or caught for javax.imageio.ImageReader.getStreamMetadata() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IOException handled or caught for javax.imageio.stream.ImageInputStream.close() in the code snippet? Answer in Yes or No only.
Yes.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. javax.imageio.ImageIO.createImageInputStream(java.lang.Object)
2. java.util.Iterator.hasNext()
3. java.util.Iterator.next()
4. javax.imageio.ImageReader.setInput(javax.imageio.stream.ImageInputStream)
5. javax.imageio.ImageReader.getInput()
6. javax.imageio.ImageReader.getNumImages(boolean)
7. javax.imageio.ImageReadParam.getSourceBands()
8. javax.imageio.ImageReadParam.getDestinationBands()
9. javax.imageio.ImageReader.getNumBands()
10. javax.imageio.ImageReader.read(int, javax.imageio.ImageReadParam)
11. javax.imageio.ImageReader.getImageMetadata(int)
12. javax.imageio.ImageReader.getStreamMetadata()
13. javax.imageio.ImageReader.dispose()
14. javax.imageio.stream.ImageInputStream.close()

 + From response, we get: []
------------------------------------------------------
