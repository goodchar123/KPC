
Sure, here's an updated version of the code snippet that includes the requested checks:

```java
import java.util.List;

public class ListUtils {

    public static <E> boolean containsElement(List<E> list, E element) {
        if (element != null && !list.isEmpty() && !list.get(0).getClass().isInstance(element)) {
            throw new ClassCastException("Type of the specified element is incompatible with this list");
        }
        if (element == null && !list.contains(null)) {
            throw new NullPointerException("This list does not permit null elements");
        }
        return list.contains(element);
    }

    public static <E> void addToList(List<E> list, int index, E element) {
        if (element != null && !list.isEmpty() && !list.get(0).getClass().isInstance(element)) {
            throw new ClassCastException("Class of the specified element prevents it from being added to this list");
        }
        if (element == null && !list.contains(null)) {
            throw new NullPointerException("This list does not permit null elements");
        }
        if (!list.add(element)) {
            throw new UnsupportedOperationException("Add operation is not supported by this list");
        }
        if (list.get(index) != element) {
            throw new IllegalArgumentException("Some property of this element prevents it from being added to this list");
        }
    }
}
```

The `containsElement` method now checks if the type of the specified element is incompatible with the list and throws a `ClassCastException` if it is. It also checks if the specified element is null and the list does not permit null elements, and throws a `NullPointerException` if it does.

The `addToList` method now checks if the class of the specified element prevents it from being added to the list and throws a `ClassCastException` if it does. It also checks if the specified element is null and the list does not permit null elements, and throws a `NullPointerException` if it does.
------------------------------------------------------
