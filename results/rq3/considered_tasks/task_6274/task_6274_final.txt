
Sure, here's an updated version of the Java method that checks for the conditions you mentioned:

```java
public LocalDateTime addTime(LocalDateTime dateTime, long amount, TemporalUnit unit) {
    try {
        return dateTime.plus(amount, unit);
    } catch (DateTimeException e) {
        System.err.println("Error: Addition cannot be made for LocalDateTime.plus(long, TemporalUnit)");
        throw e;
    } catch (UnsupportedTemporalTypeException e) {
        System.err.println("Error: Unit is not supported for LocalDateTime.plus(long, TemporalUnit)");
        throw e;
    } catch (ArithmeticException e) {
        System.err.println("Error: Numeric overflow occurs for LocalDateTime.plus(long, TemporalUnit)");
        throw e;
    }
}
```

This method takes in three parameters:

1. `dateTime`: the date-time to which the amount should be added
2. `amount`: the amount to add
3. `unit`: the unit of time in which the amount is specified (e.g. `ChronoUnit.HOURS`, `ChronoUnit.MINUTES`, etc.)

The `plus` method of the `LocalDateTime` class is used to add the specified amount to the given date-time. This method throws a `DateTimeException` if the addition cannot be made, an `UnsupportedTemporalTypeException` if the unit is not supported, or an `ArithmeticException` if numeric overflow occurs.

In the updated method, we catch these exceptions and print an error message to the console before re-throwing the exception.

You can call this method like this:

```java
LocalDateTime dateTime = LocalDateTime.now();
try {
    LocalDateTime newDateTime = addTime(dateTime, Long.MAX_VALUE, ChronoUnit.HOURS);
} catch (Exception e) {
    e.printStackTrace();
}
```

This will attempt to add the maximum possible value of hours to the current date-time, which will result in a numeric overflow and throw an `ArithmeticException`. The error message will be printed to the console before the exception is re-thrown.
------------------------------------------------------
