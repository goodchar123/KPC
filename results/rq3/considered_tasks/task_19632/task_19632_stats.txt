{"loop_id": 0, "unhandled_api_list": ["java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)", "java.lang.Byte.parseByte(java.lang.String)", "java.lang.Short.parseShort(java.lang.String)", "java.lang.Integer.parseInt(java.lang.String)", "java.lang.Long.parseLong(java.lang.String)", "java.lang.Float.parseFloat(java.lang.String)", "java.lang.Float.parseFloat(java.lang.String)", "java.lang.Double.parseDouble(java.lang.String)", "java.lang.Double.parseDouble(java.lang.String)", "java.lang.String.charAt(int)"], "num_of_unhandled_api": 14, "unhandled_exception_list": ["Please check if this Method object              is enforcing Java language access control and the underlying              method is inaccessible. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalAccessException.", "Please check if the method is an              instance method and the specified object argument              is not an instance of the class or interface              declaring the underlying method (or of a subclass              or implementor thereof); if the number of actual              and formal parameters differ; if an unwrapping              conversion for primitive arguments fails; or if,              after possible unwrapping, a parameter value              cannot be converted to the corresponding formal              parameter type by a method invocation conversion. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if the underlying method              throws an exception. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw InvocationTargetException.", "Please check if the specified object is null              and the method is an instance method. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the initialization provoked by this method fails. for java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) in the code snippet you provided, otherwise throw ExceptionInInitializerError.", "Please check if the string does not                  contain a parsable byte. for java.lang.Byte.parseByte(java.lang.String) in the code snippet you provided, otherwise throw NumberFormatException.", "Please check If the string does not          contain a parsable short. for java.lang.Short.parseShort(java.lang.String) in the code snippet you provided, otherwise throw NumberFormatException.", "Please check if the string does not contain a               parsable integer. for java.lang.Integer.parseInt(java.lang.String) in the code snippet you provided, otherwise throw NumberFormatException.", "Please check if the string does not contain a             parsable long. for java.lang.Long.parseLong(java.lang.String) in the code snippet you provided, otherwise throw NumberFormatException.", "Please check if the string is null for java.lang.Float.parseFloat(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the string does not contain a               parsable float. for java.lang.Float.parseFloat(java.lang.String) in the code snippet you provided, otherwise throw NumberFormatException.", "Please check if the string is null for java.lang.Double.parseDouble(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the string does not contain         a parsable double. for java.lang.Double.parseDouble(java.lang.String) in the code snippet you provided, otherwise throw NumberFormatException.", "Please check if the index             argument is negative or not less than the length of this             string. for java.lang.String.charAt(int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException."], "num_of_unhandled_exception": 14}
{"loop_id": 1, "unhandled_api_list": ["java.lang.String.charAt(int)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if the index             argument is negative or not less than the length of this             string. for java.lang.String.charAt(int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException."], "num_of_unhandled_exception": 1}
{"loop_id": 2, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
