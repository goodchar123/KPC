
Thank you for the feedback. Here's an updated implementation that checks for the specified conditions and throws the appropriate exceptions:

```java
public static MethodTypeDesc removeParameterTypes(MethodTypeDesc original, int startIndex, int endIndex) {
    List<TypeDesc> paramTypes = original.getParameterTypes();
    int size = paramTypes.size();
    
    if (startIndex < 0 || endIndex > size || startIndex > endIndex) {
        throw new IndexOutOfBoundsException("Invalid endpoint index values");
    }
    
    List<TypeDesc> newParamTypes = paramTypes.subList(startIndex, endIndex);
    
    try {
        newParamTypes.clear();
    } catch (UnsupportedOperationException e) {
        throw new UnsupportedOperationException("Clear operation not supported by parameter types list");
    }
    
    return new MethodTypeDesc(original.getReturnType(), paramTypes);
}
```

This implementation first checks if the specified endpoint index values are valid using the conditions you provided. If they are not, it throws an `IndexOutOfBoundsException` with an appropriate message.

Then, it creates a new sublist of parameter types using the `subList()` method, which may throw an `IndexOutOfBoundsException` if the specified indices are out of range. However, since we have already checked the indices, this should not happen.

Next, it attempts to clear the new sublist using the `clear()` method, which may throw an `UnsupportedOperationException` if the list does not support the `clear()` operation. If this happens, it throws an `UnsupportedOperationException` with an appropriate message.

Finally, it creates a new `MethodTypeDesc` object with the original return type and the modified parameter types (which were not cleared), and returns it.
------------------------------------------------------
