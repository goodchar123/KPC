
Here's an updated Java method that includes the requested checks and exceptions:

```java
public boolean addLast(E element) {
    if (element == null && !allowsNull) {
        throw new NullPointerException("This deque does not permit null elements");
    }
    if (size() == capacity) {
        throw new IllegalStateException("Capacity restrictions prevent adding element to deque");
    }
    if (!element.getClass().isInstance(deque.getClass().getComponentType())) {
        throw new ClassCastException("The class of the specified element prevents it from being added to this deque");
    }
    deque[size++] = element;
    return true;
}
```

This method first checks if the specified element is null and the deque does not permit null elements. If this is the case, it throws a `NullPointerException`. Next, it checks if the deque is already at capacity. If it is, it throws an `IllegalStateException`. Then, it checks if the class of the specified element is compatible with the class of the deque's elements. If it is not, it throws a `ClassCastException`. Finally, if all checks pass, it adds the element to the end of the deque and returns true to indicate success. If any of the checks fail, an appropriate exception is thrown.
------------------------------------------------------
