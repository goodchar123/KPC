
Sure, here's the updated Java method that checks for the security manager and the specified conditions:

```java
public Field[] getAllFields(Class<?> clazz) throws SecurityException {
    SecurityManager s = System.getSecurityManager();
    if (s != null) {
        ClassLoader callerClassLoader = getClass().getClassLoader();
        ClassLoader targetClassLoader = clazz.getClassLoader();
        if (callerClassLoader != targetClassLoader && 
            s.checkPermission(new RuntimePermission("accessDeclaredMembers")) != null) {
            throw new SecurityException("Access to declared fields denied by security manager");
        }
        if (!callerClassLoader.isAncestorOf(targetClassLoader) && 
            s.checkPackageAccess(clazz.getPackage().getName()) != null) {
            throw new SecurityException("Access to package denied by security manager");
        }
    }
    return clazz.getDeclaredFields();
}
```

This method first checks if a security manager is present using `System.getSecurityManager()`. If a security manager is present, it checks if the caller's class loader is not the same as the class loader of the target class and if the `s.checkPermission()` method with `RuntimePermission("accessDeclaredMembers")` denies access to the declared fields within the target class. It also checks if the caller's class loader is not the same as or an ancestor of the class loader for the target class and if the `s.checkPackageAccess()` method denies access to the package of the target class. If any of these conditions are met, a `SecurityException` is thrown. Otherwise, the method returns an array of Field objects representing all the fields declared by the target class.
------------------------------------------------------
