
Sure, here's an updated version of the code snippet that includes the requested checks:

```
public interface BlockingDeque<E> extends BlockingQueue<E>, Deque<E> {

    void addFirst(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    void addLast(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    void putFirst(E e) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    void putLast(E e) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offerFirst(E e);

    boolean offerLast(E e);

    E takeFirst() throws InterruptedException;

    E takeLast() throws InterruptedException;

    E pollFirst(long timeout, TimeUnit unit) throws InterruptedException;

    E pollLast(long timeout, TimeUnit unit) throws InterruptedException;

    E pollFirst();

    E pollLast();

    boolean removeFirstOccurrence(Object o);

    boolean removeLastOccurrence(Object o);

    boolean add(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    void put(E e) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offer(E e);

    E remove() throws NoSuchElementException;

    E poll(long timeout, TimeUnit unit) throws InterruptedException;

    E take() throws InterruptedException;

    E poll();

    E element() throws NoSuchElementException {
        E e = peek();
        if (e == null) {
            throw new NoSuchElementException();
        }
        return e;
    }

    E peek();

    void push(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    E pop() throws NoSuchElementException {
        E e = poll();
        if (e == null) {
            throw new NoSuchElementException();
        }
        return e;
    }

    boolean remove(Object o);

    int size();

    boolean contains(Object o);

    Iterator<E> iterator();

    Iterator<E> descendingIterator();

    boolean addAll(Collection<? extends E> c) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    void clear();

    boolean retainAll(Collection<?> c);

    boolean removeAll(Collection<?> c);

    boolean containsAll(Collection<?> c);

    Object[] toArray();

    <T> T[] toArray(T[] a);
}
```

I added the necessary checks to the `element()` and `pop()` methods to ensure that a `NoSuchElementException` is thrown if the deque is empty.
------------------------------------------------------
