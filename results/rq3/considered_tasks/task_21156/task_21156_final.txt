
Sure, here's the updated code snippet that checks if the current event is a `START_ELEMENT` and if the element has text content before calling `getElementText()`. If the current event is not a `START_ELEMENT` or if a non-text element is encountered, it throws an `XMLStreamException`:

```java
import java.math.BigDecimal;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

public BigDecimal getNextBigDecimal(XMLStreamReader reader) throws XMLStreamException {
    if (reader.getEventType() != XMLStreamReader.START_ELEMENT) {
        throw new XMLStreamException("Current event is not a START_ELEMENT");
    }
    if (!reader.hasText()) {
        throw new XMLStreamException("Current element does not have text content");
    }
    String value = reader.getElementText();
    try {
        return new BigDecimal(value);
    } catch (NumberFormatException e) {
        throw new XMLStreamException("Cannot parse text content as BigDecimal", e);
    }
}
```

This updated method first checks if the current event is a `START_ELEMENT` using the `getEventType()` method of the `XMLStreamReader` class. If it's not a `START_ELEMENT`, it throws an `XMLStreamException` with an appropriate message.

Next, it checks if the current element has text content using the `hasText()` method of the `XMLStreamReader` class. If it doesn't have text content, it throws an `XMLStreamException` with an appropriate message.

If the current element has text content, it reads the text content using the `getElementText()` method of the `XMLStreamReader` class and tries to parse it as a `BigDecimal`. If the parsing fails, it throws an `XMLStreamException` with an appropriate message and the original `NumberFormatException` as the cause.
------------------------------------------------------
