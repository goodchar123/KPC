
Sure, here's an updated version of the `getObjectSize` method that checks for `InvalidClassException` and `NotSerializableException`:

```java
public static long getObjectSize(Object obj) throws IOException {
    ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
    ObjectOutputStream objOut = new ObjectOutputStream(byteOut);
    try {
        objOut.writeObject(obj);
        objOut.flush();
    } catch (InvalidClassException e) {
        throw new InvalidClassException("Something is wrong with a class used by serialization.", e.getMessage());
    } catch (NotSerializableException e) {
        throw new NotSerializableException("Some object to be serialized does not implement the java.io.Serializable interface.");
    } finally {
        objOut.close();
    }
    return byteOut.toByteArray().length;
}
```

This version of the method catches `InvalidClassException` and `NotSerializableException` and throws more specific exceptions with appropriate error messages. It also properly closes the `ObjectOutputStream` in a `finally` block to ensure that resources are properly released.
------------------------------------------------------
