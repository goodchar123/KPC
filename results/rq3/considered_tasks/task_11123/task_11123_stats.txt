{"loop_id": 0, "unhandled_api_list": ["java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)", "java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)", "java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)", "java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)", "java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...)", "java.nio.channels.FileChannel.position(long)", "java.nio.channels.FileChannel.position(long)", "java.nio.channels.FileChannel.position(long)", "java.nio.channels.FileChannel.read(java.nio.ByteBuffer)", "java.nio.channels.FileChannel.read(java.nio.ByteBuffer)", "java.nio.channels.FileChannel.read(java.nio.ByteBuffer)"], "num_of_unhandled_api": 11, "unhandled_exception_list": ["Please check If the set contains an invalid combination of options for java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check If the path is associated with a provider that does not          support creating file channels, or an unsupported open option is          specified for java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check If a file of that name already exists and the CREATE_NEW option is specified          and the file is being opened for writing          (optional          specific exception) for java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...) in the code snippet you provided, otherwise throw FileAlreadyExistsException.", "Please check If an I/O error occurs for java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...) in the code snippet you provided, otherwise throw IOException.", "Please check If a security manager is installed and it denies an          unspecified permission required by the implementation.          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check          write access if the file is opened for writing for java.nio.channels.FileChannel.open(java.nio.file.Path,java.nio.file.OpenOption...) in the code snippet you provided, otherwise throw SecurityException.", "Please check If this channel is closed for java.nio.channels.FileChannel.position(long) in the code snippet you provided, otherwise throw ClosedChannelException.", "Please check If the new position is negative for java.nio.channels.FileChannel.position(long) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check If some other I/O error occurs for java.nio.channels.FileChannel.position(long) in the code snippet you provided, otherwise throw IOException.", "Please check If this channel is closed for java.nio.channels.FileChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw ClosedChannelException.", "Please check If another thread closes this channel          while the read operation is in progress for java.nio.channels.FileChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw AsynchronousCloseException.", "Please check If another thread interrupts the current thread          while the read operation is in progress, thereby          closing the channel and setting the current thread's          interrupt status for java.nio.channels.FileChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw ClosedByInterruptException."], "num_of_unhandled_exception": 11}
{"loop_id": 1, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
