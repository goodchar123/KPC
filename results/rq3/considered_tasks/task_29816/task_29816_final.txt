
Sure, here's the updated Java method that checks if the index argument is negative or not less than the length of the string, and throws an `IndexOutOfBoundsException` if it is:

```java
public static int findEndOfWord(String text, int location) {
    if (location < 0 || location >= text.length()) {
        throw new IndexOutOfBoundsException("Invalid location: " + location);
    }
    int endOfWord = location;
    while (endOfWord < text.length() && Character.isLetter(text.charAt(endOfWord))) {
        endOfWord++;
    }
    return endOfWord;
}
```

This method first checks if the `location` is negative or greater than or equal to the length of the `text` string. If it is, it throws an `IndexOutOfBoundsException` with a message indicating the invalid location.

You can call this method like this:

```java
String text = "Hello, world!";
int location = 6;
int endOfWord = findEndOfWord(text, location);
System.out.println(endOfWord); // Output: 12
```

If you call the method with an invalid location like this:

```java
String text = "Hello, world!";
int location = -1;
int endOfWord = findEndOfWord(text, location);
```

It will throw an `IndexOutOfBoundsException` with the message "Invalid location: -1".
------------------------------------------------------
