
Sure, here's the updated code snippet that checks for an I/O error when closing the `FileOutputStream` and throws an `IOException` if one occurs:

```java
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.xwpf.usermodel.*;

public class DocumentEditor {
    public static void insertContent(String filePath, String content) throws IOException {
        XWPFDocument document = new XWPFDocument();
        XWPFParagraph paragraph = document.createParagraph();
        XWPFRun run = paragraph.createRun();
        run.setText(content);
        FileOutputStream out = new FileOutputStream(filePath);
        try {
            document.write(out);
        } finally {
            try {
                out.close();
            } catch (IOException e) {
                throw new IOException("Error closing FileOutputStream: " + e.getMessage());
            }
        }
        System.out.println("Content inserted successfully.");
    }
}
```

This updated method now throws an `IOException` if an error occurs when closing the `FileOutputStream`. The `try-finally` block ensures that the `FileOutputStream` is always closed, even if an exception is thrown while writing to the document.
------------------------------------------------------
