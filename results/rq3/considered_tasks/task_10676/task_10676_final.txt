
Sure, here's an updated version of the method that checks for invalid regular expression syntax and throws a `PatternSyntaxException` if necessary:

```
import java.util.regex.PatternSyntaxException;

public static void parseString(String inputString, String regex) throws PatternSyntaxException {
    try {
        String[] words = inputString.split(regex);
        for (String word : words) {
            System.out.println(word);
        }
    } catch (PatternSyntaxException e) {
        throw e;
    }
}
```

This updated method takes in two parameters: the input string and the regular expression to use for splitting the string. It then tries to split the string using the provided regular expression. If the regular expression syntax is invalid, a `PatternSyntaxException` is thrown. If the regular expression is valid, the method loops through each word in the resulting array and prints it out to the console.
------------------------------------------------------
