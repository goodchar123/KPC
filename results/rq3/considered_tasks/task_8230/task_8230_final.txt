
Here is an updated version of the Java method that implements the Executor interface and includes the requested checks:

```
import java.util.concurrent.Executor;
import java.util.concurrent.RejectedExecutionException;

public class MyExecutor implements Executor {
    
    @Override
    public void execute(Runnable command) {
        if (command == null) {
            throw new NullPointerException("Command cannot be null");
        }
        Thread thread = new Thread(command);
        if (thread.getState() != Thread.State.NEW) {
            throw new IllegalThreadStateException("Thread was already started");
        }
        try {
            thread.start();
        } catch (IllegalThreadStateException e) {
            throw new RejectedExecutionException("Task cannot be accepted for execution", e);
        }
    }
    
}
```

This implementation checks if the `command` parameter is null and throws a `NullPointerException` if it is. It also checks if the thread was already started and throws an `IllegalThreadStateException` if it was. Finally, it catches any `IllegalThreadStateException` that may occur when starting the thread and throws a `RejectedExecutionException` with the original exception as the cause.
------------------------------------------------------
