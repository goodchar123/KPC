
Sure, here's an updated version of the Java method that checks for the condition you mentioned:

```java
public void bindChannelSocketToAddress(SocketChannel channel, InetSocketAddress address) throws IOException {
    if (!(channel.socket() instanceof java.net.InetSocketAddress)) {
        throw new UnsupportedOperationException("Socket is not an Internet protocol socket");
    }
    try {
        channel.socket().bind(address);
    } catch (SocketException e) {
        if (e.getMessage().contains("already bound")) {
            // Socket is already bound
            return;
        } else if (e.getMessage().contains("not supported")) {
            // Bindpoint is not supported by this socket
            throw new IllegalArgumentException(e);
        } else {
            // Other SocketException occurred
            throw new IOException(e);
        }
    }
}
```

This updated method first checks if the channel's socket is an instance of `java.net.InetSocketAddress`. If it is not, the method throws an `UnsupportedOperationException`.

If the socket is an instance of `java.net.InetSocketAddress`, the method proceeds with the bind operation. If a `SocketException` occurs, the method checks the exception message to see if it contains the string "already bound". If it does, the method simply returns, since the socket is already bound to the specified address. If the message contains the string "not supported", the method throws an `IllegalArgumentException`. Otherwise, the method throws an `IOException`.

Note that this updated method assumes that the `InetSocketAddress` object passed as the `address` parameter is a valid address. You may want to add additional checks to handle invalid addresses if necessary.
------------------------------------------------------
