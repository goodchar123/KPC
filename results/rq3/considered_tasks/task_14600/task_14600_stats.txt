{"loop_id": 0, "unhandled_api_list": ["java.util.stream.Stream.limit(long)", "java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.Scanner.next()"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if no more tokens are available for java.util.Scanner.next() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException."], "num_of_unhandled_exception": 4}
{"loop_id": 1, "unhandled_api_list": ["java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.stream.Stream.limit(long)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 3}
{"loop_id": 2, "unhandled_api_list": ["java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.stream.Stream.limit(long)"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if no more tokens are available for java.util.Scanner.next() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 3}
{"loop_id": 3, "unhandled_api_list": ["java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.Scanner.next()", "java.util.stream.Stream.limit(long)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if no more tokens are available for java.util.Scanner.next() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 4}
{"loop_id": 4, "unhandled_api_list": ["java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.Scanner.next()", "java.util.stream.Stream.limit(long)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if no more tokens are available for java.util.Scanner.next() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 4}
{"loop_id": 5, "unhandled_api_list": ["java.util.stream.Stream.limit(long)", "java.util.Scanner.hasNext()", "java.util.Scanner.next()"], "num_of_unhandled_api": 3, "unhandled_exception_list": ["Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException."], "num_of_unhandled_exception": 3}
{"loop_id": 6, "unhandled_api_list": ["java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.Scanner.next()", "java.util.stream.Stream.limit(long)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if no more tokens are available for java.util.Scanner.next() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 4}
{"loop_id": 7, "unhandled_api_list": ["java.util.Scanner.hasNext()", "java.util.Scanner.next()", "java.util.Scanner.next()", "java.util.stream.Stream.limit(long)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if this scanner is closed for java.util.Scanner.hasNext() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if no more tokens are available for java.util.Scanner.next() in the code snippet you provided, otherwise throw NoSuchElementException.", "Please check if this scanner is closed for java.util.Scanner.next() in the code snippet you provided, otherwise throw IllegalStateException.", "Please check if maxSize is negative for java.util.stream.Stream.limit(long) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 4}
{"loop_id": 8, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
