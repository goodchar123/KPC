
Sure, here's the updated Java method that checks if the result exceeds the supported range or if the nano of second is invalid for `java.time.LocalDateTime.ofEpochSecond(long,int,java.time.ZoneOffset)`, and throws a `DateTimeException` if either condition is met:

```java
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;

public class Example {
    public static LocalDateTime getLocalDateTimeFromEpochSeconds(long epochSeconds, int nanoOfSecond) {
        try {
            return LocalDateTime.ofEpochSecond(epochSeconds, nanoOfSecond, ZoneOffset.UTC);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Invalid epoch seconds or nano of second value", e);
        }
    }
}
```

This method takes two arguments: a `long` value representing the number of seconds since the epoch of 1970-01-01T00:00:00Z, and an `int` value representing the nano of second. The `ofEpochSecond` method is used to create the `LocalDateTime` object, with the `ZoneOffset.UTC` argument specifying the time zone offset to use.

If the result exceeds the supported range or if the nano of second is invalid, a `DateTimeException` is thrown with a message indicating the cause of the exception.
------------------------------------------------------
