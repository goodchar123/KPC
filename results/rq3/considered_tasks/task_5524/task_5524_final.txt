
Sure, here's the updated Java method that checks for a security manager and LoggingPermission before resetting the logging configuration:

```java
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.logging.LogManager;
import java.util.logging.LoggingPermission;

public void resetLoggingConfiguration() throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        try {
            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
                public Void run() throws SecurityException {
                    sm.checkPermission(new LoggingPermission("control", null));
                    return null;
                }
            });
        } catch (PrivilegedActionException e) {
            throw (SecurityException) e.getException();
        }
    }
    LogManager.getLogManager().reset();
}
```

This updated method first checks if a security manager is present using `System.getSecurityManager()`. If a security manager is present, it uses `AccessController.doPrivileged()` to check if the caller has the `LoggingPermission("control")`. If the caller does not have this permission, a `SecurityException` is thrown. If no security manager is present, the method proceeds to reset the logging configuration using `LogManager.getLogManager().reset()`.
------------------------------------------------------
