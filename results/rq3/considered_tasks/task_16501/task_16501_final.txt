
You are correct, it is important to check if the current thread is the owner of the object's monitor before calling `wait()` or `notify()` methods. Here's an updated version of the code snippet that includes these checks and throws `IllegalMonitorStateException` if the current thread is not the owner of the monitor:

```java
public void waitForSignal() throws InterruptedException {
    synchronized(this) {
        if (!Thread.holdsLock(this)) {
            throw new IllegalMonitorStateException("Current thread is not the owner of the monitor");
        }
        wait();
    }
}

public void signal() {
    synchronized(this) {
        if (!Thread.holdsLock(this)) {
            throw new IllegalMonitorStateException("Current thread is not the owner of the monitor");
        }
        notify();
    }
}
```

The `Thread.holdsLock()` method is used to check if the current thread is the owner of the monitor. If it is not, an `IllegalMonitorStateException` is thrown. This ensures that the `wait()` and `notify()` methods are only called by the thread that owns the monitor.
------------------------------------------------------
