Please write a java method that Returns the logical bounds of the specified glyph within this GlyphVector.
Here's the Java method that returns the logical bounds of the specified glyph within a GlyphVector:

```
public Rectangle2D getGlyphLogicalBounds(int glyphIndex) {
    Rectangle2D bounds = getGlyphVisualBounds(glyphIndex);
    AffineTransform transform = getGlyphTransform(glyphIndex);
    if (transform != null) {
        bounds = transform.createTransformedShape(bounds).getBounds2D();
    }
    return bounds;
}
```

This method first gets the visual bounds of the glyph using the `getGlyphVisualBounds` method. It then checks if there is a transform associated with the glyph using the `getGlyphTransform` method. If there is a transform, it applies the transform to the visual bounds using the `createTransformedShape` method and gets the bounds of the transformed shape. Finally, it returns the logical bounds of the glyph as a `Rectangle2D` object.
------------------------------------------------------
Please check if glyphIndex   is less than 0 or greater than or equal to the number   of glyphs in this GlyphVector for java.awt.font.GlyphVector.getGlyphVisualBounds(int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
Please check if glyphIndex   is less than 0 or greater than or equal to the number   of glyphs in this GlyphVector for java.awt.font.GlyphVector.getGlyphTransform(int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
Sure, here's the updated code snippet that checks for the bounds of `glyphIndex` and throws an `IndexOutOfBoundsException` if it's out of range:

```
public Rectangle2D getGlyphLogicalBounds(int glyphIndex) {
    int numGlyphs = getNumGlyphs();
    if (glyphIndex < 0 || glyphIndex >= numGlyphs) {
        throw new IndexOutOfBoundsException("glyphIndex is out of range");
    }
    Rectangle2D bounds = getGlyphVisualBounds(glyphIndex);
    AffineTransform transform = getGlyphTransform(glyphIndex);
    if (transform != null) {
        bounds = transform.createTransformedShape(bounds).getBounds2D();
    }
    return bounds;
}

public AffineTransform getGlyphTransform(int glyphIndex) {
    int numGlyphs = getNumGlyphs();
    if (glyphIndex < 0 || glyphIndex >= numGlyphs) {
        throw new IndexOutOfBoundsException("glyphIndex is out of range");
    }
    return getGlyphTransforms()[glyphIndex];
}
```

Now, before getting the visual bounds or transform of the glyph, the method checks if `glyphIndex` is within the valid range of 0 to `numGlyphs-1`. If it's out of range, it throws an `IndexOutOfBoundsException` with a message indicating that `glyphIndex` is out of range.
------------------------------------------------------
