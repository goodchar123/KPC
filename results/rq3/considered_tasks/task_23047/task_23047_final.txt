
Sure, here's the updated code snippet that checks for the bounds of `glyphIndex` and throws an `IndexOutOfBoundsException` if it's out of range:

```
public Rectangle2D getGlyphLogicalBounds(int glyphIndex) {
    int numGlyphs = getNumGlyphs();
    if (glyphIndex < 0 || glyphIndex >= numGlyphs) {
        throw new IndexOutOfBoundsException("glyphIndex is out of range");
    }
    Rectangle2D bounds = getGlyphVisualBounds(glyphIndex);
    AffineTransform transform = getGlyphTransform(glyphIndex);
    if (transform != null) {
        bounds = transform.createTransformedShape(bounds).getBounds2D();
    }
    return bounds;
}

public AffineTransform getGlyphTransform(int glyphIndex) {
    int numGlyphs = getNumGlyphs();
    if (glyphIndex < 0 || glyphIndex >= numGlyphs) {
        throw new IndexOutOfBoundsException("glyphIndex is out of range");
    }
    return getGlyphTransforms()[glyphIndex];
}
```

Now, before getting the visual bounds or transform of the glyph, the method checks if `glyphIndex` is within the valid range of 0 to `numGlyphs-1`. If it's out of range, it throws an `IndexOutOfBoundsException` with a message indicating that `glyphIndex` is out of range.
------------------------------------------------------
