
Here's the updated Java method that includes the requested checks:

```java
public static Temporal adjustToSameOffset(Temporal temporal, Temporal reference) {
    ZoneOffset offset = reference.query(TemporalQueries.offset());
    Temporal adjustedTemporal = null;
    try {
        adjustedTemporal = temporal.with(ChronoField.OFFSET_SECONDS, offset.getTotalSeconds());
    } catch (DateTimeException e) {
        // Field cannot be set
        throw new DateTimeException("Cannot set field for Temporal: " + e.getMessage());
    } catch (UnsupportedTemporalTypeException e) {
        // Field is not supported
        throw new UnsupportedTemporalTypeException("Field not supported for Temporal: " + e.getMessage());
    } catch (ArithmeticException e) {
        // Numeric overflow occurs
        throw new ArithmeticException("Numeric overflow occurred for Temporal: " + e.getMessage());
    }
    return adjustedTemporal;
}
```

This method first queries the offset of the reference object using `TemporalQueries.offset()`, and then sets the same offset on the temporal object using `with(ChronoField.OFFSET_SECONDS, offset.getTotalSeconds())`. 

The method includes three catch blocks to handle potential exceptions that may occur when setting the field:

- `DateTimeException`: if the field cannot be set for the temporal object, a `DateTimeException` is thrown with a message indicating the issue.
- `UnsupportedTemporalTypeException`: if the field is not supported for the temporal object, an `UnsupportedTemporalTypeException` is thrown with a message indicating the issue.
- `ArithmeticException`: if numeric overflow occurs when setting the field, an `ArithmeticException` is thrown with a message indicating the issue.

These checks ensure that the method handles potential issues that may arise when setting the field on the temporal object.
------------------------------------------------------
