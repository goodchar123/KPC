
Here's an updated version of the Java method that includes the error checking you requested:

```java
public void updateRow(ResultSet rs) throws SQLException {
    if (rs.isClosed()) {
        throw new SQLException("Result set is closed");
    }
    int concurrency = rs.getConcurrency();
    if (concurrency == ResultSet.CONCUR_READ_ONLY) {
        throw new SQLException("Result set concurrency is CONCUR_READ_ONLY");
    }
    try {
        if (rs.isBeforeFirst()) {
            throw new SQLFeatureNotSupportedException("JDBC driver does not support isBeforeFirst()");
        }
        if (rs.isAfterLast()) {
            throw new SQLFeatureNotSupportedException("JDBC driver does not support isAfterLast()");
        }
        rs.updateString("column1", "new value");
        rs.updateInt("column2", 123);
        rs.updateRow();
    } catch (SQLException e) {
        int errorCode = e.getErrorCode();
        if (errorCode == 0) {
            if (!isValidColumnLabel("column1", rs)) {
                throw new SQLException("Invalid column label: column1");
            }
            if (!isValidColumnLabel("column2", rs)) {
                throw new SQLException("Invalid column label: column2");
            }
            throw new SQLFeatureNotSupportedException("JDBC driver does not support updateRow()");
        } else {
            throw e;
        }
    }
}

private boolean isValidColumnLabel(String columnLabel, ResultSet rs) throws SQLException {
    ResultSetMetaData metaData = rs.getMetaData();
    if (metaData == null) {
        throw new SQLException("Result set metadata is null");
    }
    int columnCount;
    try {
        columnCount = metaData.getColumnCount();
    } catch (SQLException e) {
        throw new SQLException("Error getting column count", e);
    }
    for (int i = 1; i <= columnCount; i++) {
        try {
            if (columnLabel.equals(metaData.getColumnLabel(i))) {
                return true;
            }
        } catch (SQLException e) {
            throw new SQLException("Error getting column label for column " + i, e);
        }
    }
    return false;
}
```

In this updated version, we first check if the ResultSet object is closed or if the result set concurrency is CONCUR_READ_ONLY. If either of these conditions is true, we throw a SQLException.

We then check if the JDBC driver supports the `isBeforeFirst` and `isAfterLast` methods. If the driver does not support these methods, we throw a `SQLFeatureNotSupportedException`.

We then try to update the row using the `updateString` and `updateInt` methods, and call `updateRow` to update the underlying database. If an SQLException is thrown, we check if the error code is 0, which indicates that the JDBC driver does not support the `updateRow` method. In this case, we check if the column labels are valid using the `isValidColumnLabel` method, and throw a `SQLFeatureNotSupportedException` if they are not. Otherwise, we re-throw the original SQLException.

The `isValidColumnLabel` method checks if the ResultSetMetaData object is null, and throws a SQLException if it is. It then tries to get the column count using the `getColumnCount` method, and throws a SQLException if an error occurs. It then loops through the columns and tries to get the column label for each column. If an SQLException is thrown while getting the column label, it is re-thrown with a more informative error message.
------------------------------------------------------
