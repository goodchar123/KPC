
Sure, here's the updated Java method that checks for invalid format and missing zone region ID:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.zone.ZoneRulesException;

public class DateHelper {
    public static LocalDate getCurrentLocalDate() {
        ZoneId defaultZoneId = null;
        try {
            defaultZoneId = ZoneId.systemDefault();
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid format for system default zone ID", e);
        } catch (ZoneRulesException e) {
            throw new ZoneRulesException("System default zone region ID not found", e);
        }
        return LocalDate.now(defaultZoneId);
    }
}
```

This updated method first tries to obtain the default time-zone using `ZoneId.systemDefault()` method. If the format of the zone ID is invalid, it throws a `DateTimeException` with a custom message. If the zone region ID cannot be found, it throws a `ZoneRulesException` with a custom message. If the default time-zone is successfully obtained, it uses the `LocalDate.now()` method to obtain the current date in the default time-zone.
------------------------------------------------------
