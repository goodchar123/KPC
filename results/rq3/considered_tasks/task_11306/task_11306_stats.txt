{"loop_id": 0, "unhandled_api_list": ["java.lang.Class.getResourceAsStream(java.lang.String)", "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)", "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)", "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)", "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)", "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)", "java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)"], "num_of_unhandled_api": 7, "unhandled_exception_list": ["Please check If name is null for java.lang.Class.getResourceAsStream(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.", "Please check If the buffer is read only for java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check If this channel was not opened for reading for java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw NonReadableChannelException.", "Please check If this channel is closed for java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw ClosedChannelException.", "Please check If another thread closes this channel          while the read operation is in progress for java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw AsynchronousCloseException.", "Please check If another thread interrupts the current thread          while the read operation is in progress, thereby          closing the channel and setting the current thread's          interrupt status for java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw ClosedByInterruptException.", "Please check If some other I/O error occurs for java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer) in the code snippet you provided, otherwise throw IOException."], "num_of_unhandled_exception": 7}
{"loop_id": 1, "unhandled_api_list": ["java.nio.ByteBuffer.allocate(int)", "java.io.InputStream.close()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check If the capacity is a negative integer for java.nio.ByteBuffer.allocate(int) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if an I/O error occurs. for java.io.InputStream.close() in the code snippet you provided, otherwise throw IOException."], "num_of_unhandled_exception": 2}
{"loop_id": 2, "unhandled_api_list": ["java.nio.ByteBuffer.allocate(int)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check If the capacity is a negative integer for java.nio.ByteBuffer.allocate(int) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 1}
{"loop_id": 3, "unhandled_api_list": ["java.nio.ByteBuffer.allocate(int)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check If the capacity is a negative integer for java.nio.ByteBuffer.allocate(int) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 1}
{"loop_id": 4, "unhandled_api_list": ["java.nio.ByteBuffer.allocate(int)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check If the capacity is a negative integer for java.nio.ByteBuffer.allocate(int) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 1}
{"loop_id": 5, "unhandled_api_list": ["java.nio.ByteBuffer.allocate(int)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check If the capacity is a negative integer for java.nio.ByteBuffer.allocate(int) in the code snippet you provided, otherwise throw IllegalArgumentException."], "num_of_unhandled_exception": 1}
{"loop_id": 6, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
