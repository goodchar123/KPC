
Here's the updated Java method that checks if the scanner is closed and throws an `IllegalStateException` if it is, and also checks if the regular expression pattern is valid and throws a `PatternSyntaxException` if it is not:

```java
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

public class TokenMatcher {
    public static boolean matchNextToken(String patternString) {
        Scanner scanner = new Scanner(System.in);
        Pattern pattern;
        try {
            pattern = Pattern.compile(patternString);
        } catch (PatternSyntaxException e) {
            throw new PatternSyntaxException("Invalid regular expression pattern", patternString, e.getIndex());
        }
        if (scanner.ioException() != null) {
            throw new IllegalStateException("Scanner is closed");
        }
        boolean hasNext = scanner.hasNext(pattern);
        scanner.close();
        return hasNext;
    }
}
```

This method first tries to compile the regular expression pattern using `Pattern.compile(patternString)`. If the pattern is invalid, it throws a `PatternSyntaxException` with a message indicating that the pattern is invalid.

Next, it checks if the scanner is closed using `scanner.ioException()`. If the scanner is closed, it throws an `IllegalStateException` with a message indicating that the scanner is closed.

Finally, it uses the `hasNext` method of the `Scanner` class to check if the next token matches the pattern. It then closes the scanner and returns `true` if the next token matches the pattern, and `false` otherwise.
------------------------------------------------------
