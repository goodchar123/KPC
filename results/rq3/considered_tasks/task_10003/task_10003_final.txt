
Sure, here's the updated code snippet that checks for `IOException` when calling `write()` and `close()` methods of `FileOutputStream`:

```java
import java.io.FileOutputStream;
import java.io.IOException;

public class ByteWriter {
    public static void writeByteToFile(byte b, String fileName) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(fileName)) {
            fos.write(b);
        } catch (IOException e) {
            throw new IOException("Error writing byte to file", e);
        }
    }
}
```

In this updated code, we have added a `catch` block to catch any `IOException` that may occur during the `write()` operation. If an `IOException` occurs, we throw a new `IOException` with a custom message and the original exception as the cause.

Similarly, we can also check for `IOException` when calling the `close()` method of `FileOutputStream`:

```java
import java.io.FileOutputStream;
import java.io.IOException;

public class ByteWriter {
    public static void writeByteToFile(byte b, String fileName) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(fileName)) {
            fos.write(b);
            fos.close();
        } catch (IOException e) {
            throw new IOException("Error writing byte to file", e);
        }
    }
}
```

In this updated code, we have added a call to the `close()` method after the `write()` operation. We have also added a `catch` block to catch any `IOException` that may occur during the `close()` operation. If an `IOException` occurs, we throw a new `IOException` with a custom message and the original exception as the cause.
------------------------------------------------------
