
Sure, here's an updated version of the method that includes the requested checks:

```java
public Object readDatum(InputStream stream) throws IOException {
    DataInputStream dataStream = new DataInputStream(stream);
    if (dataStream.available() == 0) {
        throw new EOFException();
    }
    byte type = dataStream.readByte();
    switch (type) {
        case 0: // null
            return null;
        case 1: // boolean
            if (dataStream.available() == 0) {
                throw new EOFException();
            }
            return dataStream.readBoolean();
        case 2: // byte
            if (dataStream.available() == 0) {
                throw new EOFException();
            }
            return dataStream.readByte();
        case 3: // char
            if (dataStream.available() < 2) {
                throw new EOFException();
            }
            return dataStream.readChar();
        case 4: // double
            if (dataStream.available() < 8) {
                throw new EOFException();
            }
            return dataStream.readDouble();
        case 5: // float
            if (dataStream.available() < 4) {
                throw new EOFException();
            }
            return dataStream.readFloat();
        case 6: // int
            if (dataStream.available() < 4) {
                throw new EOFException();
            }
            return dataStream.readInt();
        case 7: // long
            if (dataStream.available() < 8) {
                throw new EOFException();
            }
            return dataStream.readLong();
        case 8: // short
            if (dataStream.available() < 2) {
                throw new EOFException();
            }
            return dataStream.readShort();
        case 9: // string
            int length = dataStream.readUnsignedShort();
            if (dataStream.available() < length) {
                throw new EOFException();
            }
            byte[] bytes = new byte[length];
            dataStream.readFully(bytes);
            try {
                return new String(bytes, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                throw new UTFDataFormatException();
            }
        default:
            throw new IOException("Invalid type: " + type);
    }
}
```

This updated method first checks if the input stream has reached the end using the `available()` method of the `DataInputStream`. If the stream has reached the end, it throws an `EOFException`. It also checks if the stream has been closed or if another I/O error occurs, and throws an `IOException` in those cases.

For reading strings, it first reads the length of the string as an unsigned short, and then checks if the stream has enough bytes to read the entire string. If not, it throws an `EOFException`. It also checks if the bytes represent a valid modified UTF-8 encoding of a string, and throws a `UTFDataFormatException` if not.
------------------------------------------------------
