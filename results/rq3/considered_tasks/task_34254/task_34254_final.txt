
Sure, here's the updated Java method that checks for all the mentioned exceptions:

```java
import java.io.IOException;
import java.io.OutputStream;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.spi.MidiFileWriter;

public void writeMidiFile(OutputStream outputStream, Sequence sequence) throws IOException, InvalidMidiDataException {
    if (outputStream == null) {
        throw new NullPointerException("Output stream cannot be null");
    }
    if (sequence == null) {
        throw new NullPointerException("Sequence cannot be null");
    }
    MidiFileWriter midiFileWriter = MidiSystem.getMidiFileWriter();
    if (!midiFileWriter.isFileTypeSupported(0, sequence)) {
        throw new IllegalArgumentException("File type not supported");
    }
    try {
        midiFileWriter.write(sequence, 0, outputStream);
    } catch (IOException e) {
        throw new IOException("Error writing MIDI data to output stream", e);
    }
}
```

This updated method first checks if the `outputStream` and `sequence` parameters are not null. If either of them is null, a `NullPointerException` is thrown. 

Next, the method checks if the file type is supported by the `MidiFileWriter` using the `isFileTypeSupported` method. If the file type is not supported, an `IllegalArgumentException` is thrown.

Finally, the `write` method of the `MidiFileWriter` class is called with the `Sequence`, the type of MIDI file to be written (0 for a standard MIDI file), and the `OutputStream` to which the MIDI data should be written. If an `IOException` occurs during the write operation, it is caught and re-thrown as an `IOException` with a more descriptive error message.
------------------------------------------------------
