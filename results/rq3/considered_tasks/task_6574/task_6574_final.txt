
Sure, here's an updated version of the `addTemporalAmount()` method that includes the additional check for `DateTimeException`:

```java
import java.time.Duration;
import java.time.Period;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAmount;
import java.time.temporal.UnsupportedTemporalTypeException;

public class TemporalHelper {
    public static Temporal addPeriod(Temporal temporal, Period period) {
        try {
            return temporal.plus(period);
        } catch (UnsupportedTemporalTypeException e) {
            throw new DateTimeException("Cannot add period to temporal object", e);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow occurred while adding period to temporal object");
        }
    }
    
    public static Temporal addTemporalAmount(Temporal temporal, TemporalAmount amount) {
        try {
            if (amount instanceof Duration) {
                long seconds = ((Duration) amount).getSeconds();
                if (seconds < 0 && Long.MIN_VALUE / seconds > -1) {
                    throw new ArithmeticException("Numeric overflow occurred while multiplying duration by " + seconds);
                }
                if (seconds > 0 && Long.MAX_VALUE / seconds < 1) {
                    throw new ArithmeticException("Numeric overflow occurred while multiplying duration by " + seconds);
                }
            }
            Temporal result = temporal.plus(amount);
            if (result == null) {
                throw new DateTimeException("Cannot add temporal amount to temporal object");
            }
            return result;
        } catch (UnsupportedTemporalTypeException e) {
            throw new DateTimeException("Cannot add temporal amount to temporal object", e);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow occurred while adding temporal amount to temporal object");
        }
    }
}
```

In the updated `addTemporalAmount()` method, we first check if the result of adding the `TemporalAmount` to the `Temporal` object is `null`. If it is, we throw a `DateTimeException` with a descriptive error message.

You can call the updated method like this:

```java
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;

public class Main {
    public static void main(String[] args) {
        LocalDate date = LocalDate.of(2021, 10, 1);
        Period period = Period.ofMonths(2);
        TemporalAmount amount = ChronoUnit.DAYS.getDuration().multipliedBy(30);
        
        // Add a period to a temporal object
        LocalDate updatedDate = (LocalDate) TemporalHelper.addPeriod(date, period);
        System.out.println(updatedDate); // Output: 2021-12-01
        
        // Add a temporal amount to a temporal object
        LocalDate updatedDate2 = (LocalDate) TemporalHelper.addTemporalAmount(date, amount);
        System.out.println(updatedDate2); // Output: 2021-11-30
    }
}
```

In this example, we create a `LocalDate` object representing October 1, 2021, a `Period` object representing 2 months, and a `TemporalAmount` object representing 30 days. We then call the `addPeriod()` and `addTemporalAmount()` methods, passing in the date and period/amount objects. The methods return a `Temporal` object, which we cast back to a `LocalDate` object and print out to verify that the period/amount was added correctly. If an exception occurs during the addition, the method will throw a descriptive error message.
------------------------------------------------------
