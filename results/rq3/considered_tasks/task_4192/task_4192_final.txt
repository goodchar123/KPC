
Sure, here's an updated version of the `createDuration` method that checks if the adjustment causes the seconds to exceed the capacity of `Duration` for `java.time.Duration.ofSeconds(long,long)`. If it does, an `ArithmeticException` is thrown:

```java
import java.time.Duration;

public class DurationHelper {
    public static Duration createDuration(boolean isPositive, long years, long months, long days, long hours, long minutes, long seconds) {
        // Convert years and months to days
        long totalDays = years * 365 + months * 30;
        // Add remaining days, hours, minutes, and seconds
        totalDays += days;
        long totalSeconds = totalDays * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds;
        // Check if the total seconds exceed the capacity of Duration
        if (totalSeconds > Duration.ofSeconds(Long.MAX_VALUE).getSeconds() || totalSeconds < Duration.ofSeconds(Long.MIN_VALUE).getSeconds()) {
            throw new ArithmeticException("Duration exceeds capacity of Duration.ofSeconds(long,long)");
        }
        // Create the Duration object
        return isPositive ? Duration.ofSeconds(totalSeconds) : Duration.ofSeconds(-totalSeconds);
    }
}
```

This method first checks
------------------------------------------------------
