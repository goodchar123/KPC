
Here's an updated version of the Java method that includes the requested checks and exceptions:

```java
public static <K, V> void removeMapping(Map<K, V> map, K key) {
    if (key == null && !map.containsKey(null)) {
        throw new NullPointerException("This map does not permit null keys.");
    }
    try {
        if (!map.containsKey(key)) {
            return;
        }
        map.remove(key);
    } catch (ClassCastException e) {
        throw new ClassCastException("The key is of an inappropriate type for this map.");
    } catch (UnsupportedOperationException e) {
        throw new UnsupportedOperationException("The remove operation is not supported by this map.");
    }
}
```

This method first checks if the specified key is null and if the map does not permit null keys. If this is the case, it throws a `NullPointerException`. It then attempts to check if the map contains the key using the `containsKey()` method. If the key is not present, the method returns without doing anything. If the key is present, it attempts to remove the mapping using the `remove()` method. If the key is of an inappropriate type for the map, it throws a `ClassCastException`. If the remove operation is not supported by the map, it throws an `UnsupportedOperationException`.
------------------------------------------------------
