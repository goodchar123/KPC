
Sure, here's the updated code snippet that checks if the `glyphIndex` is within the valid range and throws an `IndexOutOfBoundsException` if it's not:

```
public Rectangle2D getGlyphVisualBounds(GlyphVector glyphVector, int glyphIndex) {
    int numGlyphs = glyphVector.getNumGlyphs();
    if (glyphIndex < 0 || glyphIndex >= numGlyphs) {
        throw new IndexOutOfBoundsException("Invalid glyph index: " + glyphIndex);
    }
    Rectangle2D bounds = glyphVector.getGlyphVisualBounds(glyphIndex).getBounds2D();
    AffineTransform transform = glyphVector.getGlyphTransform(glyphIndex);
    if (transform != null) {
        bounds = transform.createTransformedShape(bounds).getBounds2D();
    }
    return bounds;
}
```

And here's the updated code snippet for checking the `glyphIndex` parameter in the `getGlyphTransform` method:

```
public AffineTransform getGlyphTransform(GlyphVector glyphVector, int glyphIndex) {
    int numGlyphs = glyphVector.getNumGlyphs();
    if (glyphIndex < 0 || glyphIndex >= numGlyphs) {
        throw new IndexOutOfBoundsException("Invalid glyph index: " + glyphIndex);
    }
    return glyphVector.getGlyphTransform(glyphIndex);
}
```

These updated methods will ensure that the `glyphIndex` parameter is within the valid range before calling the corresponding methods of the `GlyphVector` object. If the `glyphIndex` is out of range, an `IndexOutOfBoundsException` will be thrown with a descriptive error message.
------------------------------------------------------
