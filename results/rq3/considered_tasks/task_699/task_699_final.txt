
Sure, here's an updated version of the `removeStatusChangeListener` method that includes the requested checks for both `contains` and `remove` methods:

```
public void removeStatusChangeListener(StatusChangeListener listener) {
    if (listener != null && !(listener instanceof StatusChangeListener)) {
        throw new ClassCastException("Listener is not of type StatusChangeListener");
    }
    if (listener == null && !statusChangeListeners.contains(null)) {
        throw new NullPointerException("Listener is null and list does not permit null elements");
    }
    if (!statusChangeListeners.contains(listener)) {
        return; // listener not found in list, no need to remove
    }
    if (!statusChangeListeners.remove(listener)) {
        throw new UnsupportedOperationException("Remove operation not supported by this list");
    }
}
```

In this updated version, we first check if the listener is of type `StatusChangeListener` using the `instanceof` operator. If it is not of the correct type, we throw a `ClassCastException`.

Next, we check if the listener is null and if the list does not permit null elements. If both conditions are true, we throw a `NullPointerException`.

Then, we check if the listener is present in the list using the `contains` method. If it is not present, we simply return without doing anything.

Finally, we attempt to remove the listener from the list using the `remove` method. If the remove operation is not supported by the list, we throw an `UnsupportedOperationException`.
------------------------------------------------------
