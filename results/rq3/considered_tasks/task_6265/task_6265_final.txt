
Sure, here's an updated version of the `withMonth` method that checks if the month-of-year value is valid and throws a `DateTimeException` if it's not:

```java
public static ZonedDateTime withMonth(ZonedDateTime zonedDateTime, int month) {
    try {
        return zonedDateTime.withMonth(month);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid month-of-year value: " + month, e);
    }
}
```

This method uses a `try-catch` block to call the `withMonth` method on the input `ZonedDateTime` object and catch any `DateTimeException` that may be thrown if the month-of-year value is invalid.

If a `DateTimeException` is caught, the method throws a new `DateTimeException` with a custom error message that includes the invalid month-of-year value and the original exception as the cause.

You can use this updated `withMonth` method in the same way as before, but now it will throw an exception if an invalid month-of-year value is provided:

```java
ZonedDateTime zonedDateTime = ZonedDateTime.of(2022, 1, 1, 12, 0, 0, 0, ZoneOffset.UTC);
ZonedDateTime newZonedDateTime = withMonth(zonedDateTime, 13); // throws DateTimeException
``` 

In this example, the `withMonth` method will throw a `DateTimeException` with the message "Invalid month-of-year value: 13".
------------------------------------------------------
