Please write a java method that Queries this month-day using the specified query.
Sure, here's an example Java method that queries a month-day using a specified query:

```java
import java.time.LocalDate;
import java.time.MonthDay;

public class MonthDayQuery {
    public static void main(String[] args) {
        MonthDay monthDay = MonthDay.of(2, 14); // February 14th
        boolean isValentinesDay = queryMonthDay(monthDay, "Valentine's Day");
        System.out.println("Is it Valentine's Day? " + isValentinesDay);
    }

    public static boolean queryMonthDay(MonthDay monthDay, String query) {
        LocalDate date = monthDay.atYear(2021); // set the year to any non-leap year
        switch (query) {
            case "Valentine's Day":
                return date.getMonthValue() == 2 && date.getDayOfMonth() == 14;
            // add more cases for other queries
            default:
                return false;
        }
    }
}
```

In this example, the `MonthDayQuery` class has a `queryMonthDay` method that takes a `MonthDay` object and a `String` query as parameters. The method returns a `boolean` value indicating whether the query matches the month-day.

The `main` method creates a `MonthDay` object representing February 14th and calls the `queryMonthDay` method with the query "Valentine's Day". The method checks if the month and day of the given `MonthDay` object match February 14th and returns `true` if they do.

You can add more cases to the `switch` statement to handle other queries.
------------------------------------------------------
Please check if the value of any field is out of range,  or if the day of month is invalid for the month for java.time.MonthDay.of(int,int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's an updated version of the `queryMonthDay` method that checks for out-of-range values and invalid days of the month:

```java
public static boolean queryMonthDay(MonthDay monthDay, String query) {
    try {
        LocalDate date = monthDay.atYear(2021); // set the year to any non-leap year
        int month = date.getMonthValue();
        int day = date.getDayOfMonth();
        if (monthDay.getMonthValue() != month) {
            throw new DateTimeException("Invalid month value: " + monthDay.getMonthValue());
        }
        if (monthDay.getDayOfMonth() != day) {
            throw new DateTimeException("Invalid day of month: " + monthDay.getDayOfMonth());
        }
        switch (query) {
            case "Valentine's Day":
                return month == 2 && day == 14;
            // add more cases for other queries
            default:
                return false;
        }
    } catch (DateTimeException e) {
        System.err.println("Error: " + e.getMessage());
        throw e;
    }
}
```

In this version, the method first tries to create a `LocalDate` object from the given `MonthDay` object and a non-leap year (in this case, 2021). It then checks if the month and day of the resulting `LocalDate` object match the corresponding values of the `MonthDay` object. If not, it throws a `DateTimeException` with an appropriate error message.

If the values are valid, the method proceeds to the `switch` statement to check the query. If the query matches, it returns `true`. Otherwise, it returns `false`.

If any exception is thrown during the execution of the method, it catches the exception, prints an error message to the standard error stream, and re-throws the exception.
------------------------------------------------------
Please check if the year is outside the valid range of years for java.time.MonthDay.atYear(int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's an updated version of the `queryMonthDay` method that checks for out-of-range years:

```java
public static boolean queryMonthDay(MonthDay monthDay, String query) {
    try {
        int year = 2021; // set the year to any non-leap year
        if (year < MonthDay.MIN_YEAR || year > MonthDay.MAX_YEAR) {
            throw new DateTimeException("Invalid year value: " + year);
        }
        LocalDate date = monthDay.atYear(year);
        int month = date.getMonthValue();
        int day = date.getDayOfMonth();
        if (monthDay.getMonthValue() != month) {
            throw new DateTimeException("Invalid month value: " + monthDay.getMonthValue());
        }
        if (monthDay.getDayOfMonth() != day) {
            throw new DateTimeException("Invalid day of month: " + monthDay.getDayOfMonth());
        }
        switch (query) {
            case "Valentine's Day":
                return month == 2 && day == 14;
            // add more cases for other queries
            default:
                return false;
        }
    } catch (DateTimeException e) {
        System.err.println("Error: " + e.getMessage());
        throw e;
    }
}
```

In this version, the method first checks if the year is within the valid range of years for `MonthDay` objects (between `MonthDay.MIN_YEAR` and `MonthDay.MAX_YEAR`). If not, it throws a `DateTimeException` with an appropriate error message.

If the year is valid, the method proceeds to create a `LocalDate` object from the given `MonthDay` object and the year. It then checks if the month and day of the resulting `LocalDate` object match the corresponding values of the `MonthDay` object. If not, it throws a `DateTimeException` with an appropriate error message.

If the values are valid, the method proceeds to the `switch` statement to check the query. If the query matches, it returns `true`. Otherwise, it returns `false`.

If any exception is thrown during the execution of the method, it catches the exception, prints an error message to the standard error stream, and re-throws the exception.
------------------------------------------------------
