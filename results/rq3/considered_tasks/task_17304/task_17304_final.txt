
Sure, here's an updated version of the Java method that checks if `factoryClassName` is null or if the factory class cannot be loaded or instantiated. If either of these conditions are true, a `SQLException` is thrown:

```java
import javax.sql.rowset.RowSetFactory;
import javax.sql.rowset.RowSetProvider;
import java.sql.SQLException;

public class RowSetFactoryExample {
    public static RowSetFactory createRowSetFactory(String factoryClassName) throws SQLException {
        if (factoryClassName == null) {
            throw new SQLException("Factory class name cannot be null");
        }
        try {
            // Create a new instance of the specified RowSetFactory class
            RowSetFactory factory = RowSetProvider.newFactory(factoryClassName, null);
            return factory;
        } catch (Exception e) {
            throw new SQLException("Failed to create RowSetFactory instance", e);
        }
    }
}
```

This updated method first checks if `factoryClassName` is null and throws a `SQLException` with an appropriate error message if it is. It then tries to create a new instance of the specified `RowSetFactory` class using `RowSetProvider.newFactory()`. If this method call fails (e.g. if the factory class cannot be loaded or instantiated), a `SQLException` is thrown with an appropriate error message and the original exception as the cause.

Note that this method now only throws `SQLException` and not `Exception`, as the latter is too general and doesn't provide enough information about the specific error that occurred.
------------------------------------------------------
