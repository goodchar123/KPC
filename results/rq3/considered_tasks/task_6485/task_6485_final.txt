
You can modify the `getFieldValue` method to handle the exceptions you mentioned as follows:

```java
public static int getFieldValue(LocalDateTime dateTime, ChronoField field) {
    try {
        return dateTime.get(field);
    } catch (DateTimeException | UnsupportedTemporalTypeException | ArithmeticException e) {
        e.printStackTrace();
        return -1; // or any other default value you want to return
    }
}
```

This modified method uses a try-catch block to catch the exceptions that may occur when getting the value of the specified field from the `LocalDateTime` object. If any of these exceptions occur, the method prints the stack trace of the exception and returns a default value of -1 (or any other default value you choose).

You can use this modified method in the same way as before:

```java
LocalDateTime dateTime = LocalDateTime.now();
int hour = getFieldValue(dateTime, ChronoField.HOUR_OF_DAY);
System.out.println("Hour of the day: " + hour);
```

If an exception occurs, the method will print the stack trace and return -1 (or any other default value you choose).
------------------------------------------------------
