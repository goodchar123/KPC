
Sure, here's an updated version of the Java method that includes the requested checks:

```java
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;

public static void flushToPosition(FileChannel fileChannel, long position) throws IOException {
    if (!fileChannel.isOpen()) {
        throw new ClosedChannelException();
    }
    if (!fileChannel.isOpen() || !fileChannel.isOpenForWriting()) {
        throw new NonWritableChannelException();
    }
    if (position < 0) {
        throw new IllegalArgumentException("New size cannot be negative");
    }
    if (fileChannel.truncate(position) < position) {
        throw new IOException("Failed to truncate file to position " + position);
    }
}
```

This updated method now checks if the FileChannel is open and writable before truncating it to the given position. If the channel is not open for writing, a NonWritableChannelException is thrown. If the channel is closed, a ClosedChannelException is thrown.

Additionally, the method checks if the new size is negative. If it is, an IllegalArgumentException is thrown.

Finally, if any other I/O error occurs during the truncation process, an IOException is thrown with a descriptive error message.
------------------------------------------------------
