
Sure, here's the updated Java method that checks if the epoch day exceeds the supported date range for `LocalDate.ofEpochDay(long)` and throws a `DateTimeException` if it does:

```java
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.chrono.JapaneseChronology;
import java.time.chrono.JapaneseDate;

public class JapaneseDateExample {
    public static JapaneseDate getJapaneseDateFromEpochDay(long epochDay) {
        LocalDate localDate;
        try {
            localDate = LocalDate.ofEpochDay(epochDay);
        } catch (DateTimeException e) {
            throw new DateTimeException("Epoch day " + epochDay + " is outside the supported date range for LocalDate.ofEpochDay(long)", e);
        }
        if (localDate.isBefore(LocalDate.of(1900, 1, 1)) || localDate.isAfter(LocalDate.of(2099, 12, 31))) {
            throw new DateTimeException("Epoch day " + epochDay + " is outside the supported date range for LocalDate.ofEpochDay(long)");
        }
        JapaneseDate japaneseDate = JapaneseDate.from(localDate);
        return japaneseDate;
    }
}
```

This updated method first tries to create a `LocalDate` object from the epoch-day using the `ofEpochDay` method. If this fails due to the epoch-day being outside the supported range, it throws a `DateTimeException` with an appropriate error message, including the original exception as the cause.

Next, it checks if the resulting `LocalDate` object is within the supported date range of the `LocalDate` class (i.e., between January 1, 1900 and December 31, 2099). If it is outside this range, it throws a `DateTimeException` with an appropriate error message.

Finally, it converts the `LocalDate` object to a `JapaneseDate` object using the `from` method of the `JapaneseDate` class and returns it.
------------------------------------------------------
