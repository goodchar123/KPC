{"loop_id": 0, "unhandled_api_list": ["java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)", "java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)", "java.lang.invoke.MethodHandle.bindTo(java.lang.Object)", "java.lang.invoke.MethodHandle.bindTo(java.lang.Object)", "java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)", "java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...)"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check if a security manager is present and it                              refuses access for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw SecurityException.", "Please check if any argument is null for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the target does not have a         leading parameter type that is a reference type for java.lang.invoke.MethodHandle.bindTo(java.lang.Object) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if x cannot be converted         to the leading parameter type of the target for java.lang.invoke.MethodHandle.bindTo(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.", "Please check if the target's type is not identical with the caller's symbolic type descriptor for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet you provided, otherwise throw WrongMethodTypeException.", "Please check anything thrown by the underlying method propagates unchanged through the method handle call for java.lang.invoke.MethodHandle.invokeExact(java.lang.Object...) in the code snippet you provided, otherwise throw Throwable."], "num_of_unhandled_exception": 6}
{"loop_id": 1, "unhandled_api_list": ["java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)", "java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)", "java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)", "java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)", "java.lang.Class.getClassLoader()"], "num_of_unhandled_api": 5, "unhandled_exception_list": ["Please check if the method does not exist for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw NoSuchMethodException.", "Please check if access checking fails,                                or if the method is static,                                or if the method's variable arity modifier bit                                is set and asVarargsCollector fails for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw IllegalAccessException.", "Please check if a security manager is present and it                              refuses access for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw SecurityException.", "Please check if any argument is null for java.lang.invoke.MethodHandles.Lookup.findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if a security manager is present, and the caller's class loader          is not null and is not the same as or an ancestor of the          class loader for the class whose class loader is requested,          and the caller does not have the          RuntimePermission(\"getClassLoader\") for java.lang.Class.getClassLoader() in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 5}
{"loop_id": 2, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
