
Sure, here's an updated version of the `take()` method that checks for interruption and throws `InterruptedException` if interrupted while waiting:

```
@Override
public T take() throws InterruptedException {
    T element = null;
    boolean interrupted = false;
    try {
        while (element == null) {
            try {
                element = queue.take();
            } catch (InterruptedException e) {
                interrupted = true;
            }
        }
    } finally {
        if (interrupted) {
            Thread.currentThread().interrupt();
        }
    }
    return element;
}
```

In this version, we use a `while` loop to keep trying to take an element from the queue until we are successful. If we are interrupted while waiting, we set a flag to indicate that we were interrupted, but we keep trying to take an element from the queue. Once we have successfully taken an element, we check the flag and throw `InterruptedException` if we were interrupted while waiting. Finally, we return the element that we took from the queue.
------------------------------------------------------
