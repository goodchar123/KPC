
Sure, here's an updated version of the `formatMonthDay` method that checks for formatting errors and throws a `DateTimeException` if necessary:

```java
import java.time.MonthDay;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class FormatterExample {
    public static String formatMonthDay(MonthDay monthDay, String pattern) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
            return monthDay.format(formatter);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting month-day", e);
        }
    }
}
```

This version of the method uses a `try`-`catch` block to catch any `DateTimeParseException` that might occur during formatting. If an exception is caught, the method throws a new `DateTimeException` with a message indicating that an error occurred.

By doing this, the method provides more robust error handling and makes it easier to diagnose and fix any issues that might arise during formatting.
------------------------------------------------------
