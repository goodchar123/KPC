
Sure, here's an updated version of the Java method that includes the requested error checking for the `contains` method:

```java
public void addLegalChild(NodeType parentType, ElementType childElement) {
    List<ElementType> legalChildren = parentType.getLegalChildren();
    if (childElement == null && !legalChildren.contains(null)) {
        throw new NullPointerException("This list does not permit null elements.");
    }
    if (!legalChildren.contains(childElement)) {
        if (childElement != null && !legalChildren.contains(childElement.getClass())) {
            throw new ClassCastException("The type of the specified element is incompatible with this list.");
        }
        try {
            legalChildren.add(childElement);
        } catch (UnsupportedOperationException e) {
            throw new UnsupportedOperationException("The add operation is not supported by this list.");
        } catch (ClassCastException e) {
            throw new ClassCastException("The class of the specified element prevents it from being added to this list.");
        } catch (NullPointerException e) {
            throw new NullPointerException("The specified element is null and this list does not permit null elements.");
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Some property of this element prevents it from being added to this list.");
        }
    }
}
```

This updated method first checks if the specified child element is null and if the list does not permit null elements, it throws a `NullPointerException`. It then checks if the child element is already in the list and if not, it attempts to add it. If the add operation is not supported by the list, it throws an `UnsupportedOperationException`. If the type of the specified element is incompatible with the list, it throws a `ClassCastException`. If the specified element is null and the list does not permit null elements, it throws a `NullPointerException`. If some property of the element prevents it from
------------------------------------------------------
