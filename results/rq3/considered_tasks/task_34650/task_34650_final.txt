
Sure, here's an updated version of the `DeserializationExample` class that checks for the exceptions you mentioned:

```
import java.io.*;

public class DeserializationExample {
    public static void main(String[] args) {
        Person person = null;

        try {
            FileInputStream fileIn = new FileInputStream("person.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            person = (Person) in.readObject();
            in.close();
            fileIn.close();
        } catch (IOException i) {
            i.printStackTrace();
            return;
        } catch (ClassNotFoundException c) {
            System.out.println("Person class not found");
            c.printStackTrace();
            return;
        } catch (InvalidClassException e) {
            System.out.println("Something is wrong with a class used by deserialization");
            e.printStackTrace();
            return;
        } catch (StreamCorruptedException e) {
            System.out.println("Control information in the stream is inconsistent");
            e.printStackTrace();
            return;
        } catch (OptionalDataException e) {
            System.out.println("Primitive data was found in the stream instead of objects");
            e.printStackTrace();
            return;
        }

        System.out.println("Deserialized Person...");
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
        System.out.println("Address: " + person.getAddress());
    }
}
```

In this version of the class, we've added catch blocks for the `InvalidClassException`, `StreamCorruptedException`, and `OptionalDataException` exceptions. If any of these exceptions are thrown during deserialization, the appropriate error message will be printed and the program will exit.
------------------------------------------------------
