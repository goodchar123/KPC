
Sure, here's the updated code snippet that checks if `b` is null before calling `InputStream.read(byte[])`, and throws a `NullPointerException` if that's the case:

```java
public static double readDoubleFromStream(InputStream stream, ByteOrder byteOrder) throws IOException {
    byte[] buffer = new byte[8];
    if (b == null) {
        throw new NullPointerException();
    }
    int bytesRead = stream.read(buffer);
    ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);
    byteBuffer.order(byteOrder);
    return byteBuffer.getDouble();
}
```

This method first checks if the `b` parameter is null, and throws a `NullPointerException` if that's the case. Then it reads 8 bytes from the stream into a byte array, creates a `ByteBuffer` from the byte array, sets the byte order of the `ByteBuffer` to the specified byte order, and then returns the double value obtained from the `ByteBuffer`.

You can call this method like this:

```java
InputStream stream = ... // create an input stream
try {
    double value = readDoubleFromStream(stream, ByteOrder.BIG_ENDIAN); // read a double in big-endian byte order
} catch (NullPointerException e) {
    // handle the exception
}
```
------------------------------------------------------
