
Sure, here's the updated code snippet with the requested check:

```java
public static Number parseCompactNumber(String compactNumber) {
    if (compactNumber == null || compactNumber.isEmpty()) {
        return null;
    }
    
    double multiplier = 1.0;
    char lastChar = compactNumber.charAt(compactNumber.length() - 1);
    
    if (Character.isLetter(lastChar)) {
        switch (lastChar) {
            case 'K':
            case 'k':
                multiplier = 1000.0;
                break;
            case 'M':
            case 'm':
                multiplier = 1000000.0;
                break;
            case 'B':
            case 'b':
                multiplier = 1000000000.0;
                break;
            default:
                throw new IllegalArgumentException("Invalid compact number format");
        }
        
        compactNumber = compactNumber.substring(0, compactNumber.length() - 1);
    }
    
    try {
        double parsedNumber = Double.parseDouble(compactNumber);
        if (Double.isInfinite(parsedNumber) || Double.isNaN(parsedNumber)) {
            throw new IllegalArgumentException("Invalid compact number format");
        }
        return parsedNumber * multiplier;
    } catch (NumberFormatException e) {
        throw new IllegalArgumentException("Invalid compact number format");
    } catch (IndexOutOfBoundsException e) {
        throw new IndexOutOfBoundsException("Invalid index");
    }
}
```

For the `charAt` method, we can add the following check:

```java
if (index < 0 || index >= compactNumber.length()) {
    throw new IndexOutOfBoundsException("Invalid index");
}
```

We can add this check after the `if` statement that checks the last character of the input string. Note that we also added an additional check to ensure that the parsed number is not infinite or NaN, which can occur if the input string is not a valid number.
------------------------------------------------------
