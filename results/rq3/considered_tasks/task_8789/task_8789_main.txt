Please write a java method that Acquires the given number of permits from this semaphore, blocking until all are available.
Here's an example Java method that acquires a given number of permits from a semaphore, blocking until all are available:

```java
public void acquirePermits(Semaphore semaphore, int permits) throws InterruptedException {
    semaphore.acquire(permits);
}
```

This method takes in a `Semaphore` object and an integer value representing the number of permits to acquire. It then calls the `acquire()` method on the semaphore, passing in the number of permits as an argument. This method will block until all the requested permits are available.

If any thread is interrupted while waiting for permits, an `InterruptedException` will be thrown.
------------------------------------------------------
Please check if the current thread is interrupted for java.util.concurrent.Semaphore.acquire(int) in the code snippet you provided, otherwise throw InterruptedException.
Please check if permits is negative for java.util.concurrent.Semaphore.acquire(int) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's an updated version of the Java method that checks for thread interruption and negative permit values:

```java
public void acquirePermits(Semaphore semaphore, int permits) throws InterruptedException, IllegalArgumentException {
    if (permits < 0) {
        throw new IllegalArgumentException("Permits cannot be negative");
    }
    try {
        semaphore.acquire(permits);
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw e;
    }
}
```

This method first checks if the `permits` value is negative. If it is, an `IllegalArgumentException` is thrown.

Next, the method calls the `acquire()` method on the semaphore, passing in the number of permits as an argument. If the thread is interrupted while waiting for permits, the method catches the `InterruptedException`, sets the thread's interrupted status, and re-throws the exception.

This updated method ensures that the input values are valid and handles thread interruption correctly.
------------------------------------------------------
