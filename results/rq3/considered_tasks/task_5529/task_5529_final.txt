
Sure, here's an updated version of the code snippet that checks if the name is null before calling `Logger.getLogger()` and throws a `NullPointerException` if it is:

```java
import java.util.logging.LogManager;
import java.util.logging.Logger;
import java.util.logging.LogManager.ConfigurationChangeListener;

public class LoggingConfigListener {
    public static void addConfigListener(String name) {
        if (name == null) {
            throw new NullPointerException("Logger name cannot be null.");
        }
        LogManager manager = LogManager.getLogManager();
        ConfigurationChangeListener listener = new ConfigurationChangeListener() {
            public void configurationChanged() {
                // Do something when the logging configuration is read
                Logger logger = Logger.getLogger(name);
                logger.info("Logging configuration has been read.");
            }
        };
        manager.addConfigurationChangeListener(listener);
    }
}
```

In this updated version, we first check if the `name` parameter is null using an `if` statement. If it is null, we throw a `NullPointerException` with a descriptive error message.

If the `name` parameter is not null, we proceed with the rest of the method as before.
------------------------------------------------------
