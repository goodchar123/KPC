Please write a java method that Obtains an ISO zoned date-time from another date-time object.
Sure, here's an example Java method that obtains an ISO zoned date-time from another date-time object:

```java
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class DateTimeUtils {
    
    public static String getISOZonedDateTimeString(ZonedDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME;
        return dateTime.format(formatter);
    }
    
}
```

This method takes a `ZonedDateTime` object as input and returns a string representation of the date-time in ISO zoned format. The `DateTimeFormatter.ISO_ZONED_DATE_TIME` formatter is used to format the date-time object. You can call this method from another class like this:

```java
ZonedDateTime dateTime = ZonedDateTime.now();
String isoZonedDateTimeString = DateTimeUtils.getISOZonedDateTimeString(dateTime);
System.out.println(isoZonedDateTimeString);
```

This will print the current date-time in ISO zoned format.
------------------------------------------------------
Please check if an error occurs during printing for java.time.ZonedDateTime.format(java.time.format.DateTimeFormatter) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's the updated Java method that checks for errors during printing and throws a `DateTimeException` if an error occurs:

```java
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class DateTimeUtils {
    
    public static String getISOZonedDateTimeString(ZonedDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME;
        try {
            return dateTime.format(formatter);
        } catch (DateTimeParseException e) {
            throw new DateTimeException("Error formatting date-time: " + e.getMessage(), e);
        }
    }
    
}
```

This method now catches the `DateTimeParseException` that may occur during formatting and throws a `DateTimeException` with a descriptive error message. You can call this method from another class like this:

```java
ZonedDateTime dateTime = ZonedDateTime.now();
try {
    String isoZonedDateTimeString = DateTimeUtils.getISOZonedDateTimeString(dateTime);
    System.out.println(isoZonedDateTimeString);
} catch (DateTimeException e) {
    System.err.println("Error obtaining ISO zoned date-time: " + e.getMessage());
}
```

This code now catches the `DateTimeException` that may be thrown by the `getISOZonedDateTimeString` method and prints a descriptive error message to the standard error stream.
------------------------------------------------------
