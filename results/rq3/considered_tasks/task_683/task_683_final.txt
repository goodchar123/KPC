
Sure, here's the updated `close` method that checks for I/O errors and throws an `IOException` if necessary:

```java
public void close() throws IOException {
    IOException exception = null;
    try {
        in.close();
    } catch (IOException e) {
        exception = e;
    }
    try {
        out.close();
    } catch (IOException e) {
        if (exception == null) {
            exception = e;
        } else {
            exception.addSuppressed(e);
        }
    }
    try {
        socket.close();
    } catch (IOException e) {
        if (exception == null) {
            exception = e;
        } else {
            exception.addSuppressed(e);
        }
    }
    if (exception != null) {
        throw exception;
    }
}
```

This method first initializes an `IOException` variable to `null`. Then, it tries to close the input stream, output stream, and socket, catching any `IOException` that may occur and storing it in the `exception` variable. If multiple exceptions occur, they are added as suppressed exceptions to the original `IOException`. Finally, if an exception occurred, the method throws the `IOException`.
------------------------------------------------------
