{"loop_id": 0, "unhandled_api_list": ["java.sql.PreparedStatement.setRef(int,java.sql.Ref)"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if the JDBC driver does not support this method for java.sql.PreparedStatement.setRef(int,java.sql.Ref) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException."], "num_of_unhandled_exception": 1}
{"loop_id": 1, "unhandled_api_list": ["java.sql.Connection.getMetaData()", "java.sql.DatabaseMetaData.supportsRefCursors()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs for java.sql.DatabaseMetaData.supportsRefCursors() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 2, "unhandled_api_list": ["java.sql.Connection.isClosed()", "java.sql.Connection.getMetaData()", "java.sql.DatabaseMetaData.supportsRefCursors()", "java.sql.PreparedStatement.setRef(int,java.sql.Ref)"], "num_of_unhandled_api": 4, "unhandled_exception_list": ["Please check if a database access error occurs for java.sql.Connection.isClosed() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs for java.sql.DatabaseMetaData.supportsRefCursors() in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.setRef(int,java.sql.Ref) in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 4}
{"loop_id": 3, "unhandled_api_list": ["java.sql.PreparedStatement.getParameterMetaData()", "java.sql.PreparedStatement.setRef(int,java.sql.Ref)"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.getParameterMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.setRef(int,java.sql.Ref) in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 4, "unhandled_api_list": ["java.sql.PreparedStatement.getParameterMetaData()", "java.sql.ParameterMetaData.getParameterCount()", "java.sql.Connection.getMetaData()", "java.sql.DatabaseMetaData.supportsRefCursors()", "java.sql.PreparedStatement.setRef(int,java.sql.Ref)", "java.sql.PreparedStatement.setRef(int,java.sql.Ref)"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.getParameterMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs for java.sql.ParameterMetaData.getParameterCount() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.", "Please check if a database access error occurs for java.sql.DatabaseMetaData.supportsRefCursors() in the code snippet you provided, otherwise throw SQLException.", "Please check if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement for java.sql.PreparedStatement.setRef(int,java.sql.Ref) in the code snippet you provided, otherwise throw SQLException.", "Please check if the JDBC driver does not support this method for java.sql.PreparedStatement.setRef(int,java.sql.Ref) in the code snippet you provided, otherwise throw SQLFeatureNotSupportedException."], "num_of_unhandled_exception": 6}
{"loop_id": 5, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
