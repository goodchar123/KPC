Please write a java method that Returns a copy of this ZonedDateTime with the day-of-year altered.
Here's a Java method that returns a copy of a given `ZonedDateTime` object with the day-of-year altered:

```java
public static ZonedDateTime withDayOfYear(ZonedDateTime zdt, int dayOfYear) {
    return zdt.withDayOfYear(dayOfYear);
}
```

This method takes in a `ZonedDateTime` object `zdt` and an integer `dayOfYear` as parameters. It then calls the `withDayOfYear` method on the `zdt` object with the `dayOfYear` parameter to create a new `ZonedDateTime` object with the altered day-of-year value. Finally, it returns the new `ZonedDateTime` object.
------------------------------------------------------
Please check if the day of year value is invalid,  or if the day of year is invalid for the year for java.time.ZonedDateTime.withDayOfYear(int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's the updated Java method that checks if the day of year value is invalid or if the day of year is invalid for the year for `java.time.ZonedDateTime.withDayOfYear(int)`. If either of these conditions is true, it throws a `DateTimeException`:

```java
public static ZonedDateTime withDayOfYear(ZonedDateTime zdt, int dayOfYear) {
    try {
        return zdt.withDayOfYear(dayOfYear);
    } catch (DateTimeException e) {
        throw new DateTimeException("Invalid day of year value or day of year is invalid for the year", e);
    }
}
```

This method takes in a `ZonedDateTime` object `zdt` and an integer `dayOfYear` as parameters. It then calls the `withDayOfYear` method on the `zdt` object with the `dayOfYear` parameter to create a new `ZonedDateTime` object with the altered day-of-year value. If an exception is thrown due to an invalid day-of-year value or an invalid day-of-year for the year, it catches the exception and throws a new `DateTimeException` with a custom error message and the original exception as the cause.
------------------------------------------------------
