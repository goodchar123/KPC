
Sure, here's an updated version of the Java method that checks for the conditions you mentioned:

```java
public LocalDateTime addTime(LocalDateTime dateTime, long amount, TemporalUnit unit) {
    try {
        return dateTime.plus(amount, unit);
    } catch (DateTimeException e) {
        System.out.println("Cannot add time: " + e.getMessage());
        throw e;
    } catch (UnsupportedTemporalTypeException e) {
        System.out.println("Unsupported unit: " + e.getMessage());
        throw e;
    } catch (ArithmeticException e) {
        System.out.println("Numeric overflow: " + e.getMessage());
        throw e;
    }
}
```

This method takes in three parameters:

1. `dateTime`: the date-time to which the amount should be added
2. `amount`: the amount to add
3. `unit`: the unit of time in which the amount is specified (e.g. `ChronoUnit.HOURS`, `ChronoUnit.MINUTES`, etc.)

The `plus` method of the `LocalDateTime` class is used to add the specified amount to the given date-time. This method throws a `DateTimeException` if the addition cannot be made, an `UnsupportedTemporalTypeException` if the unit is not supported, or an `ArithmeticException` if numeric overflow occurs.

In the updated method, we catch these exceptions and print an error message before re-throwing the exception.
------------------------------------------------------
