
Sure, here's the updated Java method that checks for all the mentioned exceptions:

```java
public void moveRows(DefaultTableModel model, int start, int end, int to) {
    int rowCount = model.getRowCount();
    if (start < 0 || end >= rowCount || to < 0 || to >= rowCount) {
        throw new ArrayIndexOutOfBoundsException("Invalid row indices or destination position");
    }
    int numMoved = end - start + 1;
    int[] rows = new int[numMoved];
    for (int i = 0; i < numMoved; i++) {
        rows[i] = start + i;
    }
    try {
        model.moveRow(start, end, to);
    } catch (ArrayIndexOutOfBoundsException e) {
        throw e;
    } catch (IndexOutOfBoundsException e) {
        throw new IndexOutOfBoundsException("Copying would cause access of data outside array bounds");
    } catch (ArrayStoreException e) {
        throw new ArrayStoreException("An element in the src array could not be stored into the dest array because of a type mismatch");
    } catch (NullPointerException e) {
        throw new NullPointerException("Either src or dest is null");
    }
}
```

This method first checks if the starting and ending indices of the rows to be moved, as well as the destination index, are within the range of the table's rows. If any of these indices are out of bounds, it throws an `ArrayIndexOutOfBoundsException` with a message indicating the invalid indices or destination position. If all indices are valid, it proceeds to move the rows using the `moveRow` method of the `DefaultTableModel` object.

The `moveRow` method can throw several exceptions, so we wrap it in a try-catch block. If an `ArrayIndexOutOfBoundsException` is thrown, we simply re-throw it. If an `IndexOutOfBoundsException` is thrown, we throw a new `IndexOutOfBoundsException` with a message indicating that copying would cause access of data outside array bounds. If an `ArrayStoreException` is thrown, we throw a new `ArrayStoreException` with a message indicating that an element in the src array could not be stored into the dest array because of a type mismatch. If a `NullPointerException` is thrown, we throw a new `NullPointerException` with a message indicating that either src or dest is null.
------------------------------------------------------
