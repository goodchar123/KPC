
Sure, here's the updated Java method that checks for null values and throws `NullPointerException` or `IllegalArgumentException` as appropriate:

```java
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

public class MethodHandleExample {
    
    public static void main(String[] args) throws Throwable {
        // Create a method handle for the target method
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandle target = lookup.findStatic(MethodHandleExample.class, "targetMethod", MethodType.methodType(void.class, int.class, String.class, boolean.class));
        
        // Create a method handle that discards the first two arguments before calling the target method
        MethodHandle discardArgs = dropArguments(target, 0, int.class, String.class);
        
        // Call the method handle with some dummy arguments
        discardArgs.invoke(123, "hello", true);
    }
    
    public static void targetMethod(int arg1, String arg2, boolean arg3) {
        System.out.println("arg1: " + arg1);
        System.out.println("arg2: " + arg2);
        System.out.println("arg3: " + arg3);
    }
    
    public static MethodHandle dropArguments(MethodHandle target, int pos, Class<?>... valueTypes) {
        // Check for null values
        if (target == null || valueTypes == null) {
            throw new NullPointerException();
        }
        for (Class<?> valueType : valueTypes) {
            if (valueType == null) {
                throw new NullPointerException();
            }
        }
        
        // Check for invalid arguments
        if (pos < 0 || pos > target.type().parameterCount()) {
            throw new IllegalArgumentException();
        }
        for (Class<?> valueType : valueTypes) {
            if (valueType == void.class) {
                throw new IllegalArgumentException();
            }
        }
        if (target.type().parameterCount() + valueTypes.length > MethodType.MAX_SUPPORTED_ARITY) {
            throw new IllegalArgumentException();
        }
        
        // Create the new method handle
        return MethodHandles.dropArguments(target, pos, valueTypes);
    }
}
```

In this updated version, the `dropArguments` method now checks for null values and throws `NullPointerException` if the `target` or `valueTypes` arguments are null, or if any element of `valueTypes` is null. It also checks for invalid arguments and throws `IllegalArgumentException` if any element of `valueTypes` is `void.class`, if `pos` is negative or greater than the arity of the `target`, or if the new method handle's type would have too many parameters.

Note that the `dropArguments` method is now defined as a separate method in the `MethodHandleExample` class, rather than being called directly from the `main` method. This is because we need to override the default behavior of `MethodHandles.dropArguments` and add our own argument checks.
------------------------------------------------------
