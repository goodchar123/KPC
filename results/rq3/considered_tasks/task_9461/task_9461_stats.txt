{"loop_id": 0, "unhandled_api_list": ["java.time.LocalDate.of(int,int,int)", "java.time.format.DateTimeFormatter.ofPattern(java.lang.String)", "java.time.format.DateTimeFormatter.parse(java.lang.CharSequence)", "java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField)", "java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField)", "java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField)"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check if the value of any field is out of range,  or if the day of month is invalid for the month year for java.time.LocalDate.of(int,int,int) in the code snippet you provided, otherwise throw DateTimeException.", "Please check if the pattern is invalid for java.time.format.DateTimeFormatter.ofPattern(java.lang.String) in the code snippet you provided, otherwise throw IllegalArgumentException.", "Please check if unable to parse the requested result for java.time.format.DateTimeFormatter.parse(java.lang.CharSequence) in the code snippet you provided, otherwise throw DateTimeParseException.", "Please check if a value for the field cannot be obtained or         the value is outside the range of valid values for the field for java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField) in the code snippet you provided, otherwise throw DateTimeException.", "Please check if the field is not supported or         the range of values exceeds an int for java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField) in the code snippet you provided, otherwise throw UnsupportedTemporalTypeException.", "Please check if numeric overflow occurs for java.time.temporal.TemporalAccessor.get(java.time.temporal.TemporalField) in the code snippet you provided, otherwise throw ArithmeticException."], "num_of_unhandled_exception": 6}
{"loop_id": 1, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
