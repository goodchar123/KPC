List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.sql.Connection.prepareStatement(String sql)`
2. `java.sql.PreparedStatement.setAsciiStream(int parameterIndex, java.io.InputStream asciiStream)`
3. `java.sql.PreparedStatement.setInt(int parameterIndex, int x)`
4. `java.sql.PreparedStatement.executeUpdate()`

 + From response, we get: ['java.sql.Connection.prepareStatement(Stringsql)', 'java.sql.PreparedStatement.setAsciiStream(intparameterIndex,java.io.InputStreamasciiStream)', 'java.sql.PreparedStatement.setInt(intparameterIndex,intx)', 'java.sql.PreparedStatement.executeUpdate()']
------------------------------------------------------
Is the SQLException handled or caught for java.sql.PreparedStatement.executeUpdate() in the code snippet? Answer in Yes or No only.
Yes.
------------------------------------------------------
Is the SQLTimeoutException handled or caught for java.sql.PreparedStatement.executeUpdate() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.sql.Connection.prepareStatement(String sql)
2. java.sql.PreparedStatement.setAsciiStream(int parameterIndex, java.io.InputStream x)
3. java.sql.PreparedStatement.setInt(int parameterIndex, int x)
4. java.sql.PreparedStatement.setQueryTimeout(int seconds)
5. java.sql.PreparedStatement.executeUpdate()
6. java.sql.PreparedStatement.cancel()
7. java.sql.SQLTimeoutException

 + From response, we get: []
------------------------------------------------------
