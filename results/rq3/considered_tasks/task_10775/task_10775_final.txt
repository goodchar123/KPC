
You're right, it's important to check for invalid offsets when using `StringBuilder.insert()`. Here's the updated code with the check:

```java
public static String addAttributesToSubrange(String originalString, int startIndex, int endIndex, Set<String> attributes) {
    if (startIndex < 0 || endIndex > originalString.length() || startIndex >= endIndex) {
        throw new IllegalArgumentException("Invalid subrange specified");
    }
    
    StringBuilder sb = new StringBuilder(originalString);
    for (String attribute : attributes) {
        if (startIndex < 0 || startIndex > sb.length()) {
            throw new StringIndexOutOfBoundsException("Invalid start index");
        }
        if (endIndex < 0 || endIndex > sb.length()) {
            throw new StringIndexOutOfBoundsException("Invalid end index");
        }
        sb.insert(startIndex, "<" + attribute + ">");
        sb.insert(endIndex + attribute.length() + 2, "</" + attribute + ">");
    }
    
    return sb.toString();
}
```

Now, before inserting the opening and closing tags for each attribute, we check that the start and end indices are within the bounds of the StringBuilder. If either index is less than 0 or greater than the length of the StringBuilder, we throw a `StringIndexOutOfBoundsException`.
------------------------------------------------------
