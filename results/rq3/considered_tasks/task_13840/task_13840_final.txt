
Sure, here's an updated version of the `getValueOrThrow` method that checks if a value is present before calling `get()` on the `Optional` object:

```java
public static <T> T getValueOrThrow( Optional<T> optional ) {
    return optional.orElseThrow( () -> new NoSuchElementException( "No value present" ) );
}
```

This method uses the `orElseThrow` method of the `Optional` class to either return the value if it is present or throw a `NoSuchElementException` with the message "No value present" if it is not.

You can use this method like this:

```java
Optional<String> optional = Optional.of( "Hello, world!" );
String value = getValueOrThrow( optional ); // returns "Hello, world!"

Optional<String> emptyOptional = Optional.empty();
String emptyValue = getValueOrThrow( emptyOptional ); // throws NoSuchElementException
``` 

Note that the `orElseThrow` method takes a `Supplier` as its argument, which is a functional interface that takes no arguments and returns a value. In this case, we're using a lambda expression to create a `Supplier` that returns a new `NoSuchElementException` with the message "No value present".
------------------------------------------------------
