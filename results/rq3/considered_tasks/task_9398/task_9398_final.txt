
Sure, here's an updated version of the `getMinguoDate()` method that checks for `DateTimeException` when creating a `LocalDate` object using the `LocalDate.of()` method, and throws the exception if the values of any field are out of range or if the day of month is invalid for the month year:

```java
import java.time.LocalDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.TemporalAccessor;
import java.time.DateTimeException;

public class MinguoDateHelper {
    public static MinguoDate getMinguoDate(TemporalAccessor temporal) {
        try {
            LocalDate localDate = LocalDate.from(temporal);
            return MinguoDate.from(localDate);
        } catch (DateTimeException e) {
            throw new DateTimeException("Unable to convert to LocalDate or MinguoDate", e);
        }
    }

    public static LocalDate getLocalDate(int year, int month, int dayOfMonth) {
        try {
            return LocalDate.of(year, month, dayOfMonth);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date values", e);
        }
    }
}
```

In this updated version, we've added a new method called `getLocalDate()` that takes three integer parameters representing the year, month, and day of month, and returns a `LocalDate` object. We use a `try-catch` block to catch any `DateTimeException` that may occur when creating the `LocalDate` object using the `LocalDate.of()` method. If an exception is caught, we throw a new `DateTimeException` with a custom error message and the original exception as the cause.

You can call this updated method in the same way as before:

```java
import java.time.LocalDate;
import java.time.chrono.MinguoDate;
import java.time.DateTimeException;

public class Main {
    public static void main(String[] args) {
        try {
            LocalDate date = MinguoDateHelper.getLocalDate(2021, 10, 32);
            MinguoDate minguoDate = MinguoDateHelper.getMinguoDate(date);
            System.out.println(minguoDate); // Output: Minguo ROC 110-10-32
        } catch (DateTimeException e) {
            System.out.println(e.getMessage());
        }
    }
}
```

In this example, we call the `getLocalDate()`
------------------------------------------------------
