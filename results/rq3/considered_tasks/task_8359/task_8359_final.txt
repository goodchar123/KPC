
Sure, here's an updated version of the Java method that checks if the future was cancelled before returning the result value, and throws a `CancellationException` if it was cancelled:

```java
public static <T> T getResultValue(CompletableFuture<T> future) throws CancellationException {
    try {
        T result = future.get();
        if (future.isCancelled()) {
            throw new CancellationException();
        }
        return result;
    } catch (InterruptedException | ExecutionException e) {
        throw new RuntimeException("Error occurred while getting result value", e);
    }
}
```

This method first gets the result value from the future using `future.get()`, and then checks if the future was cancelled using `future.isCancelled()`. If the future was cancelled, it throws a `CancellationException`. Otherwise, it returns the result value.

Note that we added the `throws CancellationException` to the method signature to indicate that this exception may be thrown by the method.
------------------------------------------------------
