
Sure, here's an updated version of the code snippet that checks for an I/O error when closing the socket:

```java
import java.io.IOException;
import java.net.Socket;

public class SocketExample {
    public static void main(String[] args) {
        String remoteAddress = "www.example.com";
        int remotePort = 80;

        try {
            // Create a socket and connect it to the remote address and port
            Socket socket = new Socket(remoteAddress, remotePort);

            // Do something with the socket...

            // Close the socket and check for I/O errors
            socket.close();
            if (socket.isClosed()) {
                System.out.println("Socket closed successfully");
            } else {
                throw new IOException("Error closing socket");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

In this updated version, we first call `socket.close()` to close the socket, and then check if the socket is actually closed by calling `socket.isClosed()`. If the socket is closed successfully, we print a message to the console. If the socket is not closed, we throw an `IOException` with an error message. This ensures that any I/O errors that occur when closing the socket are properly handled.
------------------------------------------------------
