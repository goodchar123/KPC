{"loop_id": 0, "unhandled_api_list": ["java.security.cert.X509CRL.getTBSCertList()"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if an encoding error occurs. for java.security.cert.X509CRL.getTBSCertList() in the code snippet you provided, otherwise throw CRLException."], "num_of_unhandled_exception": 1}
{"loop_id": 1, "unhandled_api_list": ["java.security.Signature.getInstance(java.lang.String)", "java.security.Signature.getInstance(java.lang.String)", "java.security.Signature.initVerify(java.security.PublicKey)", "java.security.Signature.update(byte[])", "java.security.cert.X509CRL.getTBSCertList()", "java.security.cert.CertificateFactory.getInstance(java.lang.String)", "java.security.cert.CertificateFactory.getInstance(java.lang.String)", "java.security.cert.CertificateFactory.generateCRL(java.io.InputStream)", "java.security.KeyFactory.getInstance(java.lang.String)", "java.security.KeyFactory.getInstance(java.lang.String)", "java.security.KeyFactory.generatePublic(java.security.spec.KeySpec)", "java.nio.file.Files.readAllBytes(java.nio.file.Path)", "java.nio.file.Files.readAllBytes(java.nio.file.Path)", "java.nio.file.Files.readAllBytes(java.nio.file.Path)", "java.nio.file.Paths.get(java.lang.String,java.lang.String...)"], "num_of_unhandled_api": 15, "unhandled_exception_list": ["Please check if no Provider supports a         Signature implementation for the         specified algorithm for java.security.Signature.getInstance(java.lang.String) in the code snippet you provided, otherwise throw NoSuchAlgorithmException.", "Please check if algorithm is null for java.security.Signature.getInstance(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the key is invalid. for java.security.Signature.initVerify(java.security.PublicKey) in the code snippet you provided, otherwise throw InvalidKeyException.", "Please check if this signature object is not initialized properly. for java.security.Signature.update(byte[]) in the code snippet you provided, otherwise throw SignatureException.", "Please check if an encoding error occurs. for java.security.cert.X509CRL.getTBSCertList() in the code snippet you provided, otherwise throw CRLException.", "Please check if no Provider supports a         CertificateFactorySpi implementation for the         specified type for java.security.cert.CertificateFactory.getInstance(java.lang.String) in the code snippet you provided, otherwise throw CertificateException.", "Please check if type is null for java.security.cert.CertificateFactory.getInstance(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.", "Please check on parsing errors. for java.security.cert.CertificateFactory.generateCRL(java.io.InputStream) in the code snippet you provided, otherwise throw CRLException.", "Please check if no Provider supports a         KeyFactorySpi implementation for the         specified algorithm for java.security.KeyFactory.getInstance(java.lang.String) in the code snippet you provided, otherwise throw NoSuchAlgorithmException.", "Please check if algorithm is null for java.security.KeyFactory.getInstance(java.lang.String) in the code snippet you provided, otherwise throw NullPointerException.", "Please check if the given key specification is inappropriate for this key factory to produce a public key. for java.security.KeyFactory.generatePublic(java.security.spec.KeySpec) in the code snippet you provided, otherwise throw InvalidKeySpecException.", "Please check if an I/O error occurs reading from the stream for java.nio.file.Files.readAllBytes(java.nio.file.Path) in the code snippet you provided, otherwise throw IOException.", "Please check if an array of the required size cannot be allocated, for          example the file is larger that 2GB for java.nio.file.Files.readAllBytes(java.nio.file.Path) in the code snippet you provided, otherwise throw OutOfMemoryError.", "Please check In the case of the default provider, and a security manager is          installed, the checkRead          method is invoked to check read access to the file. for java.nio.file.Files.readAllBytes(java.nio.file.Path) in the code snippet you provided, otherwise throw SecurityException.", "Please check if the path string cannot be converted to a Path for java.nio.file.Paths.get(java.lang.String,java.lang.String...) in the code snippet you provided, otherwise throw InvalidPathException."], "num_of_unhandled_exception": 15}
{"loop_id": 2, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
