
You can add a check for invalid values and throw a `DateTimeException` if any of the values are out of range or if the day of month is invalid for the month year. Here's an updated version of the `getLocalDateTime` method that includes this check:

```java
import java.time.LocalDateTime;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class DateTimeUtils {
    public static LocalDateTime getLocalDateTime(int year, int month, int day, int hour, int minute, int second) {
        try {
            LocalDateTime dateTime = LocalDateTime.of(year, month, day, hour, minute, second, 0);
            return dateTime;
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date or time value", e);
        }
    }
}
```

This method uses a try-catch block to catch any `DateTimeException` that may be thrown by the `LocalDateTime.of` method. If an exception is caught, a new `DateTimeException` is thrown with a custom error message.

You can call this method in the same way as before:

```java
LocalDateTime dateTime = DateTimeUtils.getLocalDateTime(2021, 2, 29, 12, 30, 0);
```

If you pass an invalid date or time value, such as February 29, 2021 (which is not a leap year), a `DateTimeException` will be thrown with the error message "Invalid date or time value".
------------------------------------------------------
