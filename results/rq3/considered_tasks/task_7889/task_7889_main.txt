Please write a java method that Returns the number of Unicode code points in the text range of the specified char sequence.
Here's a Java method that returns the number of Unicode code points in the text range of the specified char sequence:

```
public static int countCodePoints(CharSequence seq, int start, int end) {
    int count = 0;
    for (int i = start; i < end; ) {
        int codePoint = Character.codePointAt(seq, i);
        count++;
        i += Character.charCount(codePoint);
    }
    return count;
}
```

This method takes three parameters: the char sequence to count the code points in, the starting index of the text range, and the ending index of the text range. It uses a for loop to iterate over the text range, calling the `Character.codePointAt()` method to get the code point at each index. It then increments the count and advances the loop index by the number of chars in the code point using the `Character.charCount()` method. Finally, it returns the count of code points in the text range.
------------------------------------------------------
Please check if seq is null. for java.lang.Character.codePointAt(java.lang.CharSequence,int) in the code snippet you provided, otherwise throw NullPointerException.
Please check if the value index is negative or not less than seq.length(). for java.lang.Character.codePointAt(java.lang.CharSequence,int) in the code snippet you provided, otherwise throw IndexOutOfBoundsException.
You're right, it's important to add null and index bounds checks to the method. Here's an updated version that includes those checks:

```
public static int countCodePoints(CharSequence seq, int start, int end) {
    if (seq == null) {
        throw new NullPointerException("Char sequence cannot be null");
    }
    if (start < 0 || end > seq.length() || start > end) {
        throw new IndexOutOfBoundsException("Invalid start or end index");
    }
    int count = 0;
    for (int i = start; i < end; ) {
        int codePoint = Character.codePointAt(seq, i);
        count++;
        i += Character.charCount(codePoint);
    }
    return count;
}
```

This version first checks if the char sequence is null and throws a `NullPointerException` if it is. It also checks if the start and end indices are within the bounds of the char sequence and throws an `IndexOutOfBoundsException` if they are not. If the checks pass, it proceeds with the same code as before to count the code points in the text range.
------------------------------------------------------
