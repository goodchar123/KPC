List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
The Java JDK methods used in the `BlockingDeque` interface are:

- `java.util.concurrent.BlockingQueue.offer(E e, long timeout, java.util.concurrent.TimeUnit unit) throws InterruptedException`
- `java.util.concurrent.BlockingQueue.put(E e) throws InterruptedException`
- `java.util.concurrent.BlockingQueue.take() throws InterruptedException`
- `java.util.concurrent.BlockingQueue.poll(long timeout, java.util.concurrent.TimeUnit unit) throws InterruptedException`
- `java.util.concurrent.BlockingQueue.remainingCapacity()`
- `java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E> c)`
- `java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<? super E> c, int maxElements)`
- `java.util.Deque.addFirst(E e)`
- `java.util.Deque.addLast(E e)`
- `java.util.Deque.offerFirst(E e)`
- `java.util.Deque.offerLast(E e)`
- `java.util.Deque.removeFirst()`
- `java.util.Deque.removeLast()`
- `java.util.Deque.pollFirst()`
- `java.util.Deque.pollLast()`
- `java.util.Deque.getFirst()`
- `java.util.Deque.getLast()`
- `java.util.Deque.peekFirst()`
- `java.util.Deque.peekLast()`
- `java.util.Deque.removeFirstOccurrence(Object o)`
- `java.util.Deque.removeLastOccurrence(Object o)`
- `java.util.Deque.push(E e)`
- `java.util.Deque.pop()`
- `java.util.Deque.iterator()`
- `java.util.Deque.descendingIterator()`
- `java.util.Collection.addAll(Collection<? extends E> c)`
- `java.util.Collection.clear()`
- `java.util.Collection.contains(Object o)`
- `java.util.Collection.containsAll(Collection<?> c)`
- `java.util.Collection.isEmpty()`
- `java.util.Collection.remove(Object o)`
- `java.util.Collection.removeAll(Collection<?> c)`
- `java.util.Collection.retainAll(Collection<?> c)`
- `java.util.Collection.size()`
- `java.util.Collection.toArray()`
- `java.util.Collection.toArray(T[] a)`

 + From response, we get: ['BlockingDeque', 'java.util.concurrent.BlockingQueue.offer(Ee,longtimeout,java.util.concurrent.TimeUnitunit)throwsInterruptedException', 'java.util.concurrent.BlockingQueue.put(Ee)throwsInterruptedException', 'java.util.concurrent.BlockingQueue.take()throwsInterruptedException', 'java.util.concurrent.BlockingQueue.poll(longtimeout,java.util.concurrent.TimeUnitunit)throwsInterruptedException', 'java.util.concurrent.BlockingQueue.remainingCapacity()', 'java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<?superE>c)', 'java.util.concurrent.BlockingQueue.drainTo(java.util.Collection<?superE>c,intmaxElements)', 'java.util.Deque.addFirst(Ee)', 'java.util.Deque.addLast(Ee)', 'java.util.Deque.offerFirst(Ee)', 'java.util.Deque.offerLast(Ee)', 'java.util.Deque.removeFirst()', 'java.util.Deque.removeLast()', 'java.util.Deque.pollFirst()', 'java.util.Deque.pollLast()', 'java.util.Deque.getFirst()', 'java.util.Deque.getLast()', 'java.util.Deque.peekFirst()', 'java.util.Deque.peekLast()', 'java.util.Deque.removeFirstOccurrence(Objecto)', 'java.util.Deque.removeLastOccurrence(Objecto)', 'java.util.Deque.push(Ee)', 'java.util.Deque.pop()', 'java.util.Deque.iterator()', 'java.util.Deque.descendingIterator()', 'java.util.Collection.addAll(Collection<?extendsE>c)', 'java.util.Collection.clear()', 'java.util.Collection.contains(Objecto)', 'java.util.Collection.containsAll(Collection<?>c)', 'java.util.Collection.isEmpty()', 'java.util.Collection.remove(Objecto)', 'java.util.Collection.removeAll(Collection<?>c)', 'java.util.Collection.retainAll(Collection<?>c)', 'java.util.Collection.size()', 'java.util.Collection.toArray()', 'java.util.Collection.toArray(T[]a)']
------------------------------------------------------
Is the NoSuchElementException handled or caught for java.util.Deque.removeFirst() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NoSuchElementException handled or caught for java.util.Deque.removeLast() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NoSuchElementException handled or caught for java.util.Deque.getFirst() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NoSuchElementException handled or caught for java.util.Deque.getLast() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the NoSuchElementException handled or caught for java.util.Deque.pop() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the UnsupportedOperationException handled or caught for java.util.Collection.clear() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
The Java JDK methods used in the `BlockingDeque` interface are:

- `addFirst(E e)` from `java.util.Deque`
- `addLast(E e)` from `java.util.Deque`
- `offerFirst(E e, long timeout, TimeUnit unit)` from `java.util.concurrent.BlockingDeque`
- `offerLast(E e, long timeout, TimeUnit unit)` from `java.util.concurrent.BlockingDeque`
- `putFirst(E e)` from `java.util.concurrent.BlockingDeque`
- `putLast(E e)` from `java.util.concurrent.BlockingDeque`
- `offerFirst(E e)` from `java.util.Deque`
- `offerLast(E e)` from `java.util.Deque`
- `takeFirst()` from `java.util.concurrent.BlockingDeque`
- `takeLast()` from `java.util.concurrent.BlockingDeque`
- `pollFirst(long timeout, TimeUnit unit)` from `java.util.concurrent.BlockingDeque`
- `pollLast(long timeout, TimeUnit unit)` from `java.util.concurrent.BlockingDeque`
- `pollFirst()` from `java.util.Deque`
- `pollLast()` from `java.util.Deque`
- `removeFirstOccurrence(Object o)` from `java.util.Deque`
- `removeLastOccurrence(Object o)` from `java.util.Deque`
- `add(E e)` from `java.util.Collection`
- `offer(E e, long timeout, TimeUnit unit)` from `java.util.concurrent.BlockingQueue`
- `put(E e)` from `java.util.concurrent.BlockingQueue`
- `offer(E e)` from `java.util.Queue`
- `remove()` from `java.util.Queue`
- `poll(long timeout, TimeUnit unit)` from `java.util.concurrent.BlockingQueue`
- `take()` from `java.util.concurrent.BlockingQueue`
- `poll()` from `java.util.Queue`
- `element()` from `java.util.Queue`
- `peek()` from `java.util.Queue`
- `push(E e)` from `java.util.Deque`
- `pop()` from `java.util.Deque`
- `remove(Object o)` from `java.util.Collection`
- `size()` from `java.util.Collection`
- `contains(Object o)` from `java.util.Collection`
- `iterator()` from `java.lang.Iterable`
- `descendingIterator()` from `java.util.Deque`
- `addAll(Collection<? extends E> c)` from `java.util.Collection`
- `clear()` from `java.util.Collection`
- `retainAll(Collection<?> c)` from `java.util.Collection`
- `removeAll(Collection<?> c)` from `java.util.Collection`
- `containsAll(Collection<?> c)` from `java.util.Collection`
- `toArray()` from `java.util.Collection`
- `toArray(T[] a)` from `java.util.Collection`

 + From response, we get: ['BlockingDeque', 'addFirst(Ee)', 'addLast(Ee)', 'offerFirst(Ee,longtimeout,TimeUnitunit)', 'offerLast(Ee,longtimeout,TimeUnitunit)', 'putFirst(Ee)', 'putLast(Ee)', 'offerFirst(Ee)', 'offerLast(Ee)', 'takeFirst()', 'takeLast()', 'pollFirst(longtimeout,TimeUnitunit)', 'pollLast(longtimeout,TimeUnitunit)', 'pollFirst()', 'pollLast()', 'removeFirstOccurrence(Objecto)', 'removeLastOccurrence(Objecto)', 'add(Ee)', 'offer(Ee,longtimeout,TimeUnitunit)', 'put(Ee)', 'offer(Ee)', 'remove()', 'poll(longtimeout,TimeUnitunit)', 'take()', 'poll()', 'element()', 'peek()', 'push(Ee)', 'pop()', 'remove(Objecto)', 'size()', 'contains(Objecto)', 'iterator()', 'descendingIterator()', 'addAll(Collection<?extendsE>c)', 'clear()', 'retainAll(Collection<?>c)', 'removeAll(Collection<?>c)', 'containsAll(Collection<?>c)', 'toArray()', 'toArray(T[]a)']
------------------------------------------------------
