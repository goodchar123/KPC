Please write a java method that Reads len doubles (64-bit IEEE double-precision floats) from the stream according to the current byte order, and stores them into d starting at index off.
Here's a possible implementation of the method:

```java
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;

public class DoubleReader {
    
    public static void readDoubles(InputStream in, double[] d, int off, int len, boolean bigEndian) throws IOException {
        DataInputStream dis = new DataInputStream(in);
        if (bigEndian) {
            for (int i = 0; i < len; i++) {
                d[off + i] = dis.readDouble();
            }
        } else {
            byte[] buffer = new byte[8];
            for (int i = 0; i < len; i++) {
                dis.readFully(buffer);
                long bits = ((long) buffer[0] << 56) |
                            ((long) (buffer[1] & 255) << 48) |
                            ((long) (buffer[2] & 255) << 40) |
                            ((long) (buffer[3] & 255) << 32) |
                            ((long) (buffer[4] & 255) << 24) |
                            ((buffer[5] & 255) << 16) |
                            ((buffer[6] & 255) << 8) |
                            ((buffer[7] & 255) << 0);
                d[off + i] = Double.longBitsToDouble(bits);
            }
        }
    }
    
}
```

The method takes an `InputStream` as input, along with an array of `double` values (`d`), an offset (`off`), a length (`len`), and a boolean flag indicating whether the byte order is big-endian or not. 

If the byte order is big-endian, the method simply reads `len` doubles from the input stream using a `DataInputStream` and stores them into the `d` array starting at the specified offset.

If the byte order is not big-endian, the method reads `len` groups of 8 bytes from the input stream, interprets them as a 64-bit integer in little-endian byte order, and converts them to a `double` value using the `Double.longBitsToDouble()` method. The resulting `double` values are stored into the `d` array starting at the specified offset.

Note that the method throws an `IOException` if there is an error reading from the input stream.
------------------------------------------------------
Please check if this input stream reaches the end before               reading eight bytes. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw EOFException.
Please check if b is null. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw NullPointerException.
Here's an updated implementation of the `readDoubles` method that includes the requested checks:

```java
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

public class DoubleReader {
    
    public static void readDoubles(InputStream in, double[] d, int off, int len, boolean bigEndian) throws IOException {
        Objects.requireNonNull(in, "Input stream cannot be null");
        Objects.requireNonNull(d, "Array of doubles cannot be null");
        if (off < 0 || len < 0 || off + len > d.length) {
            throw new IndexOutOfBoundsException("Invalid offset or length");
        }
        DataInputStream dis = new DataInputStream(in);
        if (bigEndian) {
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                d[off + i] = dis.readDouble();
            }
        } else {
            byte[] buffer = new byte[8];
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                dis.readFully(buffer);
                long bits = ((long) buffer[0] << 56) |
                            ((long) (buffer[1] & 255) << 48) |
                            ((long) (buffer[2] & 255) << 40) |
                            ((long) (buffer[3] & 255) << 32) |
                            ((long) (buffer[4] & 255) << 24) |
                            ((buffer[5] & 255) << 16) |
                            ((buffer[6] & 255) << 8) |
                            ((buffer[7] & 255) << 0);
                d[off + i] = Double.longBitsToDouble(bits);
            }
        }
    }
    
}
```

The updated method includes the following checks:

- The input stream and the array of doubles are checked for null values using the `Objects.requireNonNull()` method. If either of them is null, a `NullPointerException` is thrown with an appropriate message.
- The offset and length parameters are checked to ensure that they are valid indices for the `d` array. If either of them is invalid, an `IndexOutOfBoundsException` is thrown with an appropriate message.
- Before reading each group of 8 bytes, the method checks if the input stream has reached the end using the `available()` method of the `DataInputStream`. If the stream has less than 8 bytes available, an `EOFException` is thrown with an appropriate message.

These checks help ensure that the method behaves correctly and gracefully handles invalid input.
------------------------------------------------------
Please check if this input stream reaches the end before               reading eight bytes. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw EOFException.
Please check the stream has been closed and the contained             input stream does not support reading after close, or             another I/O error occurs. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw IOException.
Please check if b is null. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw NullPointerException.
Here's an updated implementation of the `readDoubles` method that includes the additional checks:

```java
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

public class DoubleReader {
    
    public static void readDoubles(InputStream in, double[] d, int off, int len, boolean bigEndian) throws IOException {
        Objects.requireNonNull(in, "Input stream cannot be null");
        Objects.requireNonNull(d, "Array of doubles cannot be null");
        if (off < 0 || len < 0 || off + len > d.length) {
            throw new IndexOutOfBoundsException("Invalid offset or length");
        }
        DataInputStream dis = new DataInputStream(in);
        if (bigEndian) {
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                d[off + i] = dis.readDouble();
            }
        } else {
            byte[] buffer = new byte[8];
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                dis.readFully(buffer);
                long bits = ((long) buffer[0] << 56) |
                            ((long) (buffer[1] & 255) << 48) |
                            ((long) (buffer[2] & 255) << 40) |
                            ((long) (buffer[3] & 255) << 32) |
                            ((long) (buffer[4] & 255) << 24) |
                            ((buffer[5] & 255) << 16) |
                            ((buffer[6] & 255) << 8) |
                            ((buffer[7] & 255) << 0);
                d[off + i] = Double.longBitsToDouble(bits);
            }
        }
        if (dis.available() > 0) {
            throw new IOException("Input stream has more data than expected");
        }
        if (dis.read() != -1) {
            throw new IOException("Input stream has been closed or an I/O error occurred");
        }
    }
    
}
```

The updated method includes the following additional checks:

- After reading all the doubles, the method checks if the input stream has more data than expected using the `available()` method of the `DataInputStream`. If there is more data available, an `IOException` is thrown with an appropriate message.
- After reading all the doubles, the method checks if the input stream has been closed or if an I/O error occurred by attempting to read one more byte using the `read()` method of the `DataInputStream`. If the result is not -1, an `IOException` is thrown with an appropriate message.

These checks help ensure that the method behaves correctly and gracefully handles additional error conditions.
------------------------------------------------------
Please check the stream has been closed and the contained             input stream does not support reading after close, or             another I/O error occurs. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw IOException.
Please check if b is null. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw NullPointerException.
Here's an updated implementation of the `readDoubles` method that includes the additional checks:

```java
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

public class DoubleReader {
    
    public static void readDoubles(InputStream in, double[] d, int off, int len, boolean bigEndian) throws IOException {
        Objects.requireNonNull(in, "Input stream cannot be null");
        Objects.requireNonNull(d, "Array of doubles cannot be null");
        if (off < 0 || len < 0 || off + len > d.length) {
            throw new IndexOutOfBoundsException("Invalid offset or length");
        }
        DataInputStream dis = new DataInputStream(in);
        if (bigEndian) {
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                d[off + i] = dis.readDouble();
            }
        } else {
            byte[] buffer = new byte[8];
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                dis.readFully(buffer);
                long bits = ((long) buffer[0] << 56) |
                            ((long) (buffer[1] & 255) << 48) |
                            ((long) (buffer[2] & 255) << 40) |
                            ((long) (buffer[3] & 255) << 32) |
                            ((long) (buffer[4] & 255) << 24) |
                            ((buffer[5] & 255) << 16) |
                            ((buffer[6] & 255) << 8) |
                            ((buffer[7] & 255) << 0);
                d[off + i] = Double.longBitsToDouble(bits);
            }
        }
        if (dis.available() > 0) {
            throw new IOException("Input stream has more data than expected");
        }
        try {
            dis.readByte();
            throw new IOException("Input stream has not been closed");
        } catch (EOFException e) {
            // expected exception, stream has been closed
        }
    }
    
}
```

The updated method includes the following additional checks:

- After reading all the doubles, the method attempts to read one more byte using the `readByte()` method of the `DataInputStream`. If an `EOFException` is thrown, it means that the stream has been closed, so the method completes successfully. If any other exception is thrown, it means that the stream has not been closed, so an `IOException` is thrown with an appropriate message.

These checks help ensure that the method behaves correctly and gracefully handles additional error conditions.
------------------------------------------------------
Please check the stream has been closed and the contained             input stream does not support reading after close, or             another I/O error occurs. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw IOException.
Please check if b is null. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw NullPointerException.
Please check the stream has been closed and the contained          input stream does not support reading after close, or          another I/O error occurs. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw IOException.
Here's an updated implementation of the `readDoubles` method that includes the additional checks:

```java
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

public class DoubleReader {
    
    public static void readDoubles(InputStream in, double[] d, int off, int len, boolean bigEndian) throws IOException {
        Objects.requireNonNull(in, "Input stream cannot be null");
        Objects.requireNonNull(d, "Array of doubles cannot be null");
        if (off < 0 || len < 0 || off + len > d.length) {
            throw new IndexOutOfBoundsException("Invalid offset or length");
        }
        DataInputStream dis = new DataInputStream(in);
        if (bigEndian) {
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                d[off + i] = dis.readDouble();
            }
        } else {
            byte[] buffer = new byte[8];
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                dis.readFully(buffer);
                long bits = ((long) buffer[0] << 56) |
                            ((long) (buffer[1] & 255) << 48) |
                            ((long) (buffer[2] & 255) << 40) |
                            ((long) (buffer[3] & 255) << 32) |
                            ((long) (buffer[4] & 255) << 24) |
                            ((buffer[5] & 255) << 16) |
                            ((buffer[6] & 255) << 8) |
                            ((buffer[7] & 255) << 0);
                d[off + i] = Double.longBitsToDouble(bits);
            }
        }
        if (dis.available() > 0) {
            throw new IOException("Input stream has more data than expected");
        }
        try {
            dis.readByte();
            throw new IOException("Input stream has not been closed");
        } catch (EOFException e) {
            // expected exception, stream has been closed
        }
        if (dis.read() != -1) {
            throw new IOException("Input stream has been closed or an I/O error occurred");
        }
    }
    
}
```

The updated method includes the following additional checks:

- After reading all the doubles, the method attempts to read one more byte using the `readByte()` method of the `DataInputStream`. If an `EOFException` is thrown, it means that the stream has been closed, so the method proceeds to the next check. If any other exception is thrown, it means that the stream has not been closed, so an `IOException` is thrown with an appropriate message.
- After checking if the stream has been closed, the method attempts to read one more byte using the `read()` method of the `DataInputStream`. If the result is not -1, it means that the stream has been closed or an I/O error occurred, so an `IOException` is thrown with an appropriate message.

These checks help ensure that the method behaves correctly and gracefully handles additional error conditions.
------------------------------------------------------
Please check if this input stream reaches the end before               reading eight bytes. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw EOFException.
Please check the stream has been closed and the contained             input stream does not support reading after close, or             another I/O error occurs. for java.io.DataInputStream.readDouble() in the code snippet you provided, otherwise throw IOException.
Please check if b is null. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw NullPointerException.
Please check if this input stream reaches the end before          reading all the bytes. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw EOFException.
Please check the stream has been closed and the contained          input stream does not support reading after close, or          another I/O error occurs. for java.io.DataInputStream.readFully(byte[]) in the code snippet you provided, otherwise throw IOException.
Here's an updated implementation of the `readDoubles` method that includes all the requested checks:

```java
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

public class DoubleReader {
    
    public static void readDoubles(InputStream in, double[] d, int off, int len, boolean bigEndian) throws IOException {
        Objects.requireNonNull(in, "Input stream cannot be null");
        Objects.requireNonNull(d, "Array of doubles cannot be null");
        if (off < 0 || len < 0 || off + len > d.length) {
            throw new IndexOutOfBoundsException("Invalid offset or length");
        }
        DataInputStream dis = new DataInputStream(in);
        if (bigEndian) {
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                d[off + i] = dis.readDouble();
            }
        } else {
            byte[] buffer = new byte[8];
            for (int i = 0; i < len; i++) {
                if (dis.available() < 8) {
                    throw new EOFException("End of stream reached before reading eight bytes");
                }
                dis.readFully(buffer);
                long bits = ((long) buffer[0] << 56) |
                            ((long) (buffer[1] & 255) << 48) |
                            ((long) (buffer[2] & 255) << 40) |
                            ((long) (buffer[3] & 255) << 32) |
                            ((long) (buffer[4] & 255) << 24) |
                            ((buffer[5] & 255) << 16) |
                            ((buffer[
------------------------------------------------------
