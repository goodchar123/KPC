
Sure, here's the updated Java method that checks for null and non-array types and throws the appropriate exceptions:

```java
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;

public class ArrayVarHandle {
    public static <T> VarHandle arrayElementVarHandle(Class<T[]> arrayClass) {
        if (arrayClass == null) {
            throw new NullPointerException("arrayClass cannot be null");
        }
        if (!arrayClass.isArray()) {
            throw new IllegalArgumentException("arrayClass must be an array type");
        }
        return MethodHandles.arrayElementVarHandle(arrayClass.getComponentType());
    }
}
```

This updated method first checks if the `arrayClass` parameter is null, and throws a `NullPointerException` if it is. It then checks if `arrayClass` is an array type using the `isArray()` method, and throws an `IllegalArgumentException` if it is not. If both checks pass, it returns the `VarHandle` created using `MethodHandles.arrayElementVarHandle()`.
------------------------------------------------------
