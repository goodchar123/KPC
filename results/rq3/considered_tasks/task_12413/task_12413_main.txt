Please write a java method that Produces a VarHandle giving access to elements of an array of type arrayClass.
Here's an example Java method that produces a VarHandle giving access to elements of an array of type arrayClass:

```java
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;

public class ArrayVarHandle {
    public static <T> VarHandle arrayElementVarHandle(Class<T[]> arrayClass) {
        return MethodHandles.arrayElementVarHandle(arrayClass.getComponentType());
    }
}
```

This method takes a `Class<T[]>` object representing the array type and returns a `VarHandle` that can be used to access elements of arrays of that type. The `MethodHandles.arrayElementVarHandle()` method is used to create the `VarHandle`, and the component type of the array class is passed as an argument to this method.
------------------------------------------------------
Please check if the arrayClass is null for java.lang.invoke.MethodHandles.arrayElementVarHandle(java.lang.Class) in the code snippet you provided, otherwise throw NullPointerException.
Please check if arrayClass is not an array type for java.lang.invoke.MethodHandles.arrayElementVarHandle(java.lang.Class) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's the updated Java method that checks for null and non-array types and throws the appropriate exceptions:

```java
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;

public class ArrayVarHandle {
    public static <T> VarHandle arrayElementVarHandle(Class<T[]> arrayClass) {
        if (arrayClass == null) {
            throw new NullPointerException("arrayClass cannot be null");
        }
        if (!arrayClass.isArray()) {
            throw new IllegalArgumentException("arrayClass must be an array type");
        }
        return MethodHandles.arrayElementVarHandle(arrayClass.getComponentType());
    }
}
```

This updated method first checks if the `arrayClass` parameter is null, and throws a `NullPointerException` if it is. It then checks if `arrayClass` is an array type using the `isArray()` method, and throws an `IllegalArgumentException` if it is not. If both checks pass, it returns the `VarHandle` created using `MethodHandles.arrayElementVarHandle()`.
------------------------------------------------------
