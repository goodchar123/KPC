Please write a java method that Scans the next token of the input as a long.
Sure, here's a Java method that scans the next token of the input as a long:

```java
import java.util.Scanner;

public class ScannerExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long number = scanner.nextLong();
        System.out.println("The number entered is: " + number);
    }
}
```

In this example, we create a `Scanner` object to read input from the console. We then call the `nextLong()` method on the `Scanner` object to read the next token of input as a `long`. Finally, we print out the value of the `long` variable using `System.out.println()`.
------------------------------------------------------
Please check if the next token does not match the Integer         regular expression, or is out of range for java.util.Scanner.nextLong() in the code snippet you provided, otherwise throw InputMismatchException.
Please check if input is exhausted for java.util.Scanner.nextLong() in the code snippet you provided, otherwise throw NoSuchElementException.
Please check if this scanner is closed for java.util.Scanner.nextLong() in the code snippet you provided, otherwise throw IllegalStateException.
Sure, here's the updated Java method that includes the requested exception handling:

```java
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class ScannerExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long number;
        try {
            if (!scanner.hasNextLong()) {
                throw new InputMismatchException("Next token does not match the Integer regular expression");
            }
            number = scanner.nextLong();
            if (number < Long.MIN_VALUE || number > Long.MAX_VALUE) {
                throw new InputMismatchException("Next token is out of range for java.util.Scanner.nextLong()");
            }
        } catch (NoSuchElementException e) {
            throw new NoSuchElementException("Input is exhausted for java.util.Scanner.nextLong()");
        } catch (IllegalStateException e) {
            throw new IllegalStateException("This scanner is closed for java.util.Scanner.nextLong()");
        }
        System.out.println("The number entered is: " + number);
    }
}
```

In this updated example, we use a `try-catch` block to handle the possible exceptions that can be thrown by the `Scanner` class. 

First, we check if the next token matches the `long` regular expression using the `hasNextLong()` method. If it doesn't match, we throw an `InputMismatchException` with a custom error message.

Next, we check if the `long` value is within the range of `Long.MIN_VALUE` and `Long.MAX_VALUE`. If it's out of range, we throw an `InputMismatchException` with a custom error message.

If the input is exhausted, we catch the `NoSuchElementException` and throw a new `NoSuchElementException` with a custom error message.

If the scanner is closed, we catch the `IllegalStateException` and throw a new `IllegalStateException` with a custom error message.

Finally, we print out the value of the `long` variable using `System.out.println()`.
------------------------------------------------------
