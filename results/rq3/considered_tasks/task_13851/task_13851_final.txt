
Sure, here's the updated Java method that throws a `MissingResourceException` if the three-letter country abbreviation is not available for a locale:

```java
import java.util.*;

public class CountryCodes {
    public static Set<String> getCountryCodes(String type) throws MissingResourceException {
        Set<String> countryCodes = new HashSet<>();
        Locale[] locales = Locale.getAvailableLocales();
        for (Locale locale : locales) {
            if (type.equals("alpha2")) {
                String countryCode = locale.getCountry();
                if (countryCode.length() == 2) {
                    countryCodes.add(countryCode);
                }
            } else if (type.equals("alpha3")) {
                try {
                    String countryCode = locale.getISO3Country();
                    countryCodes.add(countryCode);
                } catch (MissingResourceException e) {
                    throw new MissingResourceException("Three-letter country abbreviation not available for locale: " + locale, "Locale", locale.toString());
                }
            }
        }
        return countryCodes;
    }
}
```

This updated method now includes a try-catch block around the call to `locale.getISO3Country()`. If a `MissingResourceException` is thrown, it is caught and a new `MissingResourceException` is thrown with a more informative error message that includes the problematic locale.
------------------------------------------------------
