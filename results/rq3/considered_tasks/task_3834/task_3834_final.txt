
Sure, here's an updated version of the code that includes the error checking you requested:

```java
import javax.xml.xpath.*;

public class XPathFactoryHelper {
    public static XPathFactory newFactory() {
        try {
            return newFactory(null);
        } catch (XPathFactoryConfigurationException e) {
            throw new RuntimeException("Failed to create XPathFactory", e);
        }
    }

    public static XPathFactory newFactory(XPathVariableResolver resolver) throws XPathFactoryConfigurationException {
        XPathFactory factory = XPathFactory.newInstance();
        if (resolver != null) {
            factory.setXPathVariableResolver(resolver);
        } else {
            throw new NullPointerException("Resolver cannot be null");
        }
        return factory;
    }
}
```

In the `newFactory()` method, we catch the `XPathFactoryConfigurationException` that can be thrown if there is a failure in creating the `XPathFactory` for the default object model. We then throw a `RuntimeException` with the original exception as the cause.

In the `newFactory(XPathVariableResolver resolver)` method, we check if the `resolver` parameter is null. If it is, we throw a `NullPointerException`. Otherwise, we set the variable resolver on the `XPathFactory` object and return it.
------------------------------------------------------
