Please write a java method that Reads a 32 bit int.
Here's a Java method that reads a 32-bit integer from the console input:

```java
import java.util.Scanner;

public class ReadInt {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a 32-bit integer: ");
        int num = scanner.nextInt();
        System.out.println("You entered: " + num);
    }
}
```

This method uses the `Scanner` class to read input from the console. The `nextInt()` method reads the next integer value from the input stream and returns it as a 32-bit integer. The method then prints the value of the integer to the console.
------------------------------------------------------
Please check if the next token does not match the Integer         regular expression, or is out of range for java.util.Scanner.nextInt() in the code snippet you provided, otherwise throw InputMismatchException.
Please check if input is exhausted for java.util.Scanner.nextInt() in the code snippet you provided, otherwise throw NoSuchElementException.
Please check if this scanner is closed for java.util.Scanner.nextInt() in the code snippet you provided, otherwise throw IllegalStateException.
You can modify the code snippet I provided earlier to include the exception handling you mentioned. Here's the updated code:

```java
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class ReadInt {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a 32-bit integer: ");
        try {
            int num = scanner.nextInt();
            System.out.println("You entered: " + num);
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a valid 32-bit integer.");
        } catch (NoSuchElementException e) {
            System.out.println("Input exhausted. Please enter a 32-bit integer.");
        } catch (IllegalStateException e) {
            System.out.println("Scanner is closed. Please create a new scanner object.");
        }
    }
}
```

In this updated code, we have added try-catch blocks to handle the exceptions that can be thrown by the `nextInt()` method of the `Scanner` class. 

If the input does not match the integer regular expression or is out of range for `nextInt()`, an `InputMismatchException` is thrown. We catch this exception and print an error message to the console.

If the input is exhausted, a `NoSuchElementException` is thrown. We catch this exception and print an error message to the console.

If the scanner is closed, an `IllegalStateException` is thrown. We catch this exception and print an error message to the console.
------------------------------------------------------
