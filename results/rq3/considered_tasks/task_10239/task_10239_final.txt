
Sure, here's the updated Java method that checks for the mentioned exceptions:

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class FileReader {
    public static double readDoubleFromFile(String fileName) throws FileNotFoundException, InputMismatchException, NoSuchElementException, IllegalStateException {
        double result = 0.0;
        File file = new File(fileName);
        Scanner scanner = new Scanner(file);
        try {
            if (!scanner.hasNextFloat()) {
                throw new InputMismatchException("Next token does not match the Float regular expression");
            }
            result = scanner.nextDouble();
        } catch (InputMismatchException e) {
            scanner.close();
            throw e;
        } catch (NoSuchElementException e) {
            scanner.close();
            throw e;
        } catch (IllegalStateException e) {
            scanner.close();
            throw e;
        }
        scanner.close();
        return result;
    }
}
```

This updated method now throws the mentioned exceptions if they occur. It first checks if the next token does not match the Float regular expression or is out of range for `Scanner.nextDouble()`. If so, it throws an `InputMismatchException`. It also checks if the input is exhausted for `Scanner.nextDouble()`, in which case it throws a `NoSuchElementException`. Finally, it checks if the scanner is closed for `Scanner.nextDouble()`, in which case it throws an `IllegalStateException`.
------------------------------------------------------
