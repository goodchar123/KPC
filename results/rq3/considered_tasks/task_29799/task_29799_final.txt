
Sure, here's the updated Java method that checks for the conditions you mentioned and throws an `IndexOutOfBoundsException` if any of them are true:

```java
public String fetchText(String document, int startIndex, int endIndex) {
    if (startIndex < 0 || endIndex > document.length() || startIndex > endIndex) {
        throw new IndexOutOfBoundsException();
    }
    return document.substring(startIndex, endIndex);
}
```

This updated method first checks if `startIndex` is negative, or if `endIndex` is larger than the length of the `document` string, or if `startIndex` is larger than `endIndex`. If any of these conditions are true, it throws an `IndexOutOfBoundsException`.

If none of these conditions are true, the method uses the `substring` method of the `String` class to extract the text between the specified indices and returns it as a new string.

You can call this method like this:

```java
String document = "This is a sample document.";
int startIndex = 5;
int endIndex = 16;

String text = fetchText(document, startIndex, endIndex);
System.out.println(text); // Output: "is a sample"
```

In this example, the `fetchText` method is called with the `document` string, a `startIndex` of 5 (which corresponds to the first "is" in the document), and an `endIndex` of 16 (which corresponds to the last "e" in "sample"). The method then returns the text between those indices, which is "is a sample".

If you call the `fetchText` method with invalid indices, like this:

```java
String document = "This is a sample document.";
int startIndex = -1;
int endIndex = 20;

String text = fetchText(document, startIndex, endIndex);
```

The method will throw an `IndexOutOfBoundsException`.
------------------------------------------------------
