
I apologize for the confusion earlier. Here's the updated code snippet that checks if the index is out of range and throws an `ArrayIndexOutOfBoundsException` if it is:

```java
public static void storeVector(byte[] array, int offset, int mask, Vector<Integer> vector) {
    int index = offset;
    int bitMask = 1;
    byte value = 0;
    
    for (int i = 0; i < vector.size(); i++) {
        int vectorValue = vector.get(i);
        if (vectorValue != 0 && vectorValue != 1) {
            throw new IllegalArgumentException("Vector must contain only 0s and 1s");
        }
        
        if (vectorValue != 0) {
            value |= bitMask;
        }
        
        bitMask <<= 1;
        
        if ((bitMask & mask) == 0) {
            array[index] = value;
            index++;
            value = 0;
            bitMask = 1;
        }
    }
    
    if (bitMask != 1) {
        array[index] = value;
    }
    
    if (index - offset != (vector.size() + mask - 1) / mask) {
        throw new ArrayIndexOutOfBoundsException("Array size is not sufficient to store the vector");
    }
    
    if (offset < 0 || index >= array.length) {
        throw new ArrayIndexOutOfBoundsException("Offset is out of range");
    }
}
```

This updated version of the method checks if the offset is out of range and throws an `ArrayIndexOutOfBoundsException` if it is. It also checks if the vector contains only 0s and 1s, and throws an `IllegalArgumentException` if it doesn't. Finally, it checks if the resulting array size is sufficient to store the vector, and throws an `ArrayIndexOutOfBoundsException` if it isn't.
------------------------------------------------------
