
Sure, here's an updated version of the `contains()` method for a `Set` that checks for `ClassCastException` and `NullPointerException`:

```java
import java.util.Set;

public class SetUtils {
    public static boolean contains(Set<?> set, Object element) {
        if (element == null && !set.contains(null)) {
            throw new NullPointerException("This set does not permit null elements");
        }
        try {
            return set.contains(element);
        } catch (ClassCastException e) {
            throw new ClassCastException("The type of the specified element is incompatible with this set");
        }
    }

    public static void main(String[] args) {
        Set<String> set = Set.of("apple", "banana", "orange");
        System.out.println(contains(set, "banana"));
        System.out.println(contains(set, "grape"));
        System.out.println(contains(set, null));
    }
}
```

In this updated version, we're first checking if the specified element is null and the set doesn't permit null elements. If this is the case, we throw a `NullPointerException`. We're then using a try-catch block to catch any `ClassCastException` that might occur when calling `set.contains(element)`. If a `ClassCastException` is caught, we throw a new `ClassCastException` with a more descriptive error message. Otherwise, we simply return the result of `set.contains(element)` as before.
------------------------------------------------------
