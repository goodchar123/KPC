
Sure, here's an updated version of the code snippet that includes the requested checks:

```
public interface BlockingDeque<E> extends BlockingQueue<E>, Deque<E> {

    void addFirst(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    void addLast(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    void putFirst(E e) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    void putLast(E e) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offerFirst(E e);

    boolean offerLast(E e);

    E takeFirst() throws InterruptedException, NoSuchElementException;

    E takeLast() throws InterruptedException, NoSuchElementException;

    E pollFirst(long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    E pollLast(long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    E pollFirst();

    E pollLast();

    boolean removeFirstOccurrence(Object o);

    boolean removeLastOccurrence(Object o);

    boolean add(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    void put(E e) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    boolean offer(E e);

    E remove() throws NoSuchElementException;

    E poll(long timeout, TimeUnit unit) throws InterruptedException, ClassCastException, NullPointerException, IllegalArgumentException;

    E take() throws InterruptedException, NoSuchElementException;

    E poll();

    E element() throws NoSuchElementException;

    E peek();

    void push(E e) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    E pop() throws NoSuchElementException;

    boolean remove(Object o);

    int size();

    boolean contains(Object o);

    Iterator<E> iterator();

    Iterator<E> descendingIterator();

    boolean addAll(Collection<? extends E> c) throws IllegalStateException, ClassCastException, NullPointerException, IllegalArgumentException;

    void clear();

    boolean retainAll(Collection<?> c);

    boolean removeAll(Collection<?> c);

    boolean containsAll(Collection<?> c);

    Object[] toArray();

    <T> T[] toArray(T[] a);
    
    default E removeFirst() {
        E element = pollFirst();
        if (element == null) {
            throw new NoSuchElementException();
        }
        return element;
    }

    default E removeLast() {
        E element = pollLast();
        if (element == null) {
            throw new NoSuchElementException();
        }
        return element;
    }

    default E getFirst() {
        E element = peekFirst();
        if (element == null) {
            throw new NoSuchElementException();
        }
        return element;
    }

    default E getLast() {
        E element = peekLast();
        if (element == null) {
            throw new NoSuchElementException();
        }
        return element;
    }

    default E pop() {
        E element = removeFirst();
        if (element == null) {
            throw new NoSuchElementException();
        }
        return element;
    }
}
```

I added the checks to the default implementations of `removeFirst()`, `removeLast()`, `getFirst()`, `getLast()`, and `pop()`. These methods now throw a `NoSuchElementException` if the deque is empty.
------------------------------------------------------
