
Sure, here's the updated Java method that checks for exceptions:

```java
public static int getFieldValue(DayOfWeek dayOfWeek, TemporalField field) {
    try {
        return dayOfWeek.get(field);
    } catch (DateTimeException | UnsupportedTemporalTypeException | ArithmeticException e) {
        System.err.println("Exception occurred: " + e.getMessage());
        return -1; // or throw the exception further up the call stack
    }
}
```

This method now catches three possible exceptions that can occur when calling `dayOfWeek.get(field)`:

- `DateTimeException`: thrown if the value for the field cannot be obtained or is outside the range of valid values for the field.
- `UnsupportedTemporalTypeException`: thrown if the field is not supported or the range of values exceeds an int.
- `ArithmeticException`: thrown if numeric overflow occurs.

If any of these exceptions occur, the method prints an error message and returns `-1` (or you can choose to throw the exception further up the call stack).

You can call this method like before:

```java
DayOfWeek monday = DayOfWeek.MONDAY;
int dayOfWeekValue = getFieldValue(monday, ChronoField.DAY_OF_WEEK);
System.out.println(dayOfWeekValue); // Output: 1
```

If an exception occurs, the error message will be printed to the console.
------------------------------------------------------
