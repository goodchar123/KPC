
Sure, here's the updated Java method that checks for maximum and minimum instant and null input:

```java
public Instant getInstantFromEpochSecondsAndNanos(long epochSeconds, int nanos) {
    Instant instant;
    try {
        instant = Instant.ofEpochSecond(epochSeconds, nanos);
    } catch (DateTimeException e) {
        throw new DateTimeException("Instant exceeds maximum or minimum instant");
    } catch (ArithmeticException e) {
        throw new ArithmeticException("Numeric overflow occurs for Instant");
    }
    if (instant.isAfter(Instant.MAX) || instant.isBefore(Instant.MIN)) {
        throw new DateTimeException("Instant exceeds maximum or minimum instant");
    }
    return instant;
}

public boolean isInstantBefore(Instant thisInstant, Instant otherInstant) {
    if (otherInstant == null) {
        throw new NullPointerException("otherInstant is null");
    }
    return thisInstant.isBefore(otherInstant);
}

public boolean isInstantAfter(Instant thisInstant, Instant otherInstant) {
    if (otherInstant == null) {
        throw new NullPointerException("otherInstant is null");
    }
    return thisInstant.isAfter(otherInstant);
}
```

This updated method will first try to obtain an instance of Instant using the provided epoch seconds and nanoseconds. If the provided epoch seconds exceed the maximum or minimum instant for Instant, it will throw a DateTimeException with a message "Instant exceeds maximum or minimum instant". If a numeric overflow occurs during the calculation, it will throw an ArithmeticException with a message "Numeric overflow occurs for Instant". If the obtained Instant is after the maximum Instant or before the minimum Instant, it will also throw a DateTimeException with the message "Instant exceeds maximum or minimum instant". If none of these exceptions occur, it will return the instance of Instant.

The `isInstantBefore` and `isInstantAfter` methods will check if the `otherInstant` parameter is null. If it is null, it will throw a NullPointerException with the message "otherInstant is null". If the `otherInstant` parameter is not null, it will return the result of the `isBefore` and `isAfter` methods of the `thisInstant` parameter.
------------------------------------------------------
