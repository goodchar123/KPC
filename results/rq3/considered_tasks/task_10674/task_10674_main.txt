Please write a java method that Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer.
Here's a Java method that formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer:

```java
public static void formatArray(Object[] array, MessageFormat messageFormat, StringBuffer stringBuffer) {
    Object[] formattedArray = new Object[array.length];
    for (int i = 0; i < array.length; i++) {
        formattedArray[i] = messageFormat.format(array[i]);
    }
    messageFormat.format(formattedArray, stringBuffer, null);
}
```

This method takes in three parameters:

1. `array`: the array of objects to be formatted
2. `messageFormat`: the MessageFormat object containing the pattern to be used for formatting
3. `stringBuffer`: the StringBuffer object to which the formatted string will be appended

The method first creates a new array `formattedArray` of the same length as `array`. It then loops through each element of `array`, formats it using the `messageFormat` object, and stores the formatted result in the corresponding index of `formattedArray`.

Finally, the method calls `messageFormat.format()` with `formattedArray` as the first parameter, `stringBuffer` as the second parameter, and `null` as the third parameter. This formats the pattern in `messageFormat` with the elements of `formattedArray`, and appends the result to `stringBuffer`.
------------------------------------------------------
Please check if an argument in the            arguments array is not of the type            expected by the format element(s) that use it. for java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition) in the code snippet you provided, otherwise throw IllegalArgumentException.
Please check if result is null for java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition) in the code snippet you provided, otherwise throw NullPointerException.
Here's the updated Java method that checks if the arguments array is of the expected type and if the result is null before calling `MessageFormat.format()`:

```java
public static void formatArray(Object[] array, MessageFormat messageFormat, StringBuffer stringBuffer) {
    Object[] formattedArray = new Object[array.length];
    for (int i = 0; i < array.length; i++) {
        if (!messageFormat.getFormatsByArgumentIndex()[i].getClass().isInstance(array[i])) {
            throw new IllegalArgumentException("Argument " + i + " is not of the expected type.");
        }
        formattedArray[i] = messageFormat.format(array[i]);
    }
    String result = messageFormat.format(formattedArray, stringBuffer, null);
    if (result == null) {
        throw new NullPointerException("Formatted result is null.");
    }
}
```

This updated method first checks if each argument in the `array` is of the expected type by comparing it with the format element's class using `getClass().isInstance()`. If an argument is not of the expected type, it throws an `IllegalArgumentException` with a message indicating which argument is not of the expected type.

After formatting each argument, the method calls `MessageFormat.format()` with `formattedArray` as the first parameter, `stringBuffer` as the second parameter, and `null` as the third parameter. It then checks if the result is null, and if so, throws a `NullPointerException` with a message indicating that the formatted result is null.
------------------------------------------------------
