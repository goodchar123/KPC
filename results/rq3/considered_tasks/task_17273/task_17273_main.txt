Please write a java method that Retrieves the DBMS-specific type name for values stored in the designated column.
Here's a Java method that retrieves the DBMS-specific type name for values stored in the designated column:

```java
public String getColumnType(Connection conn, String tableName, String columnName) throws SQLException {
    String columnType = null;
    DatabaseMetaData metaData = conn.getMetaData();
    ResultSet rs = metaData.getColumns(null, null, tableName, columnName);
    if (rs.next()) {
        columnType = rs.getString("TYPE_NAME");
    }
    return columnType;
}
```

This method takes in a `Connection` object, the name of the table, and the name of the column whose type you want to retrieve. It uses the `DatabaseMetaData` object to get information about the columns in the table, and then retrieves the `TYPE_NAME` value from the result set. If the result set has a next row, it means that the column exists and the method returns the `TYPE_NAME` value. If the result set is empty, it means that the column does not exist and the method returns `null`.
------------------------------------------------------
Please check if a database access error occurs or this method is called on a closed connection for java.sql.Connection.getMetaData() in the code snippet you provided, otherwise throw SQLException.
Please check if a database access error occurs or this method is         called on a closed result set for java.sql.ResultSet.next() in the code snippet you provided, otherwise throw SQLException.
Sure, here's the updated code snippet that checks for database access errors and closed connections/result sets:

```java
public String getColumnType(Connection conn, String tableName, String columnName) throws SQLException {
    String columnType = null;
    DatabaseMetaData metaData = null;
    ResultSet rs = null;
    try {
        metaData = conn.getMetaData();
        rs = metaData.getColumns(null, null, tableName, columnName);
        if (rs.next()) {
            columnType = rs.getString("TYPE_NAME");
        }
    } catch (SQLException e) {
        throw e;
    } finally {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
    return columnType;
}
```

In this updated code, we have added a try-catch block to catch any `SQLException` that may occur when calling `conn.getMetaData()`. Similarly, we have added a try-catch block to catch any `SQLException` that may occur when closing the `ResultSet`.

Additionally, we have added a check to ensure that the `ResultSet` is not `null` before attempting to close it. This is because the `ResultSet` may be `null` if an exception occurs before the `ResultSet` is initialized.

By adding these checks and handling the exceptions appropriately, we ensure that the method behaves correctly even in the presence of errors.
------------------------------------------------------
