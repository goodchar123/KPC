Please write a java method that Compares two Object arrays lexicographically using a specified comparator.
Here's a Java method that compares two Object arrays lexicographically using a specified comparator:

```java
public static <T> int compareArrays(T[] a1, T[] a2, Comparator<? super T> comparator) {
    int minLength = Math.min(a1.length, a2.length);
    for (int i = 0; i < minLength; i++) {
        int cmp = comparator.compare(a1[i], a2[i]);
        if (cmp != 0) {
            return cmp;
        }
    }
    return Integer.compare(a1.length, a2.length);
}
```

This method takes in two Object arrays `a1` and `a2`, and a `Comparator` object `comparator`. It then compares the elements of the two arrays lexicographically using the `compare` method of the `Comparator` object. If the elements at the same index in the two arrays are equal, it moves on to the next index. If it finds a pair of elements that are not equal, it returns the result of the comparison. If it reaches the end of one of the arrays without finding a pair of unequal elements, it returns the result of comparing the lengths of the two arrays.
------------------------------------------------------
Please check if an argument is null and this         comparator does not permit null arguments for java.util.Comparator.compare(T,T) in the code snippet you provided, otherwise throw NullPointerException.
Please check if the arguments' types prevent them from         being compared by this comparator. for java.util.Comparator.compare(T,T) in the code snippet you provided, otherwise throw ClassCastException.
Here's the updated Java method that checks for null arguments and throws a `NullPointerException` if the comparator does not permit null arguments, and checks for arguments' types and throws a `ClassCastException` if they cannot be compared by the comparator:

```java
public static <T> int compareArrays(T[] a1, T[] a2, Comparator<? super T> comparator) {
    Objects.requireNonNull(comparator, "Comparator cannot be null");
    int minLength = Math.min(a1.length, a2.length);
    for (int i = 0; i < minLength; i++) {
        T e1 = a1[i];
        T e2 = a2[i];
        if (e1 != null && e2 != null && !e1.getClass().equals(e2.getClass())) {
            throw new ClassCastException("Arguments' types prevent them from being compared by this comparator");
        }
        int cmp = comparator.compare(e1, e2);
        if (cmp != 0) {
            return cmp;
        }
    }
    return Integer.compare(a1.length, a2.length);
}
```

This updated method first checks if the `comparator` argument is null using `Objects.requireNonNull` method and throws a `NullPointerException` if it is null. It then checks the types of the elements being compared using `getClass()` method and throws a `ClassCastException` if they cannot be compared by the comparator. If both elements are null, they are considered equal and the comparison moves on to the next index. If it finds a pair of elements that are not equal, it returns the result of the comparison. If it reaches the end of one of the arrays without finding a pair of unequal elements, it returns the result of comparing the lengths of the two arrays.
------------------------------------------------------
