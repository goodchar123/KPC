
Sure, here's the updated code snippet with the requested error handling:

```java
public void setPositionAndResetBitOffset(InputStream inputStream, long position) throws IOException {
    try {
        inputStream.reset();
    } catch (IOException e) {
        throw new IOException("Error resetting stream: " + e.getMessage());
    }
    if (inputStream.skip(position) != position) {
        throw new IOException("Error skipping to position " + position);
    }
    if (inputStream instanceof BitInputStream) {
        ((BitInputStream) inputStream).resetBitOffset();
    } else {
        throw new IOException("Input stream does not support bit offset");
    }
}

public int read(InputStream inputStream, byte[] buffer) throws IOException {
    if (buffer == null) {
        throw new NullPointerException("Buffer cannot be null");
    }
    int bytesRead;
    try {
        bytesRead = inputStream.read(buffer);
    } catch (IOException e) {
        throw new IOException("Error reading from stream: " + e.getMessage());
    }
    if (bytesRead == -1) {
        throw new IOException("End of stream reached");
    }
    return bytesRead;
}

public int read(InputStream inputStream, byte[] buffer, int offset, int length) throws IOException {
    if (buffer == null) {
        throw new NullPointerException("Buffer cannot be null");
    }
    if (offset < 0 || length < 0 || length > buffer.length - offset) {
        throw new IndexOutOfBoundsException("Invalid offset or length");
    }
    int bytesRead;
    try {
        bytesRead = inputStream.read(buffer, offset, length);
    } catch (IOException e) {
        throw new IOException("Error reading from stream: " + e.getMessage());
    }
    if (bytesRead == -1) {
        throw new IOException("End of stream reached");
    }
    return bytesRead;
}

public long skip(InputStream inputStream, long n) throws IOException {
    long bytesSkipped;
    try {
        bytesSkipped = inputStream.skip(n);
    } catch (IOException e) {
        throw new IOException("Error skipping from stream: " + e.getMessage());
    }
    if (bytesSkipped != n) {
        throw new IOException("Error skipping " + n + " bytes");
    }
    return bytesSkipped;
}

public int available(InputStream inputStream) throws IOException {
    int availableBytes;
    try {
        availableBytes = inputStream.available();
    } catch (IOException e) {
        throw new IOException("Error getting available bytes: " + e.getMessage());
    }
    return availableBytes;
}

public void close(InputStream inputStream) throws IOException {
    try {
        inputStream.close();
    } catch (IOException e) {
        throw new IOException("Error closing stream: " + e.getMessage());
    }
}
```

This code now checks for various error conditions and throws an `IOException` with a descriptive error message if any of them occur.
------------------------------------------------------
