
Here is an updated version of the Java method that adds a duration to a specified temporal object, with the requested error checking:

```java
public static <T extends Temporal> T addDuration(T temporal, Duration duration) {
    if (temporal instanceof LocalDate) {
        try {
            return (T) ((LocalDate) temporal).plus(duration);
        } catch (DateTimeException e) {
            throw new DateTimeException("Cannot add duration to LocalDate: " + e.getMessage());
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow when adding duration to LocalDate: " + e.getMessage());
        }
    } else if (temporal instanceof LocalTime) {
        try {
            return (T) ((LocalTime) temporal).plus(duration);
        } catch (DateTimeException e) {
            throw new DateTimeException("Cannot add duration to LocalTime: " + e.getMessage());
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow when adding duration to LocalTime: " + e.getMessage());
        }
    } else if (temporal instanceof LocalDateTime) {
        try {
            return (T) ((LocalDateTime) temporal).plus(duration);
        } catch (DateTimeException e) {
            throw new DateTimeException("Cannot add duration to LocalDateTime: " + e.getMessage());
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow when adding duration to LocalDateTime: " + e.getMessage());
        }
    } else if (temporal instanceof ZonedDateTime) {
        try {
            return (T) ((ZonedDateTime) temporal).plus(duration);
        } catch (DateTimeException e) {
            throw new DateTimeException("Cannot add duration to ZonedDateTime: " + e.getMessage());
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow when adding duration to ZonedDateTime: " + e.getMessage());
        }
    } else if (temporal instanceof OffsetDateTime) {
        try {
            return (T) ((OffsetDateTime) temporal).plus(duration);
        } catch (DateTimeException e) {
            throw new DateTimeException("Cannot add duration to OffsetDateTime: " + e.getMessage());
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow when adding duration to OffsetDateTime: " + e.getMessage());
        }
    } else if (temporal instanceof Instant) {
        try {
            return (T) ((Instant) temporal).plus(duration);
        } catch (DateTimeException e) {
            throw new DateTimeException("Cannot add duration to Instant: " + e.getMessage());
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Numeric overflow when adding duration to Instant: " + e.getMessage());
        }
    } else {
        throw new IllegalArgumentException("Unsupported Temporal type: " + temporal.getClass());
    }
}
```

This updated method adds error checking for each of the supported `Temporal` types. If the addition cannot be made due to a `DateTimeException`, the method throws a new `DateTimeException` with a descriptive error message. If a numeric overflow occurs during the addition, the method throws a new `ArithmeticException` with a descriptive error message.

Note that the `try-catch` blocks are used to catch the specific exceptions that may be thrown by the `plus` methods of each `Temporal` type. This allows the method to provide more specific error messages for each type of `Temporal` object.
------------------------------------------------------
