
Here's an updated version of the Java method that includes the requested checks for the `contains` method:

```java
public static <T> boolean containsElement(Collection<T> collection, T element) {
    if (element == null && !collection.contains(null)) {
        throw new NullPointerException("This collection does not permit null elements");
    }
    try {
        return collection.contains(element);
    } catch (ClassCastException e) {
        throw new ClassCastException("The type of the specified element is incompatible with this collection");
    } catch (UnsupportedOperationException e) {
        throw new UnsupportedOperationException("The contains operation is not supported by this collection");
    }
}
```

This method first checks if the specified element is `null` and if the collection does not permit `null` elements. If this is the case, the method throws a `NullPointerException`.

Next, the method attempts to check if the collection contains the specified element. If the type of the element is incompatible with the collection, a `ClassCastException` is thrown. If the `contains` operation is not supported by the collection, an `UnsupportedOperationException` is thrown.

If the collection contains the specified element, the method returns `true`. If the element is not present in the collection, the method returns `false`.
------------------------------------------------------
