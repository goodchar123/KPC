
Here's the updated Java method that includes the requested checks for inappropriate key types and null keys:

```java
public static Object[] getValues(Map<String, Object> map, String[] keys) {
    Object[] values = new Object[keys.length];
    for (int i = 0; i < keys.length; i++) {
        String key = keys[i];
        if (!map.containsKey(key)) {
            throw new NullPointerException("Key is null or not present in map");
        }
        Object value = map.get(key);
        if (value != null && !value.getClass().isAssignableFrom(Object.class)) {
            throw new ClassCastException("Inappropriate key type for this map");
        }
        values[i] = value;
    }
    return values;
}
```

This updated method first checks if the specified key is null or not present in the map using the `containsKey()` method. If the key is null or not present, it throws a `NullPointerException`.

Next, it retrieves the value from the map using the `get()` method and checks if the value is not null and is of the appropriate type using the `getClass()` and `isAssignableFrom()` methods. If the value is not of the appropriate type, it throws a `ClassCastException`.

Finally, if the key is present and the value is of the appropriate type, it stores the value in the values array at the same index as the current key and returns the values array.
------------------------------------------------------
