Please write a java method that Returns an array of the values of the items whose names are specified by keys, in the same order as keys.
Here's a Java method that returns an array of the values of the items whose names are specified by keys, in the same order as keys:

```java
public static Object[] getValues(Map<String, Object> map, String[] keys) {
    Object[] values = new Object[keys.length];
    for (int i = 0; i < keys.length; i++) {
        values[i] = map.get(keys[i]);
    }
    return values;
}
```

This method takes in a `Map` object and an array of keys as parameters. It then creates a new array of `Object` type with the same length as the keys array. It then loops through the keys array and retrieves the corresponding value from the map using the `get()` method. The retrieved value is then stored in the values array at the same index as the current key. Finally, the method returns the values array.
------------------------------------------------------
Please check if the key is of an inappropriate type for         this map (optional) for java.util.Map.get(java.lang.Object) in the code snippet you provided, otherwise throw ClassCastException.
Please check if the specified key is null and this map         does not permit null keys (optional) for java.util.Map.get(java.lang.Object) in the code snippet you provided, otherwise throw NullPointerException.
Here's the updated Java method that includes the requested checks for inappropriate key types and null keys:

```java
public static Object[] getValues(Map<String, Object> map, String[] keys) {
    Object[] values = new Object[keys.length];
    for (int i = 0; i < keys.length; i++) {
        String key = keys[i];
        if (!map.containsKey(key)) {
            throw new NullPointerException("Key is null or not present in map");
        }
        Object value = map.get(key);
        if (value != null && !value.getClass().isAssignableFrom(Object.class)) {
            throw new ClassCastException("Inappropriate key type for this map");
        }
        values[i] = value;
    }
    return values;
}
```

This updated method first checks if the specified key is null or not present in the map using the `containsKey()` method. If the key is null or not present, it throws a `NullPointerException`.

Next, it retrieves the value from the map using the `get()` method and checks if the value is not null and is of the appropriate type using the `getClass()` and `isAssignableFrom()` methods. If the value is not of the appropriate type, it throws a `ClassCastException`.

Finally, if the key is present and the value is of the appropriate type, it stores the value in the values array at the same index as the current key and returns the values array.
------------------------------------------------------
