
Sure, here's an updated version of the `setSocketLinger()` method that includes all the error checking you requested:

```java
import java.net.Socket;
import java.net.SocketException;

public class SocketUtils {
    
    public static void setSocketLinger(Socket socket, boolean enable, int lingerTime) throws SocketException, IllegalArgumentException {
        if (lingerTime < 0) {
            throw new IllegalArgumentException("Linger time cannot be negative");
        }
        socket.setSoLinger(enable, lingerTime);
        if (socket.getSoLinger() != lingerTime) {
            throw new SocketException("Error setting SO_LINGER option");
        }
    }
    
    public static int getSocketLinger(Socket socket) throws SocketException {
        int lingerTime = socket.getSoLinger();
        if (lingerTime < 0) {
            throw new SocketException("Error getting SO_LINGER option");
        }
        return lingerTime;
    }
    
}
```

This updated version of the `SocketUtils` class includes a new method called `getSocketLinger()`. This method calls the `getSoLinger()` method on the `Socket` object to retrieve the current SO_LINGER value.

After retrieving the SO_LINGER value, the method checks if it is negative. If it is, it throws a `SocketException` to indicate that there was an error in the underlying protocol, such as a TCP error.

To use these updated methods, you can call them with a `Socket` object and the desired SO_LINGER settings:

```java
Socket socket = new Socket("localhost", 8080);
try {
    SocketUtils.setSocketLinger(socket, true, 10); // enable SO_LINGER with a linger time of 10 seconds
    int lingerTime = SocketUtils.getSocketLinger(socket); // retrieve the current SO_LINGER value
} catch (SocketException | IllegalArgumentException e) {
    // handle exception
}
```
------------------------------------------------------
