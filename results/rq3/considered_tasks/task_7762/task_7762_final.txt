
Sure, here's the updated code snippet that checks if the class was not found for `java.lang.ClassLoader.loadClass(java.lang.String)` and throws a `ClassNotFoundException` in that case:

```java
public static Class<?> getClassInModule(String moduleName, String binaryName) throws ClassNotFoundException {
    Module module = ModuleLayer.boot().findModule(moduleName).orElseThrow(() -> new ClassNotFoundException("Module not found: " + moduleName));
    try {
        return module.getClassLoader().loadClass(binaryName);
    } catch (ClassNotFoundException e) {
        throw new ClassNotFoundException("Class not found: " + binaryName, e);
    }
}
```

This updated method is similar to the previous one, but it now catches the `ClassNotFoundException` that may be thrown by `module.getClassLoader().loadClass(binaryName)` and re-throws it as a `ClassNotFoundException` with a more informative message that includes the name of the class that was not found.
------------------------------------------------------
