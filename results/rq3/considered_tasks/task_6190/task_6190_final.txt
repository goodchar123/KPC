
Sure, here's the updated Java method that checks for `NumberFormatException` and `DateTimeException`:

```java
import java.time.Year;
import java.time.format.DateTimeParseException;

public class YearFromString {
    public static Year getYearFromString(String yearString) throws NumberFormatException, DateTimeParseException {
        int year;
        try {
            year = Integer.parseInt(yearString);
        } catch (NumberFormatException e) {
            throw new NumberFormatException("Invalid year string: " + yearString);
        }
        try {
            return Year.of(year);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid year: " + year, e);
        }
    }
}
```

This updated method uses a `try-catch` block to catch `NumberFormatException` and `DateTimeException`. If `NumberFormatException` is caught, it throws a new `NumberFormatException` with a custom error message. If `DateTimeException` is caught, it throws a new `DateTimeException` with a custom error message and the original exception as the cause.
------------------------------------------------------
