Please write a java method that Returns the string representation (display name) of the calendar field value in the given style and locale.
Here's an example Java method that returns the string representation of a calendar field value in the given style and locale:

```java
import java.util.Calendar;
import java.util.Locale;

public class CalendarHelper {
    
    public static String getCalendarFieldValue(Calendar calendar, int field, int style, Locale locale) {
        return calendar.getDisplayName(field, style, locale);
    }
    
}
```

This method takes in a `Calendar` object, an integer representing the calendar field (e.g. `Calendar.MONTH`), an integer representing the style (e.g. `Calendar.SHORT`), and a `Locale` object representing the desired locale. It then calls the `getDisplayName` method on the `Calendar` object, passing in the field, style, and locale, and returns the resulting string representation.

You can call this method like so:

```java
Calendar calendar = Calendar.getInstance();
int month = calendar.get(Calendar.MONTH);
String monthName = CalendarHelper.getCalendarFieldValue(calendar, Calendar.MONTH, Calendar.SHORT, Locale.US);
System.out.println("Month name: " + monthName);
```

This would output something like "Month name: Jan" for the month of January.
------------------------------------------------------
Please check if field or style is invalid,        or if this Calendar is non lenient and any        of the calendar fields have invalid values for java.util.Calendar.getDisplayName(int,int,java.util.Locale) in the code snippet you provided, otherwise throw IllegalArgumentException.
Please check if locale is null for java.util.Calendar.getDisplayName(int,int,java.util.Locale) in the code snippet you provided, otherwise throw NullPointerException.
Sure, here's an updated version of the `getCalendarFieldValue` method that checks for invalid arguments and throws the appropriate exceptions:

```java
import java.util.Calendar;
import java.util.Locale;

public class CalendarHelper {
    
    public static String getCalendarFieldValue(Calendar calendar, int field, int style, Locale locale) {
        if (calendar == null || locale == null) {
            throw new NullPointerException("Calendar and locale cannot be null");
        }
        if (field < 0 || field > Calendar.FIELD_COUNT - 1 || style < 0 || style > Calendar.LONG_FORMAT) {
            throw new IllegalArgumentException("Invalid field or style argument");
        }
        if (!calendar.isLenient()) {
            try {
                calendar.get(field);
            } catch (IllegalArgumentException e) {
                throw new IllegalArgumentException("Calendar has invalid field value");
            }
        }
        return calendar.getDisplayName(field, style, locale);
    }
    
}
```

This version first checks if the `calendar` and `locale` arguments are null, and throws a `NullPointerException` if either is null. It then checks if the `field` and `style` arguments are valid, and throws an `IllegalArgumentException` if either is invalid.

If the `calendar` object is non-lenient, the method attempts to get the value of the specified field and catches any `IllegalArgumentException` that may be thrown. If an exception is caught, it means that the calendar has an invalid field value, so the method throws another `IllegalArgumentException`.

If all checks pass, the method calls `getDisplayName` on the `calendar` object and returns the resulting string representation.

You can call this updated method in the same way as before, and it will now throw exceptions if any invalid arguments are passed in.
------------------------------------------------------
