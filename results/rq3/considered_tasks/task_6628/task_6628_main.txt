Please write a java method that Obtains an instance of MonthDay from a temporal object.
Sure, here's an example Java method that obtains an instance of MonthDay from a temporal object:

```
import java.time.MonthDay;
import java.time.temporal.TemporalAccessor;

public class MonthDayHelper {
    public static MonthDay getMonthDay(TemporalAccessor temporal) {
        return MonthDay.from(temporal);
    }
}
```

This method takes a `TemporalAccessor` object as a parameter and returns an instance of `MonthDay` by calling the `MonthDay.from()` method and passing in the `TemporalAccessor` object. 

You can use this method like this:

```
import java.time.LocalDate;
import java.time.MonthDay;

public class Main {
    public static void main(String[] args) {
        LocalDate date = LocalDate.of(2021, 10, 31);
        MonthDay monthDay = MonthDayHelper.getMonthDay(date);
        System.out.println(monthDay); // Output: --10-31
    }
}
```

In this example, we create a `LocalDate` object representing October 31, 2021. We then call the `getMonthDay()` method and pass in the `LocalDate` object. The method returns a `MonthDay` object representing October 31. We then print out the `MonthDay` object using the `System.out.println()` method.
------------------------------------------------------
Please check if unable to convert to a MonthDay for java.time.MonthDay.from(java.time.temporal.TemporalAccessor) in the code snippet you provided, otherwise throw DateTimeException.
Please check if the value of any field is out of range,  or if the day of month is invalid for the month year for java.time.LocalDate.of(int,int,int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's an updated version of the `getMonthDay()` method that checks for invalid values and throws a `DateTimeException` if necessary:

```
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.MonthDay;
import java.time.temporal.TemporalAccessor;

public class MonthDayHelper {
    public static MonthDay getMonthDay(TemporalAccessor temporal) {
        try {
            return MonthDay.from(temporal);
        } catch (DateTimeException e) {
            throw new DateTimeException("Unable to convert to MonthDay", e);
        }
    }
    
    public static LocalDate getLocalDate(int year, int month, int dayOfMonth) {
        try {
            return LocalDate.of(year, month, dayOfMonth);
        } catch (DateTimeException e) {
            throw new DateTimeException("Invalid date values", e);
        }
    }
}
```

In this updated version, we've added a try-catch block to the `getMonthDay()` method that catches any `DateTimeException` thrown by the `MonthDay.from()` method. If an exception is caught, we throw a new `DateTimeException` with a more descriptive error message and the original exception as the cause.

We've also added a new method called `getLocalDate()` that takes three integer parameters representing the year, month, and day of month, respectively. This method calls the `LocalDate.of()` method to create a `LocalDate` object with the given values. If any of the values are invalid, a `DateTimeException` is thrown with a descriptive error message and the original exception as the cause.

You can use these methods like this:

```
import java.time.LocalDate;
import java.time.MonthDay;

public class Main {
    public static void main(String[] args) {
        LocalDate date = MonthDayHelper.getLocalDate(2021, 2, 29);
        MonthDay monthDay = MonthDayHelper.getMonthDay(date);
        System.out.println(monthDay); // Output: --02-29 (Leap year)
        
        LocalDate invalidDate = MonthDayHelper.getLocalDate(2021, 4, 31);
        MonthDay invalidMonthDay = MonthDayHelper.getMonthDay(invalidDate);
        // Throws DateTimeException with "Unable to convert to MonthDay" message and original exception as cause
    }
}
```

In this example, we first use the `getLocalDate()` method to create a `LocalDate` object representing February 29, 2021 (a leap year). We then call the `getMonthDay()` method and pass in the `LocalDate` object. The method returns a `MonthDay` object representing February 29. We then print out the `MonthDay` object using the `System.out.println()` method.

We also try to create a `LocalDate` object representing April 31, 2021, which is an invalid date. The `getLocalDate()` method throws a `DateTimeException` with a descriptive error message and the original exception as the cause. When we try to pass this invalid `LocalDate` object to the `getMonthDay()` method, it also throws a `DateTimeException` with a descriptive error message and the original exception as the cause.
------------------------------------------------------
