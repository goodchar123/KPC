List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.rmi.server.UnicastRemoteObject.exportObject(ClientImpl obj, int port)` 
2. `java.rmi.registry.LocateRegistry.getRegistry()`
3. `java.rmi.registry.Registry.rebind(String name, Remote obj)` 
4. `java.lang.System.out.println(String x)`
5. `java.lang.System.err.println(String x)`

 + From response, we get: ['java.rmi.server.UnicastRemoteObject.exportObject(ClientImplobj,intport)', 'java.rmi.registry.LocateRegistry.getRegistry()', 'java.rmi.registry.Registry.rebind(Stringname,Remoteobj)', 'java.lang.System.out.println(Stringx)', 'java.lang.System.err.println(Stringx)']
------------------------------------------------------
Is the RemoteException handled or caught for java.rmi.registry.LocateRegistry.getRegistry() in the code snippet? Answer in Yes or No only.
No. The `RemoteException` is not handled or caught for `java.rmi.registry.LocateRegistry.getRegistry()` in the code snippet.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.rmi.server.UnicastRemoteObject.exportObject(Object obj, int port)` 
2. `java.rmi.registry.LocateRegistry.getRegistry(String host, int port, RMIClientSocketFactory csf)`
3. `java.rmi.registry.Registry.rebind(String name, Remote obj)`

 + From response, we get: ['java.rmi.server.UnicastRemoteObject.exportObject(Objectobj,intport)', 'java.rmi.registry.LocateRegistry.getRegistry(Stringhost,intport,RMIClientSocketFactorycsf)', 'java.rmi.registry.Registry.rebind(Stringname,Remoteobj)']
------------------------------------------------------
