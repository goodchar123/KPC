
Here's the updated Java method that includes the requested checks for both `contains()` methods:

```
public static <T> boolean containsElement(Set<T> set, T element) {
    if (element == null && !set.contains(null)) {
        throw new NullPointerException("Specified element is null and this set does not permit null elements");
    }
    if (!set.contains(element)) {
        throw new ClassCastException("Type of the specified element is incompatible with this set");
    }
    return true;
}

public static <T> boolean containsElement(Collection<T> collection, T element) {
    if (element == null && !collection.contains(null)) {
        throw new NullPointerException("Specified element is null and this collection does not permit null elements");
    }
    if (!collection.contains(element)) {
        throw new ClassCastException("Type of the specified element is incompatible with this collection");
    }
    return true;
}
```

The first method checks if the specified element is null and the set does not permit null elements, and throws a `NullPointerException` if this is the case. It then checks if the set contains the specified element and throws a `ClassCastException` if the type of the element is incompatible with the set. If neither of these checks fail, the method returns `true`.

The second method is similar, but checks the specified element against a collection instead of a set.
------------------------------------------------------
