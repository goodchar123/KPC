
Sure, here's the updated code snippet that checks for `IOException` and `IndexOutOfBoundsException`:

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Properties;

public class PropertyListReader {
    public static Properties read(Reader reader) throws IOException {
        Properties properties = new Properties();
        BufferedReader bufferedReader = new BufferedReader(reader);
        String line;
        try {
            while ((line = bufferedReader.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty() || line.startsWith("#")) {
                    continue;
                }
                int index = line.indexOf('=');
                if (index == -1) {
                    throw new IOException("Invalid property line: " + line);
                }
                String key = line.substring(0, index).trim();
                String value = line.substring(index + 1).trim();
                if (key.isEmpty()) {
                    throw new IOException("Invalid property key: " + line);
                }
                if (value.isEmpty()) {
                    throw new IOException("Invalid property value: " + line);
                }
                properties.setProperty(key, value);
            }
        } catch (IOException e) {
            throw e;
        } catch (IndexOutOfBoundsException e) {
            throw e;
        }
        return properties;
    }
}
```

In this updated code, we have added two checks:

1. Before calling `readLine()` on the `BufferedReader`, we have added a `try-catch` block to catch any `IOException` that may occur. If an `IOException` occurs, we re-throw it as is.

2. After extracting the `key` and `value` from each line, we check if either of them is empty. If either of them is empty, we throw an `IOException` with an appropriate error message.

Additionally, we have added a `try-catch` block around the `while` loop to catch any `IndexOutOfBoundsException` that may occur when calling the `substring()` method. If an `IndexOutOfBoundsException` occurs, we re-throw it as is.
------------------------------------------------------
