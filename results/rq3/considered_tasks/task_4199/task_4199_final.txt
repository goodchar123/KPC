
Sure, here's the updated code that checks for the availability of the `DatatypeFactory` implementation and throws a `DatatypeConfigurationException` if it's not available or cannot be instantiated:

```java
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.Duration;

public class YearMonthDurationCreator {
    public static Duration createYearMonthDuration(int year, int month) throws DatatypeConfigurationException {
        DatatypeFactory factory;
        try {
            factory = DatatypeFactory.newInstance();
        } catch (DatatypeConfigurationException e) {
            throw new DatatypeConfigurationException("Error creating DatatypeFactory: " + e.getMessage());
        }
        return factory.newDurationYearMonth(year, month);
    }
}
```

In this updated code, we use a try-catch block to catch the `DatatypeConfigurationException` that may be thrown by the `DatatypeFactory.newInstance()` method. If an exception is caught, we throw a new `DatatypeConfigurationException` with a custom error message that includes the original exception's message.
------------------------------------------------------
