{"loop_id": 0, "unhandled_api_list": ["java.io.File.toPath()", "java.nio.file.Files.isSymbolicLink(java.nio.file.Path)", "java.nio.file.Files.isExecutable(java.nio.file.Path)", "java.nio.file.Files.readSymbolicLink(java.nio.file.Path)", "java.nio.file.Files.readSymbolicLink(java.nio.file.Path)", "java.nio.file.Files.readSymbolicLink(java.nio.file.Path)"], "num_of_unhandled_api": 6, "unhandled_exception_list": ["Please check if a Path object cannot be constructed from the abstract          path (see FileSystem.getPath) for java.io.File.toPath() in the code snippet you provided, otherwise throw InvalidPathException.", "Please check In the case of the default provider, and a security manager is          installed, its checkRead          method denies read access to the file. for java.nio.file.Files.isSymbolicLink(java.nio.file.Path) in the code snippet you provided, otherwise throw SecurityException.", "Please check In the case of the default provider, and a security manager is          installed, the checkExec is invoked to check execute access to the file. for java.nio.file.Files.isExecutable(java.nio.file.Path) in the code snippet you provided, otherwise throw SecurityException.", "Please check if the implementation does not support symbolic links for java.nio.file.Files.readSymbolicLink(java.nio.file.Path) in the code snippet you provided, otherwise throw UnsupportedOperationException.", "Please check if the target could otherwise not be read because the file          is not a symbolic link (optional specific exception) for java.nio.file.Files.readSymbolicLink(java.nio.file.Path) in the code snippet you provided, otherwise throw NotLinkException.", "Please check In the case of the default provider, and a security manager          is installed, it checks that FilePermission has been          granted with the \"readlink\" action to read the link. for java.nio.file.Files.readSymbolicLink(java.nio.file.Path) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 6}
{"loop_id": 1, "unhandled_api_list": ["java.io.File.toPath()", "java.nio.file.Files.readSymbolicLink(java.nio.file.Path)"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if a Path object cannot be constructed from the abstract          path (see FileSystem.getPath) for java.io.File.toPath() in the code snippet you provided, otherwise throw InvalidPathException.", "Please check if an I/O error occurs for java.nio.file.Files.readSymbolicLink(java.nio.file.Path) in the code snippet you provided, otherwise throw IOException."], "num_of_unhandled_exception": 2}
{"loop_id": 2, "unhandled_api_list": ["java.io.File.toPath()", "java.nio.file.Files.readSymbolicLink(java.nio.file.Path)"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if a Path object cannot be constructed from the abstract          path (see FileSystem.getPath) for java.io.File.toPath() in the code snippet you provided, otherwise throw InvalidPathException.", "Please check In the case of the default provider, and a security manager          is installed, it checks that FilePermission has been          granted with the \"readlink\" action to read the link. for java.nio.file.Files.readSymbolicLink(java.nio.file.Path) in the code snippet you provided, otherwise throw SecurityException."], "num_of_unhandled_exception": 2}
{"loop_id": 3, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
