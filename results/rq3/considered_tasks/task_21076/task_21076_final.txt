
Sure, here's the updated code snippet that checks for database access errors and closed connections:

```java
import java.sql.*;

public int getDatabaseMajorVersion(Connection conn) throws SQLException {
    if (conn.isClosed()) {
        throw new SQLException("Connection is closed");
    }
    try {
        DatabaseMetaData metaData = conn.getMetaData();
        if (metaData == null) {
            throw new SQLException("Failed to retrieve database metadata");
        }
        return metaData.getDatabaseMajorVersion();
    } catch (SQLException e) {
        throw new SQLException("Database access error", e);
    }
}
```

This updated method first checks if the connection is closed using the `isClosed()` method of the `Connection` object. If the connection is closed, a `SQLException` is thrown with an appropriate message.

If the connection is open, the method tries to retrieve the `DatabaseMetaData` object using the `getMetaData()` method of the `Connection` object. If the `DatabaseMetaData` object is `null`, it means that the retrieval failed, so a `SQLException` is thrown with an appropriate message.

If the `DatabaseMetaData` object is not `null`, the method tries to retrieve the major version number of the database using the `getDatabaseMajorVersion()` method of the `DatabaseMetaData` object. If a database access error occurs, a `SQLException` is thrown with an appropriate message and the original exception is included as the cause of the exception.

Finally, if everything is successful, the method returns the major version number of the database.
------------------------------------------------------
