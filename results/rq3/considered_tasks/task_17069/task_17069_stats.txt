{"loop_id": 0, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()"], "num_of_unhandled_api": 1, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 1}
{"loop_id": 1, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 2, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 3, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 4, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 5, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 6, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 7, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 8, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 9, "unhandled_api_list": ["javax.sql.rowset.CachedRowSet.release()", "javax.sql.rowset.CachedRowSet.getShowDeleted()"], "num_of_unhandled_api": 2, "unhandled_exception_list": ["Please check if an error occurs flushing the contents of this CachedRowSet object for javax.sql.rowset.CachedRowSet.release() in the code snippet you provided, otherwise throw SQLException.", "Please check if a rowset implementation is unable to to determine whether rows marked for deletion are visible for javax.sql.rowset.CachedRowSet.getShowDeleted() in the code snippet you provided, otherwise throw SQLException."], "num_of_unhandled_exception": 2}
{"loop_id": 10, "unhandled_api_list": [], "num_of_unhandled_api": 0, "unhandled_exception_list": [], "num_of_unhandled_exception": 0}
