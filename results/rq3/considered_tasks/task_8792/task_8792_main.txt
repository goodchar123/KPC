Please write a java method that Releases the given number of permits, returning them to the semaphore.
Here's an example Java method that releases a given number of permits and returns them to the semaphore:

```
public void releasePermits(Semaphore semaphore, int permits) {
    semaphore.release(permits);
}
```

This method takes in a Semaphore object and an integer value representing the number of permits to release. It then calls the `release()` method on the semaphore object, passing in the number of permits to release as an argument. This method releases the specified number of permits and returns them to the semaphore, allowing other threads to acquire them.
------------------------------------------------------
Please check if permits is negative for java.util.concurrent.Semaphore.release(int) in the code snippet you provided, otherwise throw IllegalArgumentException.
Sure, here's an updated version of the Java method that checks if the number of permits to release is negative and throws an `IllegalArgumentException` if it is:

```
public void releasePermits(Semaphore semaphore, int permits) {
    if (permits < 0) {
        throw new IllegalArgumentException("Number of permits to release cannot be negative");
    }
    semaphore.release(permits);
}
```

This updated method first checks if the `permits` parameter is less than zero. If it is, it throws an `IllegalArgumentException` with a message indicating that the number of permits to release cannot be negative. If the `permits` parameter is non-negative, the method calls the `release()` method on the `semaphore` object, passing in the number of permits to release as an argument.
------------------------------------------------------
