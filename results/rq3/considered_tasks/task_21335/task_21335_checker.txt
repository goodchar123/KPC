List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.sql.Connection.prepareStatement(String sql)`
2. `java.io.StringReader.StringReader(String s)`
3. `java.sql.PreparedStatement.setCharacterStream(int parameterIndex, java.io.Reader reader, int length)`
4. `java.sql.PreparedStatement.setInt(int parameterIndex, int x)`
5. `java.sql.PreparedStatement.executeUpdate()`

 + From response, we get: ['java.sql.Connection.prepareStatement(Stringsql)', 'java.io.StringReader.StringReader(Strings)', 'java.sql.PreparedStatement.setCharacterStream(intparameterIndex,java.io.Readerreader,intlength)', 'java.sql.PreparedStatement.setInt(intparameterIndex,intx)', 'java.sql.PreparedStatement.executeUpdate()']
------------------------------------------------------
Is the SQLException handled or caught for java.sql.PreparedStatement.executeUpdate() in the code snippet? Answer in Yes or No only.
Yes.
------------------------------------------------------
Is the SQLTimeoutException handled or caught for java.sql.PreparedStatement.executeUpdate() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.sql.Connection.prepareStatement(java.lang.String)
2. java.io.StringReader.StringReader(java.lang.String)
3. java.sql.PreparedStatement.setCharacterStream(int, java.io.Reader, int)
4. java.sql.PreparedStatement.setInt(int, int)
5. java.sql.PreparedStatement.setQueryTimeout(int)
6. java.sql.PreparedStatement.executeUpdate()
7. java.sql.PreparedStatement.cancel()
8. java.sql.SQLException.SQLException(java.lang.String)
9. java.sql.SQLTimeoutException

 + From response, we get: []
------------------------------------------------------
