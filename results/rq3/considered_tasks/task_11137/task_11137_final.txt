
Sure, here's an updated version of the code snippet that checks for an I/O error when closing the socket:

```java
import java.net.*;

public class SocketExample {
    public static void main(String[] args) {
        String host = "example.com";
        int port = 80;

        try {
            // Create a socket and connect to the remote host
            Socket socket = new Socket(host, port);

            // Do something with the socket...

            // Close the socket and check for I/O errors
            socket.close();
            if (socket.isClosed()) {
                System.out.println("Socket closed successfully");
            } else {
                throw new IOException("Error closing socket");
            }
        } catch (UnknownHostException e) {
            System.err.println("Unknown host: " + host);
        } catch (IOException e) {
            System.err.println("Error connecting to " + host + ":" + port);
        }
    }
}
```

In this updated version, we first close the socket using `socket.close()`. We then check if the socket is closed using `socket.isClosed()`. If the socket is closed, we print a message indicating that the socket was closed successfully. If the socket is not closed, we throw an `IOException` with an error message. This ensures that any I/O errors that occur when closing the socket are properly handled.
------------------------------------------------------
