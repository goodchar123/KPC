List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. `java.io.ByteArrayOutputStream`
2. `java.io.ObjectOutputStream.writeObject(Object)`
3. `java.io.ByteArrayInputStream`
4. `java.io.ObjectInputStream`
5. `java.io.ObjectInputStream.readObject()`

 + From response, we get: ['java.io.ByteArrayOutputStream', 'java.io.ObjectOutputStream.writeObject(Object)', 'java.io.ByteArrayInputStream', 'java.io.ObjectInputStream', 'java.io.ObjectInputStream.readObject()']
------------------------------------------------------
Is the ClassNotFoundException handled or caught for java.io.ObjectInputStream.readObject() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the InvalidClassException handled or caught for java.io.ObjectInputStream.readObject() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the StreamCorruptedException handled or caught for java.io.ObjectInputStream.readObject() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the OptionalDataException handled or caught for java.io.ObjectInputStream.readObject() in the code snippet? Answer in Yes or No only.
No.
------------------------------------------------------
Is the IOException handled or caught for java.io.ObjectInputStream.readObject() in the code snippet? Answer in Yes or No only.
Yes.
------------------------------------------------------
List the fully qualified name of the Java JDK methods used in the method above. Provide only name with parameters, no other text. Parameters must be fully qualified. Display in a list.
1. java.io.ByteArrayOutputStream.<init>()
2. java.io.ObjectOutputStream.<init>(java.io.OutputStream)
3. java.io.ObjectOutputStream.writeObject(java.lang.Object)
4. java.io.ByteArrayInputStream.<init>(byte[])
5. java.io.ObjectInputStream.<init>(java.io.InputStream)
6. java.io.ObjectInputStream.readObject()

 + From response, we get: []
------------------------------------------------------
