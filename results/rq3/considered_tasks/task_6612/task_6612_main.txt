Please write a java method that Adjusts the specified temporal object to have this year-month.
Here's a Java method that adjusts the specified temporal object to have the specified year-month:

```java
public static Temporal adjustToYearMonth(Temporal temporal, YearMonth yearMonth) {
    if (temporal instanceof LocalDate) {
        return yearMonth.atDay(((LocalDate) temporal).getDayOfMonth());
    } else if (temporal instanceof LocalDateTime) {
        return yearMonth.atDay(((LocalDateTime) temporal).getDayOfMonth())
                .atTime(((LocalDateTime) temporal).toLocalTime());
    } else if (temporal instanceof ZonedDateTime) {
        return yearMonth.atDay(((ZonedDateTime) temporal).getDayOfMonth())
                .atTime(((ZonedDateTime) temporal).toLocalTime())
                .atZone(((ZonedDateTime) temporal).getZone());
    } else {
        throw new UnsupportedOperationException("Temporal type not supported: " + temporal.getClass());
    }
}
```

This method takes two arguments: the temporal object to adjust, and the year-month to adjust it to. It returns a new temporal object with the same type as the input object, but with the year and month set to the specified value.

The method first checks the type of the input object using the `instanceof` operator. If it's a `LocalDate`, it creates a new `LocalDate` with the same day of month as the input object, but with the year and month set to the specified value. If it's a `LocalDateTime`, it creates a new `LocalDateTime` with the same day of month and time as the input object, but with the year and month set to the specified value. If it's a `ZonedDateTime`, it creates a new `ZonedDateTime` with the same day of month, time, and time zone as the input object, but with the year and month set to the specified value.

If the input object is not one of these types, the method throws an `UnsupportedOperationException`.

You can call this method like this:

```java
LocalDate date = LocalDate.of(2021, 5, 15);
YearMonth yearMonth = YearMonth.of(2022, 6);
Temporal adjusted = adjustToYearMonth(date, yearMonth);
System.out.println(adjusted); // 2022-05-15
```
------------------------------------------------------
Please check if either field value is invalid for java.time.YearMonth.of(int,int) in the code snippet you provided, otherwise throw DateTimeException.
Sure, here's the updated Java method that checks if either field value is invalid for `java.time.YearMonth.of(int,int)`, and throws a `DateTimeException` if that's the case:

```java
public static Temporal adjustToYearMonth(Temporal temporal, YearMonth yearMonth) {
    int year = yearMonth.getYear();
    int month = yearMonth.getMonthValue();
    if (year < Year.MIN_VALUE || year > Year.MAX_VALUE || month < 1 || month > 12) {
        throw new DateTimeException("Invalid year or month value for YearMonth: " + yearMonth);
    }
    if (temporal instanceof LocalDate) {
        return yearMonth.atDay(((LocalDate) temporal).getDayOfMonth());
    } else if (temporal instanceof LocalDateTime) {
        return yearMonth.atDay(((LocalDateTime) temporal).getDayOfMonth())
                .atTime(((LocalDateTime) temporal).toLocalTime());
    } else if (temporal instanceof ZonedDateTime) {
        return yearMonth.atDay(((ZonedDateTime) temporal).getDayOfMonth())
                .atTime(((ZonedDateTime) temporal).toLocalTime())
                .atZone(((ZonedDateTime) temporal).getZone());
    } else {
        throw new UnsupportedOperationException("Temporal type not supported: " + temporal.getClass());
    }
}
```

This method first extracts the year and month values from the `YearMonth` object, and checks if they are within the valid range for `YearMonth` using the `Year.MIN_VALUE`, `Year.MAX_VALUE`, and `Month` constants. If either value is invalid, it throws a `DateTimeException` with a descriptive error message.

If both values are valid, the method proceeds to adjust the temporal object to the specified year-month, as before.

You can call this updated method like this:

```java
LocalDate date = LocalDate.of(2021, 5, 15);
YearMonth yearMonth = YearMonth.of(2022, 13);
Temporal adjusted = adjustToYearMonth(date, yearMonth); // throws DateTimeException
``` 

In this example, the `YearMonth` object has an invalid month value of 13, which causes the method to throw a `DateTimeException`.
------------------------------------------------------
